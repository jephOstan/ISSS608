---
title: "Ternary Plot for Singapore Population Structure"
subtitle: "Hands-on Exercise 5.1 : Visual Multivariate Analysis"
editor: visual
date:  11 Feb 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores various approaches to building ternary plots programmatically using R for visualising and analysing population structure of Singapore.

**Ternary plot**[^1]**,** also known as a **ternary graph**, **triangle plot**, **simplex plot**, **Gibbs triangle**, **de Finetti diagram**, is a way to display or analyse the distribution of compositional data in a 3-dimensional case.

[^1]: Wikipedia. 2022. Ternary Plot. https://en.wikipedia.org/wiki/Ternary_plot

Each side is scaled from 0 to 1, representing one of the three components. A point is plotted based on the intersection between the perpendicular lines from the sides.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Scope of this study :**]{style="color:#3a9c88"}

Following are the 3 main focuses :

-   Derive three new measures using *mutate( )* function of **dplyr** package.

-   Build a static ternary plot using *ggtern( )* function of **ggtern** package.

-   Build an interactive ternary plot using *plot-ly( )* function of **plotly** package.
:::

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(ggtern, plotly, tidyverse)
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**R packages highlights :**]{style="color:#3a9c88"}

-   [**ggtern**](http://www.ggtern.com/), a [ggplot extension]{.underline} package specially designed to plot ternary diagrams.

-   [**plotly**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, plotly.js .
:::

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data).

-   The name of this data set in CSV format is *respopagsex2000to2018_tidy.csv*/

## **3.2 Import Data**

### **3.2.1 Import Attribute Data**

Involved two (2) steps : import and inspect imported data set.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 

problems(pop_data)
```

## **3.3 Wrangle Data**

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year)) %>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8])) %>%
  mutate(ACTIVE = rowSums(.[9:16])) %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018) %>%
  filter(TOTAL > 0)
```

# **4. CREATE TERNARY PLOT**

## **4.1 Create static ternary diagram**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***ggtern( )*** - ggtern -]{style="color:#d46e15"} to create ternary diagram.

For ggtern version 1.0, there are 8 types of geometries supported (may revised in latter version) :

-   \`point\`, \`path\`, \`segment\`, \`polygon\`, \`smooth\`, \`text\`, \`density2d\`, \`rug\`
:::

```{r}
ggtern(data = agpop_mutated,
       aes(x = YOUNG,
           y = ACTIVE, 
           z = OLD)) +
  geom_point()
```

### 4.1.1 Additional elements

```{r}
#| code-fold: false
#| fig-height: 8
#| fig-width: 8
ggtern(data = agpop_mutated, 
       aes(x = YOUNG,
           y = ACTIVE,
           z = OLD)) +
  geom_point() +
  labs(title = "Population structure, 2015") +
  theme_rgbw()
```

Remarks :

plot_ly( ) function is not able to port ggtern chart into ggplot2. A native function will be required to do so.

## **4.2 Create interactive ternary diagram**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***plot_ly( )*** - plotly -]{style="color:#d46e15"} to create interactive ternary diagram.

[***layout( )*** - plotly -]{style="font-size: 11pt; color: rgb(212, 110, 21);"} to create interactive ternary diagram.

Arguments :

-   annotations to show tooltip
:::

```{r}
#| code-fold: false
#| fig-height: 8
#| fig-width: 8
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, ax = 0,
    y = 1, ay = 0,
    xref = "paper", 
    yref = "paper", 
    align = "center",
    font = list
    (family = "serif", 
      size = 15, 
      color = "white"),
    bgcolor = "#b3b3b3",
    bordercolor = "black",
    borderwidth = 2)
  }

axis <- function(txt) {
  list(
    title = txt, 
    tickformat = ".0%", 
    tickfont = list(size = 10)
  )
  }

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
  )

plot_ly(agpop_mutated,
        a = ~YOUNG, 
        b = ~ACTIVE, 
        c = ~OLD, 
        color = I("black"), 
        type = "scatterternary") %>%
  layout(annotations = label
         ("Ternary Markers"),
         ternary = ternaryAxes)
```
