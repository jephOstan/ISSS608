---
title: "Hands-on 1 - DataVis with ggplot2"
editor: visual
date:  13 Jan 2023
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores data visualisation using [***Tidyverse***](https://www.tidyverse.org/) package.

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.
:::

```{r}
#| code-fold: false
pacman::p_load(tidyverse)
```
:::

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on fictitious data set provided with this lesson.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Highlights of the data set**]{style="color:#3a9c88"}

1.  Year end examination grades of a cohort of primary 3 students from a local school.

2.  There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.
:::

## **3.2 Import Data**

### **3.2.1 Import Data**

::: {.callout-warning appearance="simple" icon="false"}
Involved two (2) steps : import and inspect imported data set.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
exam_data <- read_csv("data/Exam_data.csv")

problems(exam_data)
```
:::

### **3.2.2 Inspect Missing Value**

::: {.callout-warning appearance="simple" icon="false"}
```{r}
skimr::skim(exam_data)
```

[Remarks :]{style="color:#d69c3c"}

[No missing data.]{style="color:#d69c3c"}
:::

# **4. DATA VISUALISATION**

## **4.1 Compare Charts between R Graphics and ggplot2**

::: {.callout-warning appearance="simple" icon="false"}
Compare histogram by R Graphics and ggplot2 -

### **4.1.1 Plot with R Graphics**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***hist( )*** - graphics -]{style="color:#d46e15"} to compute a histogram.
:::

```{r}
hist(exam_data$MATHS)
```

### **4.1.2 Plot with ggplot2**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***ggplot( )*** - ggplot2 -]{style="color:#d46e15"} to initialise a ggplot object.

-   geom_histogram( )

-   ggtitle( )
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 10, 
                 boundary = 100,
                 color = "black", 
                 fill = "grey") +
  ggtitle("Distribution of Maths scores")
```

[Remarks :]{style="color:#d69c3c"}

[ggplot2 allows to customise axis labels, title, grid lines.]{style="color:#d69c3c"}
:::

## **4.2 Explore Functions in ggplot2**

### **4.2.1 Create Base for a ggplot Object**

::: {.callout-warning appearance="simple" icon="false"}
text

#### **\-- initialise a ggplot Object**

```{r}
#| code-fold: false
ggplot(data = exam_data)
```

#### **\-- introduce aesthetic mappings**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***aes( )*** - ggplot2 -]{style="color:#d46e15"} to visualise the attributes of the data.
:::

```{r}
#| code-fold: false
ggplot(data = exam_data,
       aes(x = MATHS))
```
:::

### **4.2.2 Add Geometric Objects**

::: {.callout-warning appearance="simple" icon="false"}
text

#### **4.2.2.1 plot bar chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_bar( )*** - ggplot2 -]{style="color:#d46e15"} to makes the height of the bar proportional to the number of "MaTHS".

::: callout-note
## [**use geom_col( ) if the bars need to represent values in the data.**]{style="color:#3a9c88"}
:::
:::

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

#### **4.2.2.2 plot dot chart**

The width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm).

-   dots are stacked.

-   each dot representing one observation.

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

[Remarks :]{style="color:#d69c3c"}

[The y-scale can be misleading. Hence, below dot chart, the y-axis will be turned off with scale-y-continuous( ) function.]{style="color:#d69c3c"}

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***bindwidth( )*** - ggplot2 -]{style="color:#d46e15"} to change the bin width to 2.5.

[***scale_y\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to turn off the y-axis.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

#### **4.2.2.3 plot histogram**

Note that the default bin is 30.

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

#### **\-- modify colour and bin**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color = "black",      
                 fill = "light blue")  
```

#### **\-- add subgroup to each bar**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***fill( )*** - ggplot2 -]{style="color:#d46e15"} to change colour to reflect the sub-group.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_histogram(bins = 20, 
                 color = "grey30")
```

#### **4.2.2.4 plot density chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_density( )*** - ggplot2 -]{style="color:#d46e15"} to computes and plots kernel density estimate, which is a smoothed version of the histogram.

-   It is useful for continuous data that comes from an underlying smooth distribution.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

#### **\-- plot two (2) kernel density lines with colour arguments under aes( )**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

#### **\-- plot two (2) kernel density with fill arguments under aes( )**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_density()
```

#### **4.2.2.5 plot box plot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_boxplot( )*** - ggplot2 -]{style="color:#d46e15"} to display summary statistics (median, two hinges and two whiskers) and outliers.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = GENDER)) +    
  geom_boxplot()            
```

#### **\-- add notches to box plot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***notch( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to visually notice the distribution of median.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot(notch = TRUE)
```

#### **4.2.2.6 mix plot**

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  geom_point(position = "jitter",
             size = 0.5)
```

#### **4.2.2.7 plot violin chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_violin( )*** - ggplot2 -]{style="color:#d46e15"} to plot violins that allow to compare multiple data distributions.

-   With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other.

-   With a violin plot, it's easier to compare several distributions since they're placed side by side.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin()
```

#### **-**- combine violin chart with box plot

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin(fill = "light blue") +
  geom_boxplot(alpha = 0.5)           
```

#### **4.2.2.8 plot point / scatterplot chart**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point()            
```
:::

### **4.2.3 Add Statistical Functions**

::: {.callout-warning appearance="simple" icon="false"}
There are two ways to use these functions :

1.  add a stat\_() function and override the default geom
2.  add a geom\_() function and override the default stat.

#### **4.2.3.1 add mean values on the boxplot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***stat_summary( )*** - ? -]{style="color:#d46e15"} to override the default geom.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y = "mean",         
               colour = "red",        
               size = 4)  
```

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***stat( )*** - ? -]{style="color:#d46e15"} to override the default stat.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, x = GENDER)) +
  geom_boxplot() +
  geom_point(stat = "summary",        
             fun.y = "mean",           
             colour = "red",          
             size = 4)          
```
:::

### **4.2.4 Add Best Fit Curve on Scatterplot**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_smooth( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to interpret the scatterplot by adding fit curve.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(size = 0.5)
```

#### **\-- override default smoothing method**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5)
```
:::

### **4.2.5 Plot Trellis Plot**

::: {.callout-warning appearance="simple" icon="false"}
Facets Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.

Facets are an alternative to aesthetics for displaying additional discrete variables.

ggplot2 supports two (2) types of factes : facet_wrap( ) facet_grid( )

#### **4.2.5.1 plot with face_wrap( ) function**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to wraps a 1d sequence of panels into 2d.

This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_wrap(~ CLASS)
```

#### 4.2.5.2 plot with face_grid( ) function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to forms a matrix of panels defined by row and column faceting variables.

It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_grid(~ CLASS)
```
:::

## **4.3 Coordinates**

-   The *Coordinates* functions map the position of objects onto the plane of the plot.

<!-- -->

-   There are a number of different possible coordinate systems to use, they are:

    -   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).

    -   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.

    -   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).

    -   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

### **4.3.1. Working with Coordinate**

::: {.callout-warning appearance="simple" icon="false"}
By the default, the bar chart of ggplot2 is in vertical form.

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip()
```
:::

### **4.3.2 Change range for y- and x-axis**

::: {.callout-warning appearance="simple" icon="false"}
The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5) +  
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
```
:::

# **5. NON-DATA CONTROL ELEMENT**

-   background colour

-   size of fonts

-   grid lines

-   colour of labels

-   Built-in themes include :

    -   `theme_gray()` (default)

    -   `theme_bw()`

    -   `theme_classic()`

-   [Other themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

## **5.1 Set Theme**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to forms a matrix of panels defined by row and column faceting variables.

It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.
:::

### **5.1.1 Plot Horizontal Bar Chart with `theme_gray( )`**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

### **5.1.2 Plot Horizontal Bar Chart with `theme_classic( )`**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

### **5.1.3 Plot Horizontal Bar Chart with `theme_minimal( )`**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
:::

# **6. DATAVIZ ENHANCEMENT**

## **6.1 Chart for Frequency Analysis**

::: {.callout-warning appearance="simple" icon="false"}
A simple vertical bar chart for frequency analysis.

### **6.1.1 Evaluate Original Bar Chart**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

[Lecturer's input :]{style="color:#d69c3c"}

-   [Y-axis label is not clear (i.e. count).]{style="color:#d69c3c"}

-   [To support effective comparison, the bars should be sorted by their respective frequencies.]{style="color:#d69c3c"}

-   [This is a static graph. So, the frequency value is needed to provide more context.]{style="color:#d69c3c"}

<br>

### **6.1.2 Enhance Bar Chart**

#### **6.1.2.1 derive descriptive statistic**

First understand the variable.

```{r}
questionr::freq(exam_data$RACE)
```

#### **6.1.2.2 plot bar chart**

#### **\-- attempt 1**

```{r}
#| code-fold: false
exam_data %>%
  group_by(RACE) %>%
  summarise(count = n()) %>%
  rename(race = RACE) %>%
  mutate(pct = scales::percent(count/sum(count)),
         res = str_c(count, ", ", pct)) %>%
  ggplot(aes(x = reorder(race, -count),
             y = count)) +
  geom_bar(stat = "identity") +
  labs(x = "Race",
       y = "No. of\nPupils",
       title = "Primary 3 Students By Race",
       subtitle = "Students from a local school") +
  theme(axis.title.y = element_text(angle = 0, 
                                    size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) +
  geom_text(aes(label = res),
            vjust = -0.9) + 
  scale_y_continuous(limits = c(0,210))
```

#### **\-- attempt 2 with recommended function - fct_infreq( )**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***fct_infreq( )*** - forcats -]{style="color:#d46e15"} to arrange factors according to count data.
:::

```{r}
#| code-fold: false
exam_data %>%
  group_by(RACE) %>%
  summarise(count = n()) %>%
  rename(race = RACE) %>%
  mutate(pct = scales::percent(count/sum(count)),
         res = str_c(count, ", ", pct)) %>%
  ggplot(aes(fct_infreq(race),
             y = count)) +
  geom_bar(stat = "identity") +
  labs(x = "Race",
       y = "No. of\nPupils",
       title = "Primary 3 Students By Race",
       subtitle = "Students from a local school") +
  theme(axis.title.y = element_text(angle = 0, 
                                    size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) +
  geom_text(aes(label = res),
            vjust = -0.9) + 
  scale_y_continuous(limits = c(0,210))
```

Credit: Iearned this lesson which sourced from [*Getting things into the right order*](https://wilkelab.org/SDS375/slides/getting-things-in-order.html#1) of Prof. Claus O. Wilke, the author of [**Fundamentals of Data Visualization**](https://clauswilke.com/dataviz/)

#### **\-- attempt 3 with fct_reorder( )**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***fct_reorder( )*** - forcats -]{style="color:#d46e15"} to reorder data.
:::

```{r}
#| code-fold: false
exam_data %>%
  group_by(RACE) %>%
  summarise(count = n()) %>%
  rename(race = RACE) %>%
  mutate(pct = scales::percent(count/sum(count)),
         res = str_c(count, ", ", pct)) %>%
  ggplot(aes(fct_reorder(race, -count),
             y = count)) +
  geom_bar(stat = "identity") +
  labs(x = "Race",
       y = "No. of\nPupils",
       title = "Primary 3 Students By Race",
       subtitle = "Students from a local school") +
  theme(axis.title.y = element_text(angle = 0, 
                                    size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) +
  geom_text(aes(label = res),
            vjust = -0.9) + 
  scale_y_continuous(limits = c(0,210))
```

[Remarks :]{style="color:#d69c3c"}

-   [Below is the sample answer provided for this lesson]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

-   [Plot above added title and subtitle to set the main context for this plot]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

![](images/image-1254806109.png)

Below are two (2) code chunk with different approach provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data,
       aes(x=reorder(RACE,RACE,
                function(x)-length(x))))+
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

```{r}
#| code-fold: false
#| eval: false
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```
:::

## **6.2 Histogram**

::: {.callout-warning appearance="simple" icon="false"}
text

### **6.2.1 Evaluate Original Histogram**

![](images/image-1349634026.png)

Lecturer's input :

-   Adding mean and median lines on the histogram plot.

-   Change fill color and line color

<br>

### **6.2.2 Enhance Histogram**

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color = "black",      
                 fill = "light blue") +
  geom_vline(xintercept = mean(exam_data$MATHS),
             col = "red",
             lwd = 1,
             linetype = "dashed") +
  geom_vline(xintercept = median(exam_data$MATHS),
             col = "black",
             lwd = 1,
             linetype = "dashed") +  
  annotate("text",
           x = mean(exam_data$MATHS)*0.84,
           y = mean(exam_data$MATHS)*0.78,
           label = paste("Mean =", round(mean(exam_data$MATHS),2)),
           col = "red",
           size = 5) +
  annotate("text",
           x = median(exam_data$MATHS)*0.8,
           y = median(exam_data$MATHS)*0.8,
           label = paste("Median =", round(median(exam_data$MATHS),2)),
           col = "black",
           size = 5)
```

[Remarks :]{style="color:#d69c3c"}

[Below is the sample answer provided for this lesson]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

[![](images/image-92343967.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/designing-data-drive-graphics-for-analysis-ii-1)

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(MATHS,
                                 na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=1) +
  geom_vline(aes(xintercept=median(MATHS,
                                  na.rm=T)),
             color="grey30",
             linetype="dashed", 
             size=1)
```
:::

## **6.3 Trellis Plot for Histogram**

::: {.callout-warning appearance="simple" icon="false"}
text

### **6.3.1 Evaluate Original Trellis Plot for Histogram**

![](images/image-347055578.png)

Lecturer's input :

The histograms above are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.

Create a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.

### **6.3.2 Enhance Trellis Plot for Histogram**

```{r}
#| code-fold: false
gendEngl <- exam_data[,-3]

ggplot(exam_data,
       aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = gendEngl, fill = "grey", alpha = .5) +
  geom_histogram(color = "black") +
  facet_wrap(~ GENDER) +
  theme(axis.title.y = element_text(size = 5),
        axis.title.x = element_text(size = 5),
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        panel.grid.major = element_line(colour = "steelblue", 
                                        size = rel(0.5)),
        panel.grid.minor = element_blank()) +
  scale_y_continuous(limits = c(0,30)) +
  guides(fill = FALSE) +
  theme_bw()
```

[Remarks :]{style="color:#d69c3c"}

-   [Below is the sample answer provided for this lesson]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

[![](images/image-468107029.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/designing-data-drive-graphics-for-analysis-iii)

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()
```
:::

## **6.4 Scatterplot**

::: {.callout-warning appearance="simple" icon="false"}
text

### **6.4.1 Evaluate Original Scatterplot**

![](images/image-1638389725.png)

A within group scatterplot with reference lines.

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  theme(axis.title.y = element_text(size = 8),
        axis.title.x = element_text(size = 8),
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6)) +
  geom_hline(yintercept = 50,
             linetype = "dashed",
             colour = "grey60",
             size = 1) + 
  geom_vline(xintercept = 50, 
             linetype = "dashed",
             colour = "grey60",
             size = 1)
```

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```
:::

## **6.5 Trellis Boxplot**

::: {.callout-warning appearance="simple" icon="false"}
This section consits of three different trellis plots. \### 6.5.1 Plot 2 Columns - 2 Characters and 1 Continuous Variable

[![](images/image-339727884.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/42)

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = CLASS)) +    
  geom_boxplot() +
  facet_grid(~ GENDER) +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7))
```

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= CLASS)) +
  geom_boxplot() +
  facet_grid(~ GENDER)
```

### **6.5.2 Plot 1 Column, 2 Rows - 2 Characters and 1 Continuous Variables**

[![](images/image-811211769.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/43)

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = CLASS)) +    
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS, scales = "free") +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        strip.text.x = element_blank(),
        strip.text.y = element_text(size = 7),
        panel.spacing.y = unit(1, "mm"),
        panel.spacing.x = unit(0, "mm")
        )
```

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= CLASS)) +
  geom_boxplot() +
  facet_grid(GENDER ~.)
```

### **6.5.3 Plot 1 Column, 2 Rows - 2 Characters and 1 Continuous Variables**

[![](images/image-468521342.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/44)

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = GENDER)) +    
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS, scales = "free") +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 6.5),
        axis.text.y = element_text(size = 6.5),
        strip.text.y = element_text(size = 7),
        strip.text.x = element_text(size = 7),
        panel.spacing.y = unit(1, "mm"),
        panel.spacing.x = unit(1, "mm")
        )
```

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
    facet_grid(GENDER ~ CLASS)
```
:::

## **6.6 Change Theme**

::: {.callout-warning appearance="simple" icon="false"}
[![](images/image-78293342.png)](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/52)

Instruction :

Change the colour of plot panel background of `theme_minimal()` to light blue and the colour of grid lines to white.

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "lightblue",
                                    colour = "lightblue"),
    panel.grid.major = element_line(size = 0.5,
                                    linetype = "solid",
                                    colour = "white"),
    axis.title.y = element_text(size = 7.5),
    axis.title.x = element_text(size = 7.5),
    axis.text.x = element_text(size = 6.5),
    axis.text.y = element_text(size = 6.5)
    )
```

Below is the code chunk provided by the lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(
    fill = "lightblue",
    colour = "lightblue",
    size = 0.5,
    linetype = "solid"),
    panel.grid.major = element_line(
      size = 0.5,
      linetype = 'solid',
      colour = "white"), 
    panel.grid.minor = element_line(
      size = 0.25,
      linetype = 'solid',
      colour = "white"))
```
:::

<br>

# **7. REFERENCES**

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version

-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
