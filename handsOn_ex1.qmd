---
title: "Data Visualisation with ggplot2"
subtitle: "Lesson 1 - Introduction to Visual Analytics"
editor: visual
date: 13 Jan 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores approaches for data visualisation with [tidyverse](https://www.tidyverse.org/) package functions.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**CREDIT**]{style="color:#3a9c88"}

Most content and code chunks within this post are referred from Visual Analytics & Applications lecture notes by Dr Kam Tin Seong, a lecturer who has helped me build confidence in using R / Posit for visual analytics and various applications.
:::

<br>

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.
:::

```{r}
#| code-fold: false
pacman::p_load(tidyverse)
```

<br>

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on fictitious data set provided with this lesson.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Highlights of the data set**]{style="color:#3a9c88"}

1.  Year end examination grades of a cohort of primary 3 students from a local school.

2.  There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.
:::

## **3.2 Import Data**

### **3.2.1 Import Data**

Involved two (2) steps : import & inspect imported data set.

The import step also includes the problems( ) function to flag any parsing error.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
exam_data <- read_csv("data/Exam_data.csv")

problems(exam_data)
```

### **3.2.2 Inspect Missing Value**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***skim( )*** - skimr -]{style="color:#d46e15"} to get an overview of a data frame with summarised statistics. For this usage, this function is used to identify missing values.
:::

```{r}
skimr::skim(exam_data)
```

<br>

# **4. DATA VISUALISATION**

## **4.1 Compare Charts by Different R Packages**

Below sections compare histogram plot with R ***graphics*** and ***ggplot2*** packages.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***hist( )*** - graphics -]{style="color:#d46e15"} to create a histogram.

[***ggplot( )*** - ggplot2 -]{style="color:#d46e15"} to initialise a ggplot object.

-   geom_histogram( )

-   ggtitle( )
:::

::: panel-tabset
## **with *graphics* function**

```{r}
#| code-fold: false
#| fig-height: 4
#| fig-width: 14
hist(exam_data$MATHS)
```

## **with *ggplot2* function**

```{r}
#| code-fold: false
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 10, 
                 boundary = 100,
                 color = "black", 
                 fill = "grey") +
  ggtitle("Distribution of Maths scores")
```
:::

<br>

## **4.2 Explore *ggplot2* Code Structures**

Below are the 3 steps to plot with ggplot2 functions :

-   Step 1 to create a base for ggplot Object initialisation.

-   Step 2 to introduce aesthetic mappings.

-   Step 3 to add geometric objects.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***aes( )*** - ggplot2 -]{style="color:#d46e15"} to visualise the attributes of the data.

[***geom_bar( )*** - ggplot2 -]{style="color:#d46e15"} to makes the height of the bar proportional to the number of "MATHS".

note : use **geom_col( )** if the bars needs to represent values in the data.
:::

::: panel-tabset
## **Add geometric object**

```{r}
#| code-fold: false
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

## **Introduce aesthetic mappings**

```{r}
#| code-fold: false
#| #| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data,
       aes(x = RACE))
```

## **Create base**

```{r}
#| code-fold: false
#| #| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data)
```
:::

## **4.3 Explore Other Chart Types**

### **4.3.1 Dot Chart**

The width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm).

-   dots are stacked.

-   each dot representing one observation.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***bindwidth( )*** - ggplot2 -]{style="color:#d46e15"} to change the bin width to 3, meaning each dot represents 3 units of data.

[***scale_y\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to turn off the y-axis.
:::

::: panel-tabset
## **with R *graphics* function**

```{r}
#| code-fold: false
#| #| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 1,
               dotsize = 0.5)
```

Remarks :

The scale for y-axis is misleading.

## **Adjust bin width**

Y-axis is hidden by setting it to "NULL".

```{r}
#| code-fold: false
#| #| fig-height: 8
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 3,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```
:::

### **4.3.2 Histogram**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***fill( )*** - ggplot2 -]{style="color:#d46e15"} to change colour to reflect the sub-group.
:::

::: panel-tabset
## **Basic**

Note that the default bin is 30.

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

## **Modify colour & bin**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color = "black",      
                 fill = "light blue")  
```

## **Add subgroup**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_histogram(bins = 20, 
                 color = "grey30")
```
:::

### **4.3.3 Density Chart**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_density( )*** - ggplot2 -]{style="color:#d46e15"} to computes and plots kernel density estimate, which is a smoothed version of the histogram.

-   It is useful for continuous data that comes from an underlying smooth distribution.
:::

::: panel-tabset
## **Basic**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

## **2 kernel density lines**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

## **with fill arguments**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_density()
```
:::

### **4.3.4 Box Plot**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_boxplot( )*** - ggplot2 -]{style="color:#d46e15"} to display summary statistics (median, two hinges and two whiskers) and outliers.

[***notch( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to visually notice the distribution of median.
:::

::: panel-tabset
## **Basic**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = GENDER)) +    
  geom_boxplot()            
```

## **Add notches**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot(notch = TRUE)
```

## **Mix plot**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  geom_point(position = "jitter",
             size = 0.5)
```
:::

### **4.3.5 Violin Chart**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_violin( )*** - ggplot2 -]{style="color:#d46e15"} to plot violins that allow to compare multiple data distributions.

-   With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other.

-   With a violin plot, it's easier to compare several distributions since they're placed side by side.
:::

::: panel-tabset
## **Basic**

```{r}
#| fig-height: 8
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin()
```

## **Combine violin chart with box plot**

```{r}
#| fig-height: 8
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin(fill = "light blue") +
  geom_boxplot(alpha = 0.5)           
```
:::

### **4.3.6 Point / Scatterplot Chart**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point()            
```

## **4.4 Add Statistical Functions**

There are two ways to use these functions :

1.  add a stat\_() function and override the default geom
2.  add a geom\_() function and override the default stat.

#### **4.4.1 Add mean values on the Boxplot**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***stat_summary( )*** - ggplot2 -]{style="color:#d46e15"} to override the default geom.

[***stat( )*** - stats -]{style="color:#d46e15"} to override the default stat.
:::

::: panel-tabset
## **stat_summary**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y = "mean",         
               colour = "red",        
               size = 4)  
```

## **geom_point**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  geom_point(stat = "summary",        
             fun.y = "mean",           
             colour = "red",          
             size = 4)          
```
:::

### **4.4.2 Add best fit curve on Scatterplot**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_smooth( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to interpret the scatterplot by adding fit curve.
:::

::: panel-tabset
## **Basic**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(size = 0.5)
```

## **Override default smoothing method**

```{r}
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5)
```
:::

## **4.5 Trellis Plot**

A facets plot, also known as a trellis plot, displays a different subset of the data. There are 2 types of facets, namely facet wrap and facet grid.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to plot all classes separately in

-   Use facet wrap if the range of y-axis values is not huge for space efficiency.

[***facet_grid( )*** - ggplot2 -]{style="color:#d46e15"} to plot all 9 classes separately in 1 row.
:::

::: panel-tabset
## **Facet Wrap**

```{r}
#| fig-height: 8
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_wrap(~ CLASS)
```

## **Facet Grid**

```{r}
#| fig-height: 8
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_grid(~ CLASS)
```
:::

## **4.6 Coordinates**

The coordinates functions map the objects' position onto the plot's plane. Below are some common coordinate systems :

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default Cartesian coordinate systems. Setting limits thereof will zoom the plot but will not change the underlying data.

-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a Cartesian system with the x and y flipped.

-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a Cartesian system with a "fixed" aspect ratio expressed as y / x (e.g. 1.78 for a "widescreen" plot).

-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

    -   note : this is suitable when the plot involve smaller areas closer to the equator.

### **4.6.1. Flip the Chart**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***coord_flip( )*** - ggplot2 -]{style="color:#d46e15"} to flip the Cartesian coordinates for x & y. In this example, flip it so that horizontal bar chart is better visualised when the x-axis is conditional on the y-axis.

note : By default, a *ggplot2* bar chart is plot vertically.
:::

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip()
```

### **4.6.2 Change range for y- & x-axis**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***coord_cartesian( )*** - ggplot2 -]{style="color:#d46e15"} to set limits for the scatterplot from 0 to 100 so that both x-axis and y-axis are scaled at the same set of limits.
:::

```{r}
#| fig-height: 8
#| fig-width: 8
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5) +  
  coord_cartesian(xlim = c(0, 100),
                  ylim = c(0, 100))
```

<br>

# **5. CONTROLS OF NON-DATA PLOT ELEMENTS**

Following are some of the elements :

-   Background colour, size of fonts, grid lines, colour of labels

-   Built-in themes include :

    -   `theme_gray()` (default)

    -   [Other themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

## **5.1 Explore Themes**

::: panel-tabset
## **default theme**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

## **theme_dark( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_dark()
```

## **theme_light( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_light()
```

## **theme_classic( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

## **theme_minimal( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

## **theme_bw( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_bw()
```

## **theme_void( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_void()
```

## **theme_test( )**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_test()
```
:::

<br>

# **6. DATAVIZ ENHANCEMENT**

This section explores various enhancements to communicate data visually effectively.

## **6.1 Bar Chart**

A simple vertical bar chart for frequency analysis.

### **6.1.1 Evaluate original bar chart**

```{r}
#| fig-height: 4
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

[Lecturer's input :]{style="color:#d69c3c"}

-   [Y-axis label is not clear (i.e. count).]{style="color:#d69c3c"}

-   [To support effective comparison, the bars should be sorted by their respective frequencies.]{style="color:#d69c3c"}

-   [This is a static graph. So, the frequency value is needed to provide more context.]{style="color:#d69c3c"}

### **6.1.2 Enhance bar chart**

#### **6.1.2.1 Derive descriptive statistic**

First understand the variable.

```{r}
questionr::freq(exam_data$RACE)
```

#### **6.1.2.2 Revise bar chart**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***fct_infreq( )*** - forcats -]{style="color:#d46e15"} to arrange factors according to count data.

[***fct_reorder( )*** - forcats -]{style="color:#d46e15"} to reorder data.
:::

::: panel-tabset
## **Attempt 2**

Revised with *fct_reorder( )* function.

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
exam_data %>%
  group_by(RACE) %>%
  summarise(count = n()) %>%
  rename(race = RACE) %>%
  mutate(pct = scales::percent(count/sum(count)),
         res = str_c(count, 
                     ", ", 
                     pct)) %>%
  ggplot(aes(fct_reorder(race, 
                         -count),
             y = count)) +
  geom_bar(stat = "identity") +
  labs(x = "Race",
       y = "No. of\nPupils",
       title = "Primary 3 Students By Race",
       subtitle = "Students from a local school") +
  theme(axis.title.y = element_text(angle = 0, 
                                    size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) +
  geom_text(aes(label = res),
            vjust = -0.9) + 
  scale_y_continuous(limits = c(0,210))
```

## **Attempt 1**

Revise with recommended function : *fct_infreq( )* function.

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
exam_data %>%
  group_by(RACE) %>%
  summarise(count = n()) %>%
  rename(race = RACE) %>%
  mutate(pct = scales::percent(count/sum(count)),
         res = str_c(count, 
                     ", ", 
                     pct)) %>%
  ggplot(aes(fct_infreq(race),
             y = count)) +
  geom_bar(stat = "identity") +
  labs(x = "Race",
       y = "No. of\nPupils",
       title = "Primary 3 Students By Race",
       subtitle = "Students from a local school") +
  theme(axis.title.y = element_text(angle = 0, 
                                    size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) +
  geom_text(aes(label = res),
            vjust = -0.9) + 
  scale_y_continuous(limits = c(0,210))
```

Credit : Learned from [*Getting things into the right order*](https://wilkelab.org/SDS375/slides/getting-things-in-order.html#1) of Prof. Claus O. Wilke, the author of [**Fundamentals of Data Visualization**](https://clauswilke.com/dataviz/)

## **attempt 1**
:::

[Remarks :]{style="color:#d69c3c"}

-   [Below is the sample answer provided for this lesson]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

-   [Plot above added title and subtitle to set the main context for this plot]{style="font-size: 11pt; color: rgb(214, 156, 60);"}.

![](images/image-1254806109.png){fig-alt="This image illustrates a basic bar chart labelled with percentage and count values." fig-align="left" width="400"}

Below are two (2) different sample code chunks provided by this lesson :

```{r}
#| code-fold: false
#| eval: false
ggplot(data = exam_data,
       aes(x = reorder(RACE, RACE,
                       function(x) - length(x)))) +
  geom_bar() +
  ylim(0, 220) +
  geom_text(stat = "count", 
      aes(label = paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust = -1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y = element_text(angle = 0))
```

```{r}
#| code-fold: false
#| eval: false
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust = -1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y = element_text(angle = 0))
```

## **6.2 Histogram**

### **6.2.1 Evaluate original histogram**

![](images/image-1349634026.png){fig-alt="This image illustrates a histogram." fig-align="left" width="400"}

Lecturer's input :

-   Adding mean and median lines on the histogram plot.

-   Change fill color and line color

::: panel-tabset
## **Revise Histogram**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color = "black",      
                 fill = "light blue") +
  geom_vline(xintercept = mean(exam_data$MATHS),
             col = "red",
             lwd = 1,
             linetype = "dashed") +
  geom_vline(xintercept = median(exam_data$MATHS),
             col = "black",
             lwd = 1,
             linetype = "dashed") +  
  annotate("text",
           x = mean(exam_data$MATHS)*0.84,
           y = mean(exam_data$MATHS)*0.78,
           label = paste("Mean =", 
                         round(mean(exam_data$MATHS),2)),
           col = "red",
           size = 5) +
  annotate("text",
           x = median(exam_data$MATHS)*0.8,
           y = median(exam_data$MATHS)*0.8,
           label = paste("Median =", 
                         round(median(exam_data$MATHS),2)),
           col = "black",
           size = 5)
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue") +
  geom_vline(aes
             (xintercept = mean(MATHS,
                                na.rm = T)),
             color = "red", 
             linetype = "dashed", 
             size = 1) +
  geom_vline(aes
             (xintercept = median(MATHS,
                                  na.rm = T)),
             color = "grey30",
             linetype = "dashed", 
             size = 1)
```
:::

## **6.3 Trellis Plot for Histogram**

### **6.3.1 Evaluate original trellis plot for histogram**

![](images/image-347055578.png){fig-alt="This image shows a basic trellis plot for histogram." fig-align="left" width="400"}

Lecturer's input :

The histograms above are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.

Create a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.

::: panel-tabset
## **Revise trellis plot for histogram**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
gendEngl <- exam_data[,-3]

ggplot(exam_data,
       aes(x = ENGLISH,
           fill = GENDER)) +
  geom_histogram(data = gendEngl, 
                 fill = "grey", 
                 alpha = .5) +
  geom_histogram(color = "black") +
  facet_wrap(~ GENDER) +
  theme(axis.title.y = element_text(size = 5),
        axis.title.x = element_text(size = 5),
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        panel.grid.major = element_line(colour = "steelblue", 
                                        size = rel(0.5)),
        panel.grid.minor = element_blank()) +
  scale_y_continuous(limits = c(0,30)) +
  guides(fill = FALSE) +
  theme_bw()
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()
```
:::

## **6.4 Scatterplot**

### **6.4.1 Evaluate original scatterplot**

![](images/image-1638389725.png){fig-alt="The image illustrates the scatterplot for English and Maths." fig-align="left" width="400"}

Challenge requirement : Add reference lines to make this scatterplot meaningful.

::: panel-tabset
## **Revise scatterplot**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  theme(axis.title.y = element_text(size = 8),
        axis.title.x = element_text(size = 8),
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6)) +
  geom_hline(yintercept = 50,
             linetype = "dashed",
             colour = "grey60",
             size = 1) + 
  geom_vline(xintercept = 50, 
             linetype = "dashed",
             colour = "grey60",
             size = 1)
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  geom_hline(yintercept = 50,
             linetype = "dashed",
             color = "grey60",
             size = 1) + 
  geom_vline(xintercept = 50, 
             linetype = "dashed",
             color = "grey60",
             size = 1)
```
:::

## **6.5 Trellis Boxplot**

This section consists of three different trellis plots.

### **6.5.1 Facet with 1 row & 2 columns**

[![](images/image-339727884.png){fig-alt="This image shows a trellis plot of boxplots for each classes' students' Maths performances by gender." fig-align="left" width="400"}](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/42)

Challenge requirement : Reproduce similar trellis plot.

::: panel-tabset
## **Attempt**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = CLASS)) +    
  geom_boxplot() +
  facet_grid(~ GENDER) +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7))
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(~ GENDER)
```
:::

### **6.5.2 Facet with 2 rows & 1 column**

[![](images/image-811211769.png){fig-alt="This image shows a trellis plot of boxplots for each classes' students' Maths performances by gender." fig-align="left" width="400"}](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/43)

Challenge requirement : Reproduce similar trellis plot.

::: panel-tabset
## **Attempt**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = CLASS)) +    
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS, 
             scales = "free") +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        strip.text.x = element_blank(),
        strip.text.y = element_text(size = 7),
        panel.spacing.y = unit(1, "mm"),
        panel.spacing.x = unit(0, "mm"))
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(GENDER ~.)
```
:::

### **6.5.3 Facet with 2 rows & 1 column with different X-axis**

[![](images/image-468521342.png){fig-alt="This is a trellis plot of boxplots for each classes' students' Maths performances by gender." fig-align="left" width="400"}](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/44)

Challenge requirement : Reproduce similar trellis plot.

::: panel-tabset
## **Attempt**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = GENDER)) +    
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS, scales = "free") +
  theme(axis.title.y = element_text(size = 7.5),
        axis.title.x = element_text(size = 7.5),
        axis.text.x = element_text(size = 6.5),
        axis.text.y = element_text(size = 6.5),
        strip.text.y = element_text(size = 7),
        strip.text.x = element_text(size = 7),
        panel.spacing.y = unit(1, "mm"),
        panel.spacing.x = unit(1, "mm")
        )
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(y = MATHS, x = GENDER)) +
  geom_boxplot() +
    facet_grid(GENDER ~ CLASS)
```
:::

## **6.6 Change Theme**

[![](images/image-78293342.png){fig-alt="This image illustrate a bar chart plotted with blue background." fig-align="left" width="400"}](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/52)

Instruction :

Change the colour of plot panel background of `theme_minimal()` to light blue and the colour of grid lines to white.

::: panel-tabset
## **Attempt**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "lightblue",
                                    colour = "lightblue"),
    panel.grid.major = element_line(size = 0.5,
                                    linetype = "solid",
                                    colour = "white"),
    axis.title.y = element_text(size = 7.5),
    axis.title.x = element_text(size = 7.5),
    axis.text.x = element_text(size = 6.5),
    axis.text.y = element_text(size = 6.5))
```

## **Sample code chunk provided by this lesson**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "lightblue",
                                    colour = "lightblue",
                                    size = 0.5,
                                    linetype = "solid"),
    panel.grid.major = element_line(size = 0.5,
                                    linetype = 'solid',
                                    colour = "white"), 
    panel.grid.minor = element_line(size = 0.25,
                                    linetype = 'solid',
                                    colour = "white"))
```
:::

<br>

# **7. REFERENCES**

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version

-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
