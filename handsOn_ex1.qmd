---
title: "Hands-on 1 - DataVis with ggplot2"
editor: visual
date:  13 Jan 2023
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores data visualisation using [***Tidyverse***](https://www.tidyverse.org/) package.

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.
:::

```{r}
#| code-fold: false
pacman::p_load(tidyverse)
```
:::

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on fictitious data set provided with this lesson.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Highlights of the data set**]{style="color:#3a9c88"}

1.  Year end examination grades of a cohort of primary 3 students from a local school.

2.  There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.
:::

## **3.2 Import Data**

### **3.2.1 Import Data**

::: {.callout-warning appearance="simple" icon="false"}
Involved two (2) steps : import and inspect imported data set.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
exam_data <- read_csv("data/Exam_data.csv")

problems(exam_data)
```
:::

### **3.2.2 Inspect Missing Value**

::: {.callout-warning appearance="simple" icon="false"}
```{r}
skimr::skim(exam_data)
```

[Remarks :]{style="color:#d69c3c"}

[No missing data.]{style="color:#d69c3c"}
:::

## **4. DATA VISUALISATION**

## **4.1 Compare Charts between R Graphics and ggplot2**

::: {.callout-warning appearance="simple" icon="false"}
Compare histogram by R Graphics and ggplot2 -

### **4.1.1 Plot with R Graphics**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***hist( )*** - graphics -]{style="color:#d46e15"} to compute a histogram.
:::

```{r}
hist(exam_data$MATHS)
```

### **4.1.2 Plot with ggplot2**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***ggplot( )*** - ggplot2 -]{style="color:#d46e15"} to initialise a ggplot object.

-   geom_histogram( )

-   ggtitle( )
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 10, 
                 boundary = 100,
                 color = "black", 
                 fill = "grey") +
  ggtitle("Distribution of Maths scores")
```

[Remarks :]{style="color:#d69c3c"}

[ggplot2 allows to customise axis labels, title, grid lines.]{style="color:#d69c3c"}
:::

## **4.2 Explore Functions in ggplot2**

### **4.2.1 Create Base for a ggplot Object**

::: {.callout-warning appearance="simple" icon="false"}
text

#### **\-- initialise a ggplot Object**

```{r}
#| code-fold: false
ggplot(data = exam_data)
```

#### **\-- introduce aesthetic mappings**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***aes( )*** - ggplot2 -]{style="color:#d46e15"} to visualise the attributes of the data.
:::

```{r}
#| code-fold: false
ggplot(data = exam_data,
       aes(x = MATHS))
```
:::

### **4.2.2 Add Geometric Objects**

::: {.callout-warning appearance="simple" icon="false"}
text

#### **4.2.2.1 plot bar chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_bar( )*** - ggplot2 -]{style="color:#d46e15"} to makes the height of the bar proportional to the number of "MaTHS".

::: callout-note
## [**use geom_col( ) if the bars need to represent values in the data.**]{style="color:#3a9c88"}
:::
:::

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

#### **4.2.2.2 plot dot chart**

The width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm).

-   dots are stacked.

-   each dot representing one observation.

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

[Remarks :]{style="color:#d69c3c"}

[The y-scale can be misleading. Hence, below dot chart, the y-axis will be turned off with scale-y-continuous( ) function.]{style="color:#d69c3c"}

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***bindwidth( )*** - ggplot2 -]{style="color:#d46e15"} to change the bin width to 2.5.

[***scale_y\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to turn off the y-axis.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth = 2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

#### **4.2.2.3 plot histogram**

Note that the default bin is 30.

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

#### **\-- modify colour and bin**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color = "black",      
                 fill = "light blue")  
```

#### **\-- add subgroup to each bar**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***fill( )*** - ggplot2 -]{style="color:#d46e15"} to change colour to reflect the sub-group.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_histogram(bins = 20, 
                 color = "grey30")
```

#### **4.2.2.4 plot density chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_density( )*** - ggplot2 -]{style="color:#d46e15"} to computes and plots kernel density estimate, which is a smoothed version of the histogram.

-   It is useful for continuous data that comes from an underlying smooth distribution.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

#### **\-- plot two (2) kernel density lines with colour arguments under aes( )**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

#### **\-- plot two (2) kernel density with fill arguments under aes( )**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           fill = GENDER)) +
  geom_density()
```

#### **4.2.2.5 plot box plot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_boxplot( )*** - ggplot2 -]{style="color:#d46e15"} to display summary statistics (median, two hinges and two whiskers) and outliers.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS,       
           x = GENDER)) +    
  geom_boxplot()            
```

#### **\-- add notches to box plot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***notch( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to visually notice the distribution of median.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot(notch = TRUE)
```

#### **4.2.2.6 mix plot**

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  geom_point(position = "jitter",
             size = 0.5)
```

#### **4.2.2.7 plot violin chart**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_violin( )*** - ggplot2 -]{style="color:#d46e15"} to plot violins that allow to compare multiple data distributions.

-   With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other.

-   With a violin plot, it's easier to compare several distributions since they're placed side by side.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin()
```

#### **-**- combine violin chart with box plot

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_violin(fill = "light blue") +
  geom_boxplot(alpha = 0.5)           
```

#### **4.2.2.8 plot point / scatterplot chart**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point()            
```
:::

### **4.2.3 Add Statistical Functions**

::: {.callout-warning appearance="simple" icon="false"}
There are two ways to use these functions :

1.  add a stat\_() function and override the default geom
2.  add a geom\_() function and override the default stat.

#### **4.2.3.1 add mean values on the boxplot**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***stat_summary( )*** - ? -]{style="color:#d46e15"} to override the default geom.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, 
           x = GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y = "mean",         
               colour = "red",        
               size = 4)  
```

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***stat( )*** - ? -]{style="color:#d46e15"} to override the default stat.
:::

```{r}
ggplot(data = exam_data, 
       aes(y = MATHS, x = GENDER)) +
  geom_boxplot() +
  geom_point(stat = "summary",        
             fun.y = "mean",           
             colour = "red",          
             size = 4)          
```
:::

### **4.2.4 Add Best Fit Curve on Scatterplot**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_smooth( )*** - ggplot2 -]{style="color:#d46e15"} to make it easier to interpret the scatterplot by adding fit curve.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(size = 0.5)
```

#### **\-- override default smoothing method**

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5)
```
:::

### **4.2.5 Plot Trellis Plot**

::: {.callout-warning appearance="simple" icon="false"}
Facets Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.

Facets are an alternative to aesthetics for displaying additional discrete variables.

ggplot2 supports two (2) types of factes : facet_wrap( ) facet_grid( )

#### **4.2.5.1 plot with face_wrap( ) function**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to wraps a 1d sequence of panels into 2d.

This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_wrap(~ CLASS)
```

#### 4.2.5.2 plot with face_grid( ) function

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to forms a matrix of panels defined by row and column faceting variables.

It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.
:::

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
    facet_grid(~ CLASS)
```
:::

### 4.3 Coordinates

-   The *Coordinates* functions map the position of objects onto the plane of the plot.

-   There are a number of different possible coordinate systems to use, they are:

    -   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).

    -   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.

    -   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).

    -   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

### 4.3.1. Working with Coordinate

::: {.callout-warning appearance="simple" icon="false"}
By the default, the bar chart of ggplot2 is in vertical form.

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip()
```
:::

### 4.3.2 Change range for y- and x-axis

::: {.callout-warning appearance="simple" icon="false"}
The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              size = 0.5) +  
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
```
:::

## 5. NON-DATA CONTROL ELEMENT

-   background colour

-   size of fonts

-   grid lines

-   colour of labels

-   Built-in themes include :

    -   `theme_gray()` (default)

    -   `theme_bw()`

    -   `theme_classic()`

-   [Other themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

## **5.1 Set Theme**

::: {.callout-warning appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***facet_wrap( )*** - ggplot2 -]{style="color:#d46e15"} to forms a matrix of panels defined by row and column faceting variables.

It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.
:::

### **5.1.1 Plot Horizontal Bar Chart with `theme_gray( )`**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

### 5.1.2 Plot Horizontal Bar Chart with `theme_classic( )`

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

### **5.1.3 Plot Horizontal Bar Chart with `theme_minimal( )`**

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
:::

## 6. DESIGN DATA-DRIVEN VISUALISATION FOR ANALYSIS

## 6.1 Frequent Analysis

### 6.1.1 Original Bar Chart

A simple vertical bar chart for frequency analysis.

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

Critics:

-   y-aixs label is not clear (i.e. count)

-   To support effective comparison, the bars should be sorted by their resepctive frequencies.

-   For static graph, frequency values should be added to provide addition information.

### 6.1.2 Enhance Bar Chart

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) +
  geom_bar()
```

![](images/image-1254806109.png)

## Designing Data-drive Graphics for Analysis I

**\
The makeover design**

With reference to the critics on the earlier slide, create a makeover looks similar to the figure on the right.

### The makeover design

This code chunk uses [`fct_infreq()`](https://forcats.tidyverse.org/reference/fct_inorder.html) of [**forcats**](https://forcats.tidyverse.org/articles/forcats.html) package.

Credit: I learned this trick from [*Getting things into the right order*](https://wilkelab.org/SDS375/slides/getting-things-in-order.html#1) of Prof. Claus O. Wilke, the author of [**Fundamentals of Data Visualization**](https://clauswilke.com/dataviz/)

## Designing Data-drive Graphics for Analysis II

### The original design

![](images/image-698286474.png)

\

## Designing Data-drive Graphics for Analysis II

-   Adding mean and median lines on the histogram plot.

-   Change fill color and line color

-   ![](images/image-92343967.png)

    ## Designing Data-drive Graphics for Analysis III

    ### The original design

    ![](images/image-347055578.png)

    The histograms on the left are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.

    Create a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.

    ![](images/image-468107029.png)

## Designing Data-drive Graphics for Analysis IV

### The original design.

### ![](images/image-1638389725.png)

Create a makeover looks similar to the figure on the right.

A within group scatterplot with reference lines.

![](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/Hands-on_Ex01-ggplot2_files/figure-revealjs/unnamed-chunk-79-1.png)

Homework

Plot a trellis boxplot looks similar to the figure below.

![](images/image-339727884.png)

![](images/image-811211769.png)

![](images/image-468521342.png)

Plot a horizontal bar chart looks similar to the figure below.

-   Changing the colors of plot panel background of `theme_minimal()` to light blue and the color of grid lines to white.

![](images/image-78293342.png)

## Reference

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version

-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
