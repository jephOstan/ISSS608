---
title: "Create Horizon Graph, Candlestick Chart & Bollinger Bands"
subtitle: "Hands-on Exercise 10 - Financial Data Visualisation & Analysis"
editor: visual
date: 24 Mar 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores the steps to

-   extract stock price data from financial portal such as Yahoo Finance by using tidyquant package

-   plot horizon graph by using ggHoriPlot package,

-   plot static and interactive stock prices line graph(s) by ggplot2 and plotly R packages,

-   plot static candlestick chart by using tidyquant package,

-   plot static bollinger bands by using tidyquant, and

-   plot interactive candlestick chart by using ggplot2 and plotly R.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**NOTE**]{style="color:#3a9c88"}

The majority of content for this page is with references to [lecture notes](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex10/hands-on_ex10-finvis) from Dr. Kam Tin Seong.
:::

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(lubridate, tidyquant, ggHoriPlot, timetk, ggthemes, plotly,
               tidyverse)
```

## 2.2 R Packages Highlights

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## **⇳ Highlights of the R Packages needed for this study**

-   [tidyverse](https://www.tidyverse.org/) to tidy and wrangle data, and to visualise data.

-   [lubridate](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex10/hands-on_ex10-finvis) to work with dates and times.

-   [tidyquant](https://business-science.github.io/tidyquant/) to pull various data sources such as ***Yahoo***! ***Finance***, Morning Star, Bloomberg market data, etc. to the 'tidyverse'.

    -   It provides a convenient wrapper to various 'xts', 'zoo', 'quantmod', 'TTR' and 'PerformanceAnalytics' package functions and returns the objects in the tidy 'tibble' format.

-   [ggHoriPlot](https://rivasiker.github.io/ggHoriPlot/) to build horizon plots in the 'ggplot2' environment.
:::

<br>

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

The shares data will be sourced from Yahoo Finance with function from *tidyquant.*

## **3.2 Import Data**

### **3.2.1 Import Data into R E**

```{r}
company <- read_csv("data/companySG.csv")
glimpse(company, 50)
```

### **3.2.2 Filter for Top 40 'Symbol'**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***slice_max( )*** - ?-]{style="color:#d46e15"} to filter top 40 rows of data.
:::

```{r}
top40 <- company %>% 
  slice_max(`marketcap`, 
            n = 40) %>% 
  select(symbol)
```

### **3.2.3 Import Data from Yahoo! Finance** 

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[[***tq_get( )***](https://business-science.github.io/tidyquant/reference/tq_get.html) - tidyquant -]{style="color:#d46e15"} to extract **daily** stock values from *Yahoo!* Finance via APIs from 1st January 2020 to 31st March 2022.
:::

```{r}
stock40Daily <- top40 %>%
  tq_get(get = "stock.prices", 
         from = "2020-01-01", 
         to = "2022-03-31") %>%
  group_by(symbol) %>%
  tq_transmute(select = NULL, 
               mutate_fun = to.period, 
               period  = "days")
```

# 4. DATA VISUALISATION

## **4.1 Basic Horizon Graph**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_horizon( )*** - [ggHoriPlot](https://rivasiker.github.io/ggHoriPlot/)-]{style="color:#d46e15"} to plot horizon graph.
:::

```{r}
stock40Daily %>% 
  ggplot() +
  geom_horizon(aes(x = date, 
                   y = adjusted), 
               origin = "midpoint", 
               horizonscale = 6) +
  facet_grid(symbol~.) +
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y = unit
        (0, "lines"), 
        strip.text.y = element_text
        (size = 5, 
          angle = 0, 
          hjust = 0),
        legend.position = 'none',
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 7),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank()) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b%y") +
  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') 
```

## **4.2 Horizon Graph Makeover**

-   Instead of showing stock code, the stock name will be displayed.

-   Adding reference lines

Step 1: `left_join()` of *dplyr* package is used to append fields from **company** data.frame onto **Stock_daily** data.frame. Next `select()` is used to select columns 1 to 8 and 11 to 12.

```{r}
stock40Daily <- stock40Daily %>% left_join(company) %>%
  select(1:8, 11:12)
```

Step 2: `geom_vline()` is used to add the vertical reference lines.

```{r}
stock40Daily %>% ggplot() +
  geom_horizon(aes(x = date, y=adjusted), origin = "midpoint", horizonscale = 6)+
  facet_grid(Name~.)+ #<<
  geom_vline(xintercept = as.Date("2020-03-11"), colour = "grey15", linetype = "dashed", size = 0.5)+ #<<
  geom_vline(xintercept = as.Date("2020-12-14"), colour = "grey15", linetype = "dashed", size = 0.5)+ #<<
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"),
        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand=c(0,0), date_breaks = "1 month", date_labels = "%b%y") +
  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') 
```

## **4.3 Stock Price Line Graph**

### **4.3.1 with ggplot method**

In the code chunk below, `geom_line()` of ggplot2 is used to plot the stock prices.

```{r}
stock40Daily %>%
  filter(symbol == "DBSDF") %>%
  ggplot(aes(x = date, y = close)) +
    geom_line() +
    labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price", 
         y = "Closing Price", x = "") + 
    theme_tq()
```

### **4.3.2 Interactive with ggplotly**

In this section, we will create interactive line graphs for four selected stocks.

*Step 1:* Selecting the four stocks of interest.

```{r}
selectedStocks <-  stock40Daily %>%
  filter (`symbol` == c("C09.SI", "SINGF", "SNGNF", "C52.SI"))
```

Step 2: Plotting the line graphs by using *ggplot2* functions and `ggplotly()` of *plotly R* package

```{r}
p <- ggplot(selectedStocks, 
            aes(x = date, y = adjusted)) + 
  scale_y_continuous() +
  geom_line() +
  facet_wrap(~Name, scales = "free_y",) +
  theme_tq() +
  labs(title = "Daily stock prices of selected weak stocks", 
       x = "", y = "Adjusted Price") + 
  theme(axis.text.x = element_text(size = 6), 
        axis.text.y = element_text(size = 6))

ggplotly(p)
```

## **4.4 Plot Candlestick Chart** 

### **4.4.1 With tidyquant method**

In this section, you will learn how to plot [candlestick chart](https://en.wikipedia.org/wiki/Candlestick_chart) by using [`geom_candlestick()`](https://business-science.github.io/tidyquant/reference/geom_chart.html) of *tidyquant* package.

Before plotting the candlesticks, the code chunk below will be used to define the end data parameter. It will be used when setting date limits throughout the examples.

```{r}
end <- as_date("2022-03-31")
```

```{r}
#end <- strptime("31-Mar-2022", format = "%d-%b-%Y")
#end <- as.Date(end)
```

Now we are ready to plot the candlesticks by using the code chunk below.

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
stock40Daily %>% 
  filter(symbol == "DBSDF") %>%
  ggplot(aes(x = date, 
             y = close)) +
  geom_candlestick(aes(open = open, 
                       high = high, 
    low = low, close = close)) +
  geom_line(size = 0.5)+
    coord_x_date(xlim = c(end - weeks(12), 
                          end),
                 ylim = c(20, 35),
                 expand = TRUE) +
  labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price", 
       y = "Closing Price", x = "") + 
  theme_tq()
```

### **4.4.2 Plotting candlestick chart and MA lines: tidyquant method**

```{r}
stock40Daily %>%
  filter(symbol == "DBSDF") %>%
  ggplot(aes(
    x = date, y = close)) +
  geom_candlestick(aes(
    open = open, high = high, 
    low = low, close = close)) +
  geom_line(size = 0.5)+
  geom_ma(color = "darkgreen", n = 20) +
  geom_ma(color = "lightgreen", n = 5) + 
    coord_x_date(xlim = c(end - weeks(12), 
                          end),
                 ylim = c(20, 35),
                 expand = TRUE) +
  labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
       subtitle = "darkgreen = 1-day MA, lightgreen = 5-day MA",
       y = "Closing Price", x = "") + 
  theme_tq()
```

Things to learn from the code chunk:

-   [`geom_MA`](https://business-science.github.io/tidyquant/reference/geom_ma.html) is used to add the moving average line. It is a wrapper function of [`SMA()`](https://www.rdocumentation.org/packages/TTR/versions/0.24.3/topics/SMA) from the *TTR* package.

## **4.5 Plot Bollinger Bands**

### **4.5.1 wiht tidyquant method**

In this section, you will learn how to plot [bollinger bands](https://en.wikipedia.org/wiki/Bollinger_Bands) by using [`geom_bbands()`](https://business-science.github.io/tidyquant/reference/geom_bbands.html) of tidyquant package.

```{r}
stock40Daily %>%
  filter(symbol == "DBSDF") %>% 
  ggplot(aes(x=date, y=close))+
  geom_line(size=0.5)+
  geom_bbands(aes(
    high = high, low = low, close = close), 
    ma_fun = SMA, sd = 2, n = 20,
    size = 0.75, color_ma = "royalblue4", 
    color_bands = "red1")+
    coord_x_date(xlim = c("2020-02-01", 
                          "2022-03-31"), 
                 expand = TRUE)+
    labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
         subtitle = "dotted red lines = bollinger bands",
         x = "Date", y ="Price") +
theme(legend.position="none")
```

Things you can learn from the code chunk:

-   `geom_bbands()` plots a range around a moving average typically two standard deviations up and down. The moving average functions used are specified in [`SMA()`](https://www.rdocumentation.org/packages/TTR/versions/0.24.3/topics/SMA) from the [*TTR*](https://cran.r-project.org/web/packages/TTR/) package.

### **4.5.2 Interactive Candlesticks Chart:** 

#### **4.5.2.1 Step 1 with ggplot2 and plotly R method**

First, a `candleStick_plot` function is written as follows:

```{r}
#| code-fold: false
candleStick_plot<-function(symbol, from, to){
  tq_get(symbol, from = from, to = to, warnings = FALSE) %>% 
    mutate(greenRed=ifelse(open-close>0, "Red", "Green")) %>% 
    ggplot()+
    geom_segment(
      aes(x = date, xend=date, y =open, yend =close, colour=greenRed), 
      size=3)+
    theme_tq()+
    geom_segment(
      aes(x = date, xend=date, y =high, yend =low, colour=greenRed))+
    scale_color_manual(values=c("ForestGreen","Red"))+
    ggtitle(paste0(symbol," (",from," - ",to,")"))+
    theme(legend.position ="none",
          axis.title.y = element_blank(),
          axis.title.x=element_blank(),
          axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
          plot.title= element_text(hjust=0.5))
}
```

Credit: I learned this trick from [RObservations #12: Making a Candlestick plot with the ggplot2 and tidyquant packages](https://www.r-bloggers.com/2021/09/robservations-12-making-a-candlestick-plot-with-the-ggplot2-and-tidyquant-packages/)

#### **4.5.2.2 Step 2 with plotly R method**

```{r}
#| code-fold: false
#| fig-height: 6
#| fig-width: 14
p <- candleStick_plot("DBSDF",
                      from = '2022-01-01',
                      to = today())
ggplotly(p)
```

!!!!! Homework - write a function with lubridate to get quarterly for 1 year to visualise the 1 year data with facet of 4 quarter plots to minimise the overlapping.
