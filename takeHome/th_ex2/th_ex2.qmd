---
title: "DataViz Makeover"
editor: visual
date:  23 Jan 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

This study focus on make over a trellis plot of 9 population pyramids by

explores the **Pyramid chart** using **ggplot2** and supporting R packages.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Challenges in wrangling the raw data :**]{style="color:#3a9c88"}

The age group variable, "AG", is a character data type.

If it is used to plot the population pyramid, "10_to_14" will be parsed first instead of "5_to_9" after "0_to_4 is parsed.

Because of that, the order in the chart will be incorrect.

[Resolve manually with these functions - *mutate( )* and *arrange( )*.]{style="color:#d69c3c"}
:::

## 1.1 Task Instruction

critic the submission in terms of clarity and aesthetics,

prepare a sketch for the alternative design by using the data visualisation design principles and

best practices you had learned in Lesson 1 and 2

remake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.

The purpose of DataVis Makeover is to improve on the original visualisation.

Focus on what works,

what doesn't work,

why those things don't work, and how you made it better.

With consent given by fellow coursemate, [Chen Yi Man](https://public.tableau.com/app/profile/yiman.chen/viz/takehome_ex01/Story1), below is my draft to refine her works with R Studio and mainly ggplot2, ggplot2 extensions and tidyverse packages.

## 1.2 Literature Review

The review will be mainly focus on the clarity and aesthetics based on the requirements for Take Home Exercise 1.

### 1.2.1 Overview

Within short amount of times, she was able to deliver an inspiring piece of works in the following aspects :

-   three (3) different depths, namely, overview for Singapore at the nation level, follow by Singapore Planning Areas (PAs) and Sub Zones for each PA.

-   compliment the story telling with a degree of geospatial visual analysis.

-   provide interactive features that facilitate viewers certain level of visual analysis with regards to the topic.

However, there are some aspects can help to strengthen the visual analysis.

The evaluation will be focussed on the following four (4) aspects :

-   Level of clarity for the objectives and subject matters for the chart.

-   References for visual analysis :

    -   Trellis layout.

    -   Visual references.

    -   Domain knowledge.

[![Figure 1.1 Overview of Singapore Population Pyramid](images/image-30154142.png){fig-alt="This image illustrate an overview of Singapore Population Pyramid that produced by Tableau Desktop." fig-align="left" width="800"}](https://public.tableau.com/shared/FRQBJR92T?:display_count=n&:origin=viz_share_link)

[![Figure 1.2 Singapore Population Pyramids by 55 Planning Areas with trellis wrap layout.](images/image-1612659243.png){fig-alt="This image illustrate the population pyramid for 55 Planning Area." fig-align="left" width="800"}](https://public.tableau.com/shared/FRQBJR92T?:display_count=n&:origin=viz_share_link)

[![Figure 1.3 Singapore Population Pyramids by 55 Planning Areas with trellis wrap layout.](images/image-101707983.png){fig-alt="This image illustrate the population pyramid for all sub-zones within each 55 Singapore Planning Areas." fig-align="left" width="800"}](https://public.tableau.com/shared/HG56JW8NK?:display_count=n&:origin=viz_share_link)

1.2.2

# 2. R PACKAGE REQUIRED

The following are the packages required for this exercise :

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggplot2, sf, tmap, quanteda, NLP)
```

[Remarks :]{style="color:#d69c3c"}
:::

# 3. DATA

## 3.1 Acquire Data Source

::: {.callout-warning appearance="simple" icon="false"}
This study will be based on demographic data set downloadable from [Singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data).

-   Download "Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022" in CSV format.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Highlights of the data set**]{style="color:#3a9c88"}

1.  Data may not add up due to rounding.

2.  For June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority's Master Plan 2019.

3.  Data from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.

4.  Metadata :

    -   PA = Planning Area

    -   SZ = Subzone

    -   AG = Age Group

    -   Sex = Sex

    -   TOD = Type of Dwelling

    -   Pop = Resident Count

    -   Time - Time / Period
:::
:::

-   Singstat Dataset for Population

    1.  Download "Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022" [dataset](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) in csv format from Singstat.gov.sg.

Master Plan 2014 Planning Area Boundary. Web version instead of Sea version.

Data

| Source(s) | Urban Redevelopment Authority                                        |
|:----------|----------------------------------------------------------------------|
| Licence   | [Singapore Open Data Licence](https://data.gov.sg/open-data-licence) |

https://data.gov.sg/dataset/master-plan-2014-planning-area-boundary-web

## 3.2 Import Data

### 3.2.1 Import Population Attributes Data

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Two (2) steps : import and inspect imported data set.

#### 3.2.1.1 import data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
pop_attribute <- read_csv("data/aspatial/respopagesextod2022.csv")

problems(pop_attribute)
```

#### 3.2.1.2 inspect missing value

```{r}
skimr::skim(pop_attribute)
```

[Remarks :]{style="color:#d69c3c"}

[Preliminary data interpretation - based on 2022 consensus data, .]{style="color:#d69c3c"}

#### 3.2.1.3 inspect values

```{r}
#| code-fold: false
unique(pop_attribute$Time)
```

Remarks :

Can remove "SZ", "Time" and "TOD" fields as they are not needed for age-sex population pyramids.

```{r}
unique(pop_attribute$TOD)
```
:::

## **3.3 Data Wrangling**

### **3.3.1 Change Field Names to Lowercase**

::: {.callout-warning appearance="simple" icon="false"}
To avoid confusion between field names used in data and discussions, change all fields' name to lowercase.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***tolower( )*** - quanteda -]{style="color:#d46e15"} to convert fields' name into lower case.
:::

```{r}
#| code-fold: false
names(pop_attribute) <- tolower(names(pop_attribute))
```
:::

### **3.3.2 Remove Non-Alphameric Character**

There are special character such as "\_" among Age Groups' value.

Unable to use str_sub( ) function from stringr package as the position of "\_" is varied among values.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***gsub( )*** - base -]{style="color:#d46e15"} to replace "\_" with space.
:::

```{r}
#| code-fold: false
pop_attribute$ag <- gsub("_", 
                         " ", 
                         pop_attribute$ag, 
                         fixed = TRUE)
```

3.3.3

```{r}
questionr::freq(pop_attribute$pa[(pop_attribute$pop >= 0)])
```

## 3.4 Create Data Frame for Population Pyramids Plot

### 3.4.1 Explore with Single Planning Area

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group Singapore population by age and gender.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the number of residents for each group.
:::
:::

```{r}
#| code-fold: false
test0 <- pop_attribute %>% 
  filter(pa == "Bedok") %>%
  group_by(ag, sex) %>%
  summarise(`count_pop` = sum(`pop`)) %>%
  ungroup()
```

#### 3.4.1.1 visualise data

::: panel-tabset
## Visualise Bedok Data

```{r}
ggplot(data = test0,
       aes(y = ag)) +
  geom_bar() +
  theme_bw() +  
  ggtitle("Test Age Group Distribution") 
```

## Inspect Data

```{r}
unique(pop_attribute$ag)
```
:::

::: panel-tabset
Remarks :

Notice the age group "5 to 9" is placed after "45 to 49" instead of placed at 2nd value as shown under the "Inspect Data" tab.
:::

#### 3.4.1.2 update age groups display sequence

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
for entire singapore

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***arrange( )*** - dplyr -]{style="color:#d46e15"} to sort the rows in descending order of the counted "Returned" value of each "Sub-category".
:::

```{r}
ag_sequence <- c("0 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44", "45 to 49", "50 to 54", "55 to 59", "60 to 64", "65 to 69", "70 to 74", "75 to 79", "80 to 84", "85 to 89", "90 and over")

pop_sgp <- pop_attribute %>%
  group_by(ag, sex) %>%
  summarise(`count_pop` = sum(`pop`)) %>%
  mutate(ag = factor(ag, levels = ag_sequence)) %>%
  arrange(ag) %>%
  ungroup()

pop_sgp <- pop_sgp %>%
  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),
         res = str_c(count_pop, ", ", pct))

```

at Planning Area level

```{r}
#| code-fold: false
ag_sequence <- c("0 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44", "45 to 49", "50 to 54", "55 to 59", "60 to 64", "65 to 69", "70 to 74", "75 to 79", "80 to 84", "85 to 89", "90 and over")

pop_pa <- pop_attribute %>%
  group_by(pa, ag, sex) %>%
  summarise(`count_pop` = sum(`pop`)) %>%
  mutate(ag = factor(ag, levels = ag_sequence)) %>%
  arrange(ag) %>%
  ungroup()

pop_pa <- pop_pa %>%
  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),
         res = str_c(count_pop, ", ", pct))
```

remarks :
:::

## **3.5 Create 9 Planning Areas Data Set**

### **3.5.1 Identify Top 9 Planning Areas**

::: {.callout-warning appearance="simple" icon="false"}
Based on top 9 highest population

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***slice( )*** - dplyr -]{style="color:#d46e15"} to filter based on the first 9 rows.
:::
:::

```{r}
#| code-fold: false
t9_paPop <- pop_attribute %>%
  group_by(pa) %>%
  summarise(`count_pop` = sum(`pop`)) %>%
  ungroup()

t3 <- arrange(t9_paPop, desc(t9_paPop$count_pop)) %>%
  slice(1:3) %>%
  select(pa)
  
t6 <- arrange(t9_paPop, desc(t9_paPop$count_pop)) %>%
  slice(4:6) %>%
  select(pa)
  
t9 <- arrange(t9_paPop, desc(t9_paPop$count_pop)) %>%
  slice(7:9) %>%
  select(pa)

t19 <- arrange(t9_paPop, desc(t9_paPop$count_pop)) %>%
  slice(1:9) %>%
  select(pa)
```

Remarks :
:::

### **3.5.2 Filter Top 9 Filter**

::: {.callout-warning appearance="simple" icon="false"}
```{r}
#| code-fold: false
t3_filtered <- pop_pa %>% 
  filter(pop_pa$pa %in% t3$pa)

t6_filtered <- pop_pa %>% 
  filter(pop_pa$pa %in% t6$pa)

t9_filtered <- pop_pa %>% 
  filter(pop_pa$pa %in% t9$pa)

t19_filtered <- pop_pa %>% 
  filter(pop_pa$pa %in% t19$pa)
```
:::

## 3.6 Create

::: {.callout-warning appearance="simple" icon="false"}
```{r}
#| code-fold: false
pop_males <- t19_filtered %>%
  filter(sex %in%
           c("Males")) %>%
  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),
         res = str_c(count_pop, ", ", pct))
```

```{r}
#| code-fold: false
pop_females <- t19_filtered %>%
  filter(sex %in%
           c("Females")) %>%
  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),
         res = str_c(count_pop, ", ", pct))
```
:::

```{r}
#| eval: false
test3 <- pop_attribute %>%
  group_by(pa, ag) %>%
  summarise(`count_pop` = sum(`pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from = ag, 
              values_from = count_pop) %>%
  mutate(YOUNG = rowSums(.[3:6]) + 
           rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) +
           rowSums(.[13:15])) %>%
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)
```

# 4 EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Plot Pyramid Chart

#### **4.1.1 Plot A Single Population Pyramid (Static)**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_col( )*** - ggplot2 -]{style="color:#d46e15"} to create the bar chart with the bar length represent the actual population stats.

[***scale_x\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to modify the labels on the x-axis to provide better readability.

[***ifelse( )*** - base -]{style="color:#d46e15"} to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.
:::
:::

```{r}
#| code-fold: false
popPyr_sgp <- ggplot(pop_sgp, 
                       aes(x = ifelse(sex == "Males",
                                      yes = -count_pop,
                                      no = count_pop),
                           y = ag,
                           fill = sex)) + 
  geom_col() +
  scale_x_continuous(limits = c(-170000, 170000),
    breaks = seq(-200000, 200000, 50000), 
                     labels = paste0(
                       as.character(
                         c(seq(200, 0, -50), 
                           seq(50, 200, 50))),
                       "k")) +
  scale_y_discrete(expand = expansion(mult = c(0, .04))) +
  labs (x = "Count of Population", 
        y = "Age Group",
        fill = "Gender",
        title = "Singapore Population Pyramid 2022",
        subtitle = "Distribution of gender and age groups",
        caption = "Data Source : Singstat.gov.sg, June 2022") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, 
                                  colour = "#302f2f",
                                  face = "bold",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 8,
                                     colour = "#424242",
                                     face = "italic",
                                     hjust = 0.5),
        plot.caption = element_text(size = 8,
                                    colour = "#424242",
                                    hjust = 0),
        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.title.y = element_text(angle = 0, 
                                    size = 8, 
                                    colour = "#302f2f",
                                    vjust = 1.07,
                                    hjust = 1,
                                    margin = margin(r = -50, l = 10)),
        axis.title.x = element_text(size = 8, 
                                    colour = "#302f2f"),
        axis.text.x = element_text(size = 7,
                                   colour = "#424242"),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        legend.position = "bottom",
        legend.justification = "left",
        legend.text = element_text(size = 7,
                                   colour = "#424242"),
        legend.title = element_text(size = 8, 
                                    colour = "#302f2f"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        legend.background = element_rect(fill = "#f7e9cd"),
        legend.margin = margin(t = -10),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) +
  geom_text(aes(label = pct),
            hjust = ifelse(pop_sgp$sex == "Males",
                           yes = 1.2, 
                           no = -0.2),
            size = 2,
            check_overlap = FALSE,
            colour = "#424242") +
  scale_fill_manual(values = c("Males" = "#FFA319FF", 
                               "Females" = "#302f2f"))

popPyr_sgp
```

#### **4.1.2 Plot A Single Population Pyramid (Interactive)**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
[Remark :]{style="color:#d69c3c"}

[The pyramid above shows the younger generation's lower percentage, making Singapore's population structure a constrictive type. That means an ageing population.]{style="color:#d69c3c"}

[By June 2022, 4.07 million residents population with a median age of 42.1,]{style="color:#d69c3c"}[^1] [which is approximately a 19% increase from the median age of 35.3 back in the year 2002]{style="color:#d69c3c"}[^2].

[Also, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore's adjusted gender pay gap (GPG) is at 6%]{style="color:#d69c3c"}[^3].

[Measures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions.]{style="color:#d69c3c"}
:::

[^1]: [Singstat. (2022). Population Dashboard. https://www.singstat.gov.sg/find-data/search-by-theme/population/population-and-population-structure/visualising-data/population-dashboard]{style="color:#d69c3c"}

[^2]: [Singstat. (2002). Indicators On Population. https://tablebuilder.singstat.gov.sg/table/TS/M810001]{style="color:#d69c3c"}

[^3]: [Ministry of Manpower. (2020). Report: Singapore's Adjusted Gender Pay Gap. https://stats.mom.gov.sg/Pages/Singapores-Adjusted-Gender-Pay-Gap.aspx]{style="color:#d69c3c"}

4.1.3 **Plot Trall Population Pyramid (Static)**

```{r}
#| code-fold: false
popPyr_t19 <- ggplot() +
  geom_bar(data = subset(t19_filtered, 
                         sex == "Males"), 
           aes(x = ag, 
               y = -count_pop, 
               fill = pa),
           stat = "identity", 
           fill = "#FFA319FF") +
  geom_bar(data = subset(t19_filtered, 
                         sex == "Females"), 
           aes(x = ag, 
               y = count_pop, 
               fill = pa), 
           stat = "identity", 
           fill = "#302f2f") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#FFA319FF",
               "Females" = "#302f2f"),
    breaks = c("Males", "Females")) +
  facet_wrap(.~ pa,
             drop = FALSE, 
             ncol = 3,
             scales = "fixed") +
  scale_y_continuous(limits = c(-13000, 13000),
                     expand = expansion(mult = c(0, .04))) +
  labs (y = "Count of Population", 
        x = "Age Group",
        fill = "Gender",
        title = "Singapore Population Pyramid 2022",
        subtitle = "Distribution of gender and age groups",
        caption = "Data Source : Singstat.gov.sg, June 2022") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, 
                                  colour = "#302f2f",
                                  face = "bold",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 8,
                                     colour = "#424242",
                                     face = "italic",
                                     hjust = 0.5),
        plot.caption = element_text(size = 8,
                                    colour = "#424242",
                                    hjust = 0),
        strip.text = element_text(size = 7,
                                  colour = "#424242"),
        strip.background = element_blank(),

        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(angle = 0, 
                                    size = 8, 
                                    colour = "#302f2f",
                                    vjust = 1.07,
                                    hjust = 0.8,
                                    margin = margin(r = -40, l = 20)),
        axis.title.x = element_text(size = 8, 
                                    colour = "#302f2f"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        legend.position = "bottom",
        legend.justification = "left",
        legend.text = element_text(size = 7,
                                   colour = "#424242"),
        legend.title = element_text(size = 8, 
                                    colour = "#302f2f"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        legend.background = element_rect(fill = "#f7e9cd"),
        legend.margin = margin(t = -10),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) 

popPyr_t19
```

```{r}
#| code-fold: false
popPyr_t19.fg <- ggplot() +
  geom_bar(data = subset(t19_filtered, 
                         sex == "Males"), 
           aes(x = ag, 
               y = -count_pop, 
               fill = pa),
           stat = "identity", 
           fill = "#FFA319FF") +
  geom_bar(data = subset(t19_filtered, 
                         sex == "Females"), 
           aes(x = ag, 
               y = count_pop, 
               fill = pa), 
           stat = "identity", 
           fill = "#302f2f") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#FFA319FF",
               "Females" = "#302f2f"),
    breaks = c("Males", "Females")) +
  facet_grid(cols = vars(pa)) +
  scale_y_continuous(limits = c(-13000, 13000),
                     expand = expansion(mult = c(0, .04))) +
  labs (y = "Count of Population", 
        x = "Age Group",
        fill = "Gender",
        title = "Singapore Population Pyramid 2022",
        subtitle = "Distribution of gender and age groups",
        caption = "Data Source : Singstat.gov.sg, June 2022") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, 
                                  colour = "#302f2f",
                                  face = "bold",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 8,
                                     colour = "#424242",
                                     face = "italic",
                                     hjust = 0.5),
        plot.caption = element_text(size = 8,
                                    colour = "#424242",
                                    hjust = 0),
        strip.text = element_text(size = 7,
                                  colour = "#424242"),
        strip.background = element_blank(),

        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(angle = 0, 
                                    size = 8, 
                                    colour = "#302f2f",
                                    vjust = 1.07,
                                    hjust = 0.8,
                                    margin = margin(r = -40, l = 20)),
        axis.title.x = element_text(size = 8, 
                                    colour = "#302f2f"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        legend.position = "bottom",
        legend.justification = "left",
        legend.text = element_text(size = 7,
                                   colour = "#424242"),
        legend.title = element_text(size = 8, 
                                    colour = "#302f2f"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        legend.background = element_rect(fill = "#f7e9cd"),
        legend.margin = margin(t = -10),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) 

popPyr_t19.fg
```

```{r}
#| code-fold: false
popPyr_t3 <- ggplot() +
  geom_bar(data = subset(t3_filtered, 
                         sex == "Males"), 
           aes(x = ag, 
               y = -count_pop, 
               fill = pa),
           stat = "identity", 
           fill = "#FFA319FF") +
  geom_bar(data = subset(t3_filtered, 
                         sex == "Females"), 
           aes(x = ag, 
               y = count_pop, 
               fill = pa), 
           stat = "identity", 
           fill = "#302f2f") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#FFA319FF",
               "Females" = "#302f2f"),
    breaks = c("Males", "Females")) +
  facet_grid(cols = vars(pa)) +
  scale_y_continuous(limits = c(-13000, 13000),
                     expand = expansion(mult = c(0, .04))) +
  labs (y = "", 
        x = "Age Group",
        fill = "Gender",
        title = "Singapore Population Pyramid 2022",
        subtitle = "Distribution of gender and age groups") +
  theme_bw() +
  theme(plot.title = element_text(size = 14, 
                                  colour = "#302f2f",
                                  face = "bold",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 8,
                                     colour = "#424242",
                                     face = "italic",
                                     hjust = 0.5),
        plot.caption = element_text(size = 8,
                                    colour = "#424242",
                                    hjust = 0),
        strip.text = element_text(size = 7,
                                  colour = "#424242"),
        strip.background = element_blank(),

        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(angle = 0, 
                                    size = 8, 
                                    colour = "#302f2f",
                                    vjust = 1.07,
                                    hjust = 0.8,
                                    margin = margin(r = -40, l = 20)),
        axis.title.x = element_text(size = 8, 
                                    colour = "#302f2f"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        legend.position = "bottom",
        legend.justification = "left",
        legend.text = element_text(size = 7,
                                   colour = "#424242"),
        legend.title = element_text(size = 8, 
                                    colour = "#302f2f"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        legend.background = element_rect(fill = "#f7e9cd"),
        legend.margin = margin(t = -10),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) 

popPyr_t3
```

```{r}
#| code-fold: false
popPyr_t6 <- ggplot() +
  geom_bar(data = subset(t6_filtered, 
                         sex == "Males"), 
           aes(x = ag, 
               y = -count_pop, 
               fill = pa),
           stat = "identity", 
           fill = "#FFA319FF") +
  geom_bar(data = subset(t6_filtered, 
                         sex == "Females"), 
           aes(x = ag, 
               y = count_pop, 
               fill = pa), 
           stat = "identity", 
           fill = "#302f2f") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#FFA319FF",
               "Females" = "#302f2f"),
    breaks = c("Males", "Females")) +
  facet_grid(cols = vars(pa)) +
  scale_y_continuous(limits = c(-13000, 13000),
                     expand = expansion(mult = c(0, .04))) +
  labs (y = "", 
        x = "") +
  theme_bw() +
  theme(strip.text = element_text(size = 7,
                                  colour = "#424242"),
        strip.background = element_blank(),
        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) 

popPyr_t6
```

```{r}
#| code-fold: false
popPyr_t9 <- ggplot() +
  geom_bar(data = subset(t9_filtered, 
                         sex == "Males"), 
           aes(x = ag, 
               y = -count_pop, 
               fill = pa),
           stat = "identity", 
           fill = "#FFA319FF") +
  geom_bar(data = subset(t9_filtered, 
                         sex == "Females"), 
           aes(x = ag, 
               y = count_pop, 
               fill = pa), 
           stat = "identity", 
           fill = "#302f2f") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#FFA319FF",
               "Females" = "#302f2f"),
    breaks = c("Males", "Females")) +
  facet_grid(cols = vars(pa)) +
  scale_y_continuous(limits = c(-13000, 13000),
                     expand = expansion(mult = c(0, .04))) +
  labs (y = "Count of Population", 
        x = "",
        fill = "Gender") +
  theme_bw() +
  theme(plot.caption = element_text(size = 8,
                                    colour = "#424242",
                                    hjust = 0),
        strip.text = element_text(size = 7,
                                  colour = "#424242"),
        strip.background = element_blank(),

        axis.ticks = element_line(colour = "#969595",
                                  linewidth = 0.3),
        axis.ticks.x = element_blank(),
        axis.title.x = element_text(size = 8, 
                                    colour = "#302f2f"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7,
                                   colour = "#424242"),
        legend.position = "bottom",
        legend.justification = "left",
        legend.text = element_text(size = 7,
                                   colour = "#424242"),
        legend.title = element_text(size = 8, 
                                    colour = "#302f2f"),
        panel.grid.major = element_line(linewidth = rel(0.5)),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#f7e9cd"),
        legend.background = element_rect(fill = "#f7e9cd"),
        legend.margin = margin(t = -10),
        panel.border = element_rect(colour = "#969595",
                                    linewidth = 0.3)) 

popPyr_t9
```

```{r}
ggpubr::ggarrange(
  popPyr_t3,
  popPyr_t6,
  popPyr_t9,
  align = "v",
  ncol = 1) +
  labs(caption = "Data Source : Singstat.gov.sg, June 2022")

```
