---
title: "Resale Prices for 3-Room Flat Type of Public Housing Properties"
subtitle: "The dataset is based on Singapore Residential Towns and Estates in year 2022"
editor: visual
date:  6 Feb 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

The main focus of this visual analytics assignment is to uncover salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in **Lesson 4: Fundamentals of Visual Analytics**. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.

The focus should be on **3-ROOM, 4-ROOM and 5-ROOM types and** either focus on one housing type or multiple housing types. The study period should be in the year **2022**.

## **1.1 Target Area**

Residential towns and estates in Singapore.

# **2. R PACKAGE REQUIRED**

The following are the packages required for this exercise :

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(ggstatsplot, tidyverse, gganimate, gifski, ggiraph, performance, lmtest, car, FunnelPlotR, plotly)
```

# **3. DATA**

## **3.1 Acquire Data Source**

This study will be based on demographic data set downloadable from [Data.gov.sg](https://data.gov.sg/dataset/resale-flat-prices?resource_id=f1765b54-a209-4718-8d38-a39237f502b3).

-   Download "Resale flat prices based on registration 2017 onwards" in CSV format.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Highlights of the data set**]{style="color:#3a9c88"}

1.  The data used in this study is based on the date of registration instead of the date of approval for the resale transactions.

2.  Data last updated on 6 February 2023.

3.  The data sourced from SIngapore Housing and Development Board.
:::

## **3.2 Import Data**

### **3.2.1 Import attributes data**

There are two (2) steps involve, which are import and inspect imported data set.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
resale_prices <- read_csv("data/resaleFlatPrices2017.csv")

problems(resale_prices)
```

### **3.2.2 Inspect missing values**

```{r}
skimr::skim(resale_prices)
```

### 3.2.3 Explore variable types

```{r}
glimpse(resale_prices, 60)
```

### **3.2.4 Identify unique values for key variables**

#### **3.2.4.1 Variable :: "flat_type"**

```{r}
#| code-fold: false
unique(resale_prices$flat_type)
```

#### **3.2.4.2 Variable :: "town"**

```{r}
unique(resale_prices$town)
```

#### 3.2.4.3 Variable :: "resale_price"

Identify the maximum and minimum values for this continuous variable.

```{r}
summary(resale_prices$resale_price)
```

#### 3.2.4.4 Variable :: "storey_range"

Identify the highest floor and the lowest floor.

```{r}
unique(resale_prices$storey_range)
min(unique(resale_prices$storey_range))
max(unique(resale_prices$storey_range))
```

Remarks :

"10 TO 12" is listed as the first value instead of "01 TO 03" and "49 TO 51" listed before 5 ranges of storeys. Need to plot a chart to visualise the displayed sequence.

#### 3.2.4.5 Variable :: "floor_area_sqm"

```{r}
summary(resale_prices$floor_area_sqm)
```

#### 3.2.4.6 Variable :: "flat_model"

```{r}
unique(resale_prices$flat_model)
```

#### 3.2.4.7 Variable :: "remaining_lease"

```{r}
min(unique(resale_prices$remaining_lease))
max(unique(resale_prices$remaining_lease))
```

Remarks :

The values are inconsistent. For further analysis, the values will need to be converted into entirely monthly values.

### 3.2.5 Inspect plotted sequence

#### 3.2.5.1 Variable :: "month"

```{r}
#| fig-height: 8
#| fig-width: 8
#| code-fold: false
ggplot(data = resale_prices,
       aes(y = month)) +
  geom_bar() +
  theme_bw() +  
  ggtitle("Test Month Displayed Sequence") 
```

#### 3.2.5.2 Variable :: "storey_range"

```{r}
#| code-fold: false
ggplot(data = resale_prices,
       aes(y = storey_range)) +
  geom_bar() +
  theme_bw() +  
  ggtitle("Test storey Range Sequence")
```

Remarks :

Both sequences were plotted continuously.

## **3.3 Data Wrangling**

### 3.3.1 Split "month" variable

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***separate_wider_delim( )*** - tidyr -]{style="color:#d46e15"} to separate a column into "year" and "month" columns with a regular expression.
:::

```{r}
#| code-fold: false
resale_prices <- resale_prices %>%
  separate_wider_delim(month, 
                       delim = "-", 
                       names = c("year", "month"))
```

### 3.3.2 Filter data

#### 3.3.2.1 Filter data based on year 2022 & 3 flat types

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***filter( )*** - dplyr -]{style="color:#d46e15"} to filter for data falls within year 2022 and 3 types of flat with the usage of "&".
:::

```{r}
#| code-fold: false
prices2022 <- resale_prices %>%
  filter(`year` == 2022 & `flat_type` == c("3 ROOM", "4 ROOM", "5 ROOM"))
```

#### 3.3.2.2 Inspect output

```{r}
unique(prices2022$flat_type)
unique(prices2022$year)
```

### 3.3.3 Convert values for "Remaining Lease"

#### 3.3.3.1 Attempts to convert all values to months

#### Attempt#1

```{r}
#| code-fold: false
#| eval: false
test <- prices2022 %>% 
  separate(remaining_lease, into = c("a","b","c","d"), sep = " ")
```

Remarks :

Warning message -

    Warning: Expected 4 pieces. Missing pieces filled with `NA` in 2247 rows [4, 22, 23, 35, 39, 40, 46, 59, 76, 90, 101, 102, 124, 133, 146, 149, 150, 151, 162, 164, ...].

#### Attempt#2

```{r}
#| eval: false
#| code-fold: false
test1 <- prices2022 %>%
  mutate(year_lease = str_extract(`remaining_lease`, "[0-9]{1,2}"),
         month_lease  = str_extract(`remaining_lease`, "[0-9]{10,11}"))

glimpse(test1[13:14], 50)
```

Remarks :

This approach returned "NA" for entire "month_lease" column.

#### Attempt#3

```{r}
#| eval: false
#| code-fold: false
test2 <- prices2022 %>%
  mutate(yearlease = str_extract_all(prices2022$remaining_lease, "([0-9][0-9]{2})"))

glimpse(test2[,13], 50)
```

Remarks :

The approach above is a dead end approach.

Took a break and then chance upon this Tidy's approach below from Stackoverflow ([Robert L. 2022](https://stackoverflow.com/a/71101770)).

#### Attempt#4

```{r}
#| eval: false
#| code-fold: false
test3 <- str_split_fixed(prices2022$remaining_lease, " ", 4) %>% 
  data.frame() %>% 
  rename(v1 = X1, v2 = X2, v3 = X3, v4 = X4) %>%
  select (-c(v2, v4)) %>%
  mutate(v3 = ifelse(v3 == "", 0, v3))

glimpse(test3, 50)
```

Remarks :

Further exploration needed based on the attempt#4's approach.

#### Attempt #4.1 with unTidy's method

```{r}
#| eval: false
#| code-fold: false
test3.1 <- as.data.frame(apply(test3, 2, as.numeric))

glimpse(test3.1, 50)
```

Remarks :

Found this method without using Tidyverse function. Code chunk credit to Joachim S. 2022[^1].

[^1]: Joachim S. (2020). How to Convert a Character to Numeric in R. Statistics Globe - https://statisticsglobe.com/convert-character-to-numeric-in-r/

#### Attempt #4.2 with Tidy's method

```{r}
#| eval: false
#| code-fold: false
test3.2 <- test3 %>% mutate_if(is.character, as.numeric)

glimpse(test3.2, 50)
```

Remarks :

Found this code chunk recommended by Zach, 2022[^2].

[^2]: Zach. (2022). How to Convert Multiple Columns to Numeric Using dplyr. Statology. https://www.statology.org/convert-multiple-columns-to-numeric-dplyr/

#### 3.3.3.2 Convert values

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***bind_cols( )*** - dplyr -]{style="color:#d46e15"} to bind prices2022 with new columns.

[***str_split_fixed( )*** - stringr -]{style="color:#d46e15"} to split up "remaining_lease" into 4 new columns.

[***str_split_fixed( )*** - stringr -]{style="color:#d46e15"} to split up "remaining_lease" into 4 new columns.
:::

```{r}
#| code-fold: false
prices_lease2022 <- bind_cols(prices2022,
                              (str_split_fixed(prices2022$remaining_lease, 
                                           " ", 
                                           4) %>% 
                             data.frame() %>% 
                             rename(year_lease = X1, 
                                    omit1 = X2, 
                                    month_lease = X3, 
                                    omit2 = X4) %>%
                             select (-c(omit1, omit2)) %>%
                             mutate(month_lease = 
                                      ifelse(month_lease == "", 0, 
                                             month_lease)) %>% 
                             mutate_if(is.character, as.numeric))
                          ) %>%
  mutate (remaining_lease_months = year_lease*12 + month_lease)
```

#### 3.3.3.3 Inspect output

```{r}
summary(prices_lease2022$remaining_lease_months)
```

### 3.3.4 Convert Case

#### 3.3.4.1 Variable :: town

Convert all upper case to only the initial.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***str_to_sentence( )*** - stringr -]{style="color:#d46e15"} to convert "TOWN" to "Town".
:::

```{r}
prices_lease2022$town <- str_to_title(prices_lease2022$town)
```

#### 3.3.4.2 Variable :: flat_type

```{r}
prices_lease2022$flat_type <- str_to_sentence(prices_lease2022$flat_type)
```

Remarks :

Alternately, can use str_to_lower( ) function to deliver the same output. But, for future references, decided to use str_to_sentence( ) function instead.

#### 3.3.4.3 Variable :: storey_range

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***str_to_lower( )*** - stringr -]{style="color:#d46e15"} to convert "TO" to "to".
:::

```{r}
prices_lease2022$storey_range <- str_to_lower(prices_lease2022$storey_range)
```

Remarks :

Can avoid this step if upper case of insignificant text is acceptable or tolerable among the values.

### 3.3.5 Derive new variable and update variable type

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***str_sub( )*** - stringr -]{style="color:#d46e15"} to extract last 2 characters of the string ([Xu, 2011](https://stackoverflow.com/a/7964027))[^3].
:::

[^3]: Xu, W. (2011, November 1). Extracting the last n characters from a string in R. Stackoverflow. https://stackoverflow.com/a/7964027

Derive 2 variables to capture the price per square meter and price per remaining lease months.

```{r}
#| code-fold: false
price_trim <- prices_lease2022 %>%
  mutate(`price_psqm` = as.numeric(round(resale_price/floor_area_sqm, 2)),
         `price_prlm` = as.numeric(round(resale_price/remaining_lease_months, 2)),
         `storey_range` = as.numeric(str_sub(storey_range, -2,-1)),
         `month` = as.numeric(month),
         `remaining_lease_months` = as.numeric(remaining_lease_months),
         `resale_price` = as.numeric(resale_price)) %>%
  select(month, town, flat_type, storey_range, flat_model, floor_area_sqm, remaining_lease_months, price_prlm, price_psqm, resale_price)

glimpse(price_trim, 70)
```

#### 3.3.5.2 Update variable type for funnel plot

Convert all the character variables to a factor type.

```{r}
price3R_fp <- price_trim %>%
  filter(flat_type %in% "3 room") %>%
  select(-flat_type) %>%
  mutate_if(is.character, 
            as.factor)

glimpse(price3R_fp, 60)
```

#### 3.3.5.3 Compute statistical variables

```{r}
price3R_stats <- price_trim %>%
  filter(flat_type %in% "3 room") %>%
  select(-flat_type) %>%
  group_by(flat_model) %>%
  summarise(n = n(),
            mean = mean(price_psqm),
            sd = sd(price_psqm)) %>%
  mutate(se = sd/sqrt(n-1),
         low_ci = mean - qt(1 - (0.05 / 2), n-1)*se,
         upp_ci = mean + qt(1 - (0.05 / 2), n-1)*se)

glimpse(price3R_stats, 70)
min(price3R_stats$low_ci)
max(price3R_stats$upp_ci)
```

### 3.3.6 Pivot data

#### 3.3.6.1 Filter for "3 room"

```{r}
#| code-fold: false
rooms3 <- price_trim %>%
  filter(flat_type %in% "3 room") %>%
  select(-flat_type) %>%
  group_by(town, flat_model) %>%
  arrange(storey_range)
```

#### 3.3.6.2 Pivot data

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***pivot_wider( )*** - tidyr -]{style="color:#d46e15"} to expand the data frame with values from specified variable.
:::

```{r}
rooms3_pw <- rooms3 %>%
  pivot_wider(id_cols = town,
              names_from = c(flat_model, storey_range),
              values_from = resale_price,
              values_fill = 0,
              values_fn = mean)
```

# 4. VISUAL ANALYTICS

## 4.1 Visualise Standard Errors with Confidence Intervals

Distribution of price per square metre for 3-rooms flat models.

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
price3R_stats$flat_model_seq = with(price3R_stats, reorder(flat_model, desc(mean))) 

ggplot(price3R_stats) +
  geom_errorbar(aes(x = flat_model_seq,
                    ymin = low_ci, 
                    ymax = upp_ci),
                width = 0.2, 
                colour = "black", 
                alpha = 0.9, 
                size = 0.5) +
  geom_point(aes(x = flat_model_seq,
                 y = mean),
             stat = "identity", 
             color = "red",
             size = 1.5,
             alpha = 1) +
  labs (x = "3-rooms Flat Models",
        y = "Mean Price per Square Metre($)") +
  ggtitle("Standard error of mean price psqm by 3-rooms flat model") + 
  ylim (5000, 12000)
```

## 4.2 Visualise with Funnel Plot

```{r}
#| code-fold: false
#| fig-height: 8
#| fig-width: 12
funnel_plot(numerator = price3R_fp$price_psqm,
            denominator = price3R_fp$remaining_lease_months,
            group = price3R_fp$flat_model,
            data_type = "RC",
            title = "Price pSQM Funnel Plot")
```

Remarks :

Not much info can be derived apart from knowing "Terrace" as the outlier.

Hence, different approaches with ggplot functions explore and reveal more patterns and insights.

```{r}
#| fig-height: 16
#| fig-width: 12
ggplotly((ggplot(price3R_fp,
                 aes(x = remaining_lease_months,
                     y = price_psqm)) +
            geom_point(aes(fill = flat_model,
                           label = flat_model),
                       alpha = 0.4) +
            theme_light() +
            labs (x = "Remaining Lease Months",
                  y = "Price per square metre (SGD$)",
                  fill = "Flat Model",
                  title = "Does remaining lease months affect the price per square metre?",
                  caption = "Date Source : Singstat.gov.sg") +
            theme(plot.title = element_text(size = 12,
                                            face = "bold"),
                  plot.caption = element_text(size = 8,
                                              hjust = 0),
                  legend.title = element_text(size = 7),
                  legend.text = element_text(size = 7),
                  legend.background = element_rect(colour = "grey60", 
                                                   linetype = "dotted"))),
         tooltip = c("x","y","label")) %>%
  layout(legend = list(orientation = "h", 
                       x = 0.5, 
                       y = -0.15, 
                       xanchor = "center"))
```

Remarks :

Among 82 units of 3-room "Premium Apartment" transacted, only approximately 11% below 1,097 months (3rd quartile of the remaining lease months). If all of them are 99 years leasehold, more than 89% of the transacted units are less than 10 years old.

Out of 2,121 units of 3-room flat type transacted in year 2022, more than 76% of the transacted units are 19 years or older. Among these units, 40% of them are "New Generation" model, while the second predominant unit is the "Improved" model, which is approximately 31.7%.

## 4.3 One Sample Test

Distribution of price per square metre for 3 rooms type.

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
set.seed(1234)

gghistostats(data = rooms3,
             x = price_psqm,
             type = "bayes",
             test.value = 60,
             xlab = "Price")
```

## 4.4 Two Samples Mean Test

### 4.4.1 Compute Bartlett Test

As shown in 4.1 plot, the data is normally distributed. Hence, Bartlett test is performed to determine homogeneity of variance. The output will help to determine the ANOVA test proceed with parametric (p) or non-parametric (np).

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***bartlett.test( )*** - stats -]{style="color:#d46e15"} to reveal the homogeneity of variances.
:::

```{r}
bartlett.test(price_psqm ~ flat_model, 
              data = rooms3)
```

Remarks :

The p-value is smaller than the significance level of 0.05, which means the assumption for homogeneity of variance is violated.[^4] This can be interpreted as statistically proven significant differences between price per square metre for different types of 3-room flat models in Singapore.

[^4]: Compare Multiple Sample Variances in R. Statistical tools for high-throughput data analysis. http://www.sthda.com/english/wiki/compare-multiple-sample-variances-in-r

### 4.4.2 One-way ANOVA Test

Since the p-value for Barlett test is less than 0.05, non-parametric (Kruskal-Wallis) test [^5] will be used to conduct further analysis.

[^5]: Heidel E. (2022). Homogeneity of variance and ANOVA - Assess homogeneity of variance when comparing three independent groups on a continuous outcome. scalestatistics.com. https://www.scalestatistics.com/homogeneity-of-variance-and-anova.html#:\~:text=If%20the%20p%2Dvalue%20is,test%20to%20conduct%20the%20analysis.

```{r}
#| fig-height: 12
#| fig-width: 12
#| code-fold: false
ggbetweenstats(data = rooms3,
               x = flat_model,
               y = price_psqm,
               type = "np",
               mean.ci = TRUE,
               pairwise.comparisons = TRUE,
               pairwise.display = "s",
               p.adjust.method = "fdr",
               messages = FALSE,
               outlier.tagging = TRUE)
```

## 4.5 Correlation and Multicolinearity Check

### 4.5.1 Price per square metre by flat model

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
ggscatterstats(data = rooms3,
               x = flat_model,
               y = price_psqm,
               marginal = FALSE)
```

### 4.5.2 Price per square metre by storey range

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
ggscatterstats(data = rooms3,
               x = storey_range,
               y = price_psqm,
               marginal = FALSE)
```

### 4.5.3 Price per square metre by town

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
ggscatterstats(data = rooms3,
               x = town,
               y = price_psqm,
               marginal = FALSE)
```

### 4.5.4 Price per square metre by month

```{r}
#| fig-height: 8
#| fig-width: 12
#| code-fold: false
ggscatterstats(data = rooms3,
               x = month,
               y = price_psqm,
               marginal = FALSE)
```

### 4.5.5 Check multicolinearity

```{r}
#| code-fold: false
model <- lm(formula = resale_price ~ remaining_lease_months + storey_range + month + price_psqm + price_prlm, 
            data = rooms3)

summary(model)
```

Remarks :

"month" is not statistically significant to the test. It will be removed.

### 4.5.6 Trim model

```{r}
#| code-fold: false
model1 <- lm(formula = resale_price ~ remaining_lease_months + storey_range + price_psqm + price_prlm, 
            data = rooms3)

summary(model1)
```

### 4.5.7 Visualise model diagnostic output

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***check_model( )*** - performance -]{style="color:#d46e15"} to visual check of model various assumptions (normality of residuals, multicollinearity, normality of random effects, heteroscedasticity, homogeneity of variance).
:::

```{r}
#| code-fold: false
#| fig-height: 24
#| fig-width: 12
check_model(model1)
```

Remarks :

Based on the VIF results, none of the variables is above 10, which means there is no high correlation between the variables.

#### 4.5.7.1 Check with Breush Pagan test

```{r}
bptest(model1)
```

Remarks :

The p-value is smaller than 0.05. Hence, the null hypothesis is rejected, meaning there is heteroscedasticity present in this model1. The output for this model will need to further verify for its validity.
