---
title: "Modelling, Visualing and Analysing Network Data"
subtitle: "Hands-on Exercise 8 - Network Data"
editor: visual
date:  10 Mar 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores the steps to :

-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,

-   build network graph visualisation using *ggraph* functions,

-   compute network geometrics using *tidygraph*,

-   build advanced graph visualisation by incorporating the network geometrics, and

-   build interactive network visualisation using *visNetwork* package.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**NOTE**]{style="color:#3a9c88"}

The majority of content for this page is with references to [lecture notes](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex08/hands-on_ex08-networkvis#overview) from Dr. Kam Tin Seong.
:::

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
packages = c('igraph', 'tidygraph', 'ggraph', 'visNetwork', 'lubridate', 'clock', 'tidyverse', 'graphlayouts')

for(p in packages){
  if(!require
     (p, character.only = T)){
    install.packages(p)
    }
  library(p, character.only = T)
}
```

## 2.2 R Packages Highlights

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Highlights of the R Packages needed for this study** ]{style="color:#3a9c88"}

1.  **tidygraph package**

    It provides a tidy API for the graph or network manipulation :

    -   Switch between the nodes and edges tables and manipulate them with dplyr verbs.

    -   Access to various graph algorithms with returned values that facilitate their usage in a tidy workflow.

    Additional reading materials recommended by lecturer :

    -   [Introducing tidygraph](https://www.data-imaginist.com/2017/introducing-tidygraph/)

    ```{=html}
    <!-- -->
    ```
    -   [tidygraph 1.1 -- A tidy hope](https://www.data-imaginist.com/2018/tidygraph-1-1-a-tidy-hope/)

2.  

    ### **The tbl_graph object**

    Two functions of **tidygraph** package can be used to create network objects, they are:

    -   [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) creates a **tbl_graph** network object from nodes and edges data.

    -   [`as_tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) converts network data and objects to a **tbl_graph** network.

        -   a node data.frame and an edge data.frame,

        -   data.frame, list, matrix from base,

        -   igraph from igraph,

        -   network from network,

        -   dendrogram and hclust from stats,

        -   Node from data.tree,

        -   phylo and evonet from ape, and

        -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).

    ## **The dplyr verbs in tidygraph**

    -   *activate()* verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to **tbl_graph** object are applied to the active tibble.

    ![](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex08/img/image9-3.jpg)

    -   In the above the *.N()* function is used to gain access to the node data while manipulating the edge data. Similarly *.E()* will give you the edge data and *.G()* will give you the **tbl_graph** object itself.
:::

<br>

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

The data set for this hands-on exercise is from an oil exploration and extraction company.

There are two data sets :

-   The nodes data.

    -   *GAStech_email_node.csv*, which consists of the name, department and title for each 55 employees.

-   The edges (also know as link) data.

    -   *GAStech_email_edge-v2.csv*, which consists of 9,063 emails, corresponded between 55 employees within two weeks.

## **3.2 Import Data**

Involved two (2) steps : import and inspect imported data set.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

### **3.2.1 Import nodes data**

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")

problems(GAStech_nodes)
```

### **3.2.2 Import edges data**

```{r}
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")

problems(GAStech_edges)
```

### 3.2.3 Inspect imported data

```{r}
glimpse(GAStech_nodes, 70)
```

```{r}
glimpse(GAStech_edges, 70)
```

Remarks :

The "SentDate" should be a "date" data type instead of imported as a "character" data type.

## 3.3 Data Wrangling

### 3.3.1 Update data type

#### 3.3.1.1 Update "year", "month", "day"

Create a new field with a date data type instead of changing the existing variable type.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***dmy( )*** - lubridate -]{style="color:#d46e15"} to parse "SentDate" with year, month and day components.

[***wday( )*** - lubridate -]{style="color:#d46e15"} to returns the day of the week as an ordered factor of character strings.

Arguments :

-   both label and abbr are set to "FALSE", the value return as a number. This will set the "Weekday" field as ordinal type.
:::

```{r}
#| code-fold: false
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

#### 3.3.1.2 **Review output**

```{r}
glimpse(GAStech_edges, 60)
```

### **3.3.2 Aggregate attributes**

Group an individual's source, target and weekday for data visualisation.

```{r}
#| code-fold: false
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, 
           target, 
           Weekday) %>%
  summarise(Weight = n()) %>%
  filter(source != target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

#### **3.3.2.2 Review output**

```{r}
glimpse(GAStech_edges_aggregated, 60)
```

## **3.3.3 Create network objects with tidygraph**

#### **3.3.3.1 Create tidygraph data model**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***tbl_graph( )*** - tidygraph -]{style="color:#d46e15"} to build a tidygraph's network graph dataframe.

[Arguments](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) :

-   **nodes**

-   **edges**

    The terminal nodes of each edge must either be encoded in a `to` and `from` column, or in the two first columns, as integers.

-   **directed** to set the constructed graph to be directed when set to "TRUE".

-   **node_key** refers to the variable in "nodes" that represented "to" and "from" columns should be matched against.

    -   This setting has no effect if `to` and `from` are given as integers.
:::

```{r}
#| code-fold: false
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

#### **3.3.3.2 Review output**

```{r}
GAStech_graph
```

Remarks :

-   The tbl_graph object has 54 nodes and 4541 edges.

-   Illustrates the first six rows of "Node Data" and the first three rows of "Edge Data".

-   The Node Data is an **active** **tibble** within a tbl_graph object. This means, at this point, only node tibble can be manipulated.

### **3.3.4 Activate & update non-active object**

The nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the *activate()* function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest "weight" first, we could use *activate()* and then *arrange()*.

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc
          (Weight))
```

Visit the reference guide of [*activate()*](https://tidygraph.data-imaginist.com/reference/activate.html) to find out more about the function.

## **Plotting Network Data with ggraph package**

[**ggraph**](https://ggraph.data-imaginist.com/) is an extension of **ggplot2**, making it easier to carry over basic ggplot skills to the design of network graphs.

As in all network graph, there are three main aspects to a **ggraph**'s network graph, they are:

-   [nodes](https://cran.r-project.org/web/packages/ggraph/vignettes/Nodes.html),

-   \[edges\]((https://cran.r-project.org/web/packages/ggraph/vignettes/Edges.html) and

-   [layouts](https://cran.r-project.org/web/packages/ggraph/vignettes/Layouts.html).

For a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.

### **Plotting a basic network graph**

The code chunk below uses [*ggraph()*](https://ggraph.data-imaginist.com/reference/ggraph.html), [*geom-edge_link()*](https://ggraph.data-imaginist.com/reference/geom_edge_link.html) and [*geom_node_point()*](https://ggraph.data-imaginist.com/reference/geom_node_point.html) to plot a network graph by using *GAStech_graph*. Before your get started, it is advisable to read their respective reference guide at least once.

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

Things to learn from the code chunk above:

-   The basic plotting function is *ggraph()*, which takes the data to be used for the graph and the type of layout desired. Both of the arguments for *ggraph()* are built around igraph. Therefore, *ggraph()* can use either an igraph object or a tbl_graph object.

### **Changing the default network graph theme**

In this section, you will use [*theme_graph()*](https://ggraph.data-imaginist.com/reference/theme_graph.html) to remove the x and y axes. Before your get started, it is advisable to read it's reference guide at least once.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

Things to learn from the code chunk above:

-   **ggraph** introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. *theme_graph()*, besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\

-   The ggraph theme can be set for a series of plots with the *set_graph_style()* command run before the graphs are plotted or by using *theme_graph()* in the individual plots.

### **Changing the coloring of the plot**

Furthermore, *theme_graph()* makes it easy to change the coloring of the plot.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### **Working with ggraph's layouts**

**ggraph()** support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by **ggraph()**.

![](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex08/img/image9-4.jpg){fig-align="left" width="300"}

![](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex08/img/image9-5.jpg){fig-align="left" width="300"}

**Fruchterman and Reingold layout**

The code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

Thing to learn from the code chunk above:

-   *layout* argument is used to define the layout to be used.

### **Modifying network nodes**

In this section, you will colour each node by referring to their respective departments.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

Things to learn from the code chunks above:

-   *geom_node_point* is equivalent in functionality to *geo_point* of **ggplot2**. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.

### **Modifying edges**

In the code chunk below, the thickness of the edges will be mapped with the *Weight* variable.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

Things to learn from the code chunks above:

-   *geom_edge_link* draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument *width* is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.

## **Creating facet graphs**

Another very useful feature of **ggraph** is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.

There are three functions in ggraph to implement faceting, they are:

-   [*facet_nodes()*](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex08/hands-on_ex08-networkvis) whereby edges are only draw in a panel if both terminal nodes are present here,

-   [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and

-   [*facet_graph()*](https://ggraph.data-imaginist.com/reference/facet_graph.html) faceting on two variables simultaneously.

### **Working with *facet_edges()***

In the code chunk below, [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) is used. Before getting started, it is advisable for you to read it's reference guide at least once.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### **Working with *facet_edges()***

The code chunk below uses *theme()* to change the position of the legend.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

### **A framed facet graph**

The code chunk below adds frame to each graph.

```{r}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### **Working with *facet_nodes()***

In the code chunkc below, [*facet_nodes()*](https://ggraph.data-imaginist.com/reference/facet_nodes.html) is used. Before getting started, it is advisable for you to read it's reference guide at least once.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## **Network Metrics Analysis**

### **Computing centrality indices**

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to *Chapter 7: Actor Prominence* of **A User's Guide to Network Analysis in R** to gain better understanding of theses network measures.

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

Things to learn from the code chunk above:

-   *mutate()* of **dplyr** is used to perform the computation.

-   the algorithm used, on the other hand, is the *centrality_betweenness()* of **tidygraph**.

### **Visualising network metrics**

It is important to note that from **ggraph v2.0** onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.

```{r}
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### **Visualising Community**

tidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including *Edge-betweenness (group_edge_betweenness)*, *Leading eigenvector (group_leading_eigen)*, *Fast-greedy (group_fast_greedy)*, *Louvain (group_louvain)*, *Walktrap (group_walktrap)*, *Label propagation (group_label_prop)*, *InfoMAP (group_infomap)*, *Spinglass (group_spinglass)*, and *Optimal (group_optimal)*. Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this [link](https://tidygraph.data-imaginist.com/reference/group_graph.html) to find out more about community detection functions provided by tidygraph,

In the code chunk below *group_edge_betweenness()* is used.

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## **Building Interactive Network Graph with visNetwork**

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an "id" column, and the edge list must have "from" and "to" columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the "label" column in the node list.

-   The resulting graph is fun to play around with.

    -   You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.

    -   You can also zoom in and out on the plot and move it around to re-center it.

### **Data preparation**

Before we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### **Plotting the first interactive network graph**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***visNetwork( )*** - visNetwork -]{style="color:#d46e15"} to plot an interactive network graph by using the data prepared.
:::

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### **Working with layout**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***visIgraphLayout( )*** - visNetwork -]{style="color:#d46e15"} to use a igraph layout to compute coordinates and fast rendering.

Arguments :

-   graph refers to the visNetwork object.

-   layout default to "layout_nicely".

-   default value for both "physics" and "smooths" are "FALSE".

-   set randomseed to display same nodes layoutout.

[***layout_with_fr( )*** - igraph -]{style="color:#d46e15"} to place vertices on the plane using the force-directed layout algorithm by Fruchterman and Reingold.

-   note : edge directions are ignored. More about [igraph](http://datastorm-open.github.io/visNetwork/igraph.html).
:::

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr")
```

Remarks :

The arguements are \>\> visIgraphLayout(graph, layout, smooth\... )

With the graph argument in mind, explore further with code chunk below, different from the code chunk above provided for this lesson.

Conclusion : Both code chunk above and below produced the same output.

```{r}
visIgraphLayout((visNetwork(GAStech_nodes,
                            GAStech_edges_aggregated)),
                layout = "layout_with_fr")
```

Remarks :

The produced layout value "layout_nicely" and "layout_with_fr" looks similar.

```{r}
visIgraphLayout(visNetwork(GAStech_nodes,
                            GAStech_edges_aggregated))
```

### smooth nodes

```{r}
visIgraphLayout((visNetwork(GAStech_nodes,
                            GAStech_edges_aggregated)),
                layout = "layout_with_fr",
                smooth = TRUE)
```

### FUNKY NODES!

```{r}
visIgraphLayout((visNetwork(GAStech_nodes,
                            GAStech_edges_aggregated)),
                layout = "layout_with_fr",
                physics = TRUE,
                smooth = TRUE,
                randomSeed = 1234)
```

### FUNKIER NODES \^\^

```{r}
visIgraphLayout((visNetwork(GAStech_nodes,
                            GAStech_edges_aggregated)),
                layout = "layout_in_circle",
                physics = TRUE,
                smooth = TRUE)
```

Remarks :

### **Working with visual attributes - Nodes**

visNetwork() looks for a field called "group" in the nodes object and colour the nodes according to the values of the group field.

The code chunk below rename Department field to group.

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

When we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the *group* field.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **Working with visual attributes - Edges**

In the code run below *visEdges()* is used to symbolise the edges.\
- The argument *arrows* is used to define where to place the arrow.\
- The *smooth* argument is used to plot the edges using a smooth curve.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Visit [Option](http://datastorm-open.github.io/visNetwork/edges.html) to find out more about visEdges's argument. \]

### **Interactivity**

In the code chunk below, *visOptions()* is used to incorporate interactivity features in the data visualisation.\
- The argument *highlightNearest* highlights nearest when clicking a node.\
- The argument *nodesIdSelection* adds an id node selection creating an HTML select element.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Visit [Option](http://datastorm-open.github.io/visNetwork/options.html) to find out more about visOption's argument.

## **Reference**
