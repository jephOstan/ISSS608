[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "VISUAL ANALYTICS & APPLICATIONS\nwith R Markdown, R Studio and Quarto\n\n\n\n\n\n\nContent Disclaimer\n\n\n\n\n\nThis micro-site is for academic purposes only. Any views or opinions, or comments represented in this site is personal and belongs solely to the site owner and do not represent those people, institutions or organisations that the owner may or may not be associated professionally or within a personal capacity unless explicitly stated.\nAll content on this site is for informational purposes only. This site’s owner makes no representation of the accuracy or completeness of any display information or any link on this site. The owner will not be liable for any errors, omissions or availability of any information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.\n\n\n\nmodule : ISSS608-AY2022-23Jan Visual Analytics and Applications\ninstructor : Dr. Kam Tin Seong, Associate Professor of Information Systems (Practice)\ninstitute : MITB-Analytics Track , Singapore Management University (SMU)\ntimeline : January 14, 2023 to March 25, 2023\n\n\n\n\ntopic\nlesson cover\ndate\n\n\n\n\n\nIntroduction to Visual Analytics\n\nHands-on Ex1\nJan 14, 2023\n\n\n\nDesigning Graphs to Enlighten\n\n\nJan 21, 2023\n\n\n\nInteractivity in Visual Analytics\n\n\nJan 28, 2023\n\n\n\nFundamentals of Visual Analytics\n\n\nFeb 4, 2023\n\n\n\nVisual Multivariate Analysis\n\n\nFeb 11, 2023\n\n\n\nIt’s About Time\n\n\nFeb 18, 2023\n\n\n\nGeoVisual Analytics\n\n\nFeb 25, 2023\n\n\n\nNetwork Data Visualisation and Analysis\n\n\nMar 11, 2023\n\n\n\nInformation Dashboard Design\n\n\nMar 18, 2023\n\n\n\nVisualising Financial Data\n\n\nMar 25, 2023"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name : Tan Zexeong, Joseph\nResidency : Singapore Permanent Resident"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise, we will explore the pros and cons of creating data visualisations using ggplot2 and Tableau. The two data visualisations included in this exercise are:\n\nA pareto chart showing the distribution of returns by a fictious superstore\nA population pyramid of Singapore by age cohort and gender\n\n\n\n\nThe raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using mutate() and then sorting via arrange().\nThe secondary axes in ggplot2 is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.\nAs ggplot2 produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using plotly package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using plotly tools.\nThe default visualization created with ggplot2 is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.\n\n\n\n\n\nIn R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.\nTableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic pareto plot can be created by stat_pareto() of ggQC, and a basic population pyramid can be plotted using nPyramid() of rCharts.\nVisualisations in Tableau are interactive, whereas ggplot2 in R is static. Extra effort is also required to customise the details of the visualisation in ggplot2. Interactivity and customisation can be included through ggplot and plotly. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.\n\n\n\n\nReference charts were already created using Tableau for in-class exercise 2, hence they will be used as the proposed sketch for the data visualisations for ggplot2.\n\n\n\n\n\nAs Tableau produces interactive charts and dashboards, we will use plotly to convert the ggplot2 plots to produce interactive graphs for a more objective comparison."
  },
  {
    "objectID": "Hands-on_Ex1.html#load-r-packages",
    "href": "Hands-on_Ex1.html#load-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "Hands-on_Ex1.html#acquire-data-source",
    "href": "Hands-on_Ex1.html#acquire-data-source",
    "title": "Take-home Exercise 1",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nTableau Fictatious Dataset\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”.\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "Hands-on_Ex1.html#import-data",
    "href": "Hands-on_Ex1.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0"
  },
  {
    "objectID": "Hands-on_Ex1.html#population-pyramid",
    "href": "Hands-on_Ex1.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html",
    "href": "pnote/test1.html",
    "title": "Exploration 1 - Pareto Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges to plot secondary-axis :\n\n\n\n\n\nThe functions in ggplot2 transform the secondary axis one-to-one based on the primary axis. Hence, the scale of the secondary axis plot will not be accurate.\nResolve by transforming the secondary axis with a coefficient to match the scale with the primary axis.\n\n\n\n\n\n\n\n\n\nLack of interactive function :\n\n\n\n\n\nThe ggplot2 can only produce static charts.\nResolve by using plotly functions to allow readers to hover over the chart to reveal details for each plotted point."
  },
  {
    "objectID": "pnote/test1.html#load-r-packages",
    "href": "pnote/test1.html#load-r-packages",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "pnote/test1.html#acquire-data-source",
    "href": "pnote/test1.html#acquire-data-source",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Tableau’s fictatious data set -\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”."
  },
  {
    "objectID": "pnote/test1.html#read-rds-file",
    "href": "pnote/test1.html#read-rds-file",
    "title": "Test & Explore",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test1.html#standardise-data",
    "href": "pnote/test1.html#standardise-data",
    "title": "Test & Explore",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test2.html",
    "href": "pnote/test2.html",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges in wrangling the raw data :\n\n\n\n\n\nThe age group variable, “AG”, is a character data type.\nIf it is used to plot the population pyramid, “10_to_14” will be parsed first instead of “5_to_9” after “0_to_4 is parsed.\nBecause of that, the order in the chart will be incorrect.\nResolve manually with these functions - mutate( ) and arrange( )."
  },
  {
    "objectID": "pnote/test2.html#load-r-packages",
    "href": "pnote/test2.html#load-r-packages",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test2.html#acquire-data-source",
    "href": "pnote/test2.html#acquire-data-source",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "pnote/test2.html#import-data",
    "href": "pnote/test2.html#import-data",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_sgp <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_sgp)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskim(pop_sgp)\n\n\n\nData summary\n\n\nName\npop_sgp\n\n\nNumber of rows\n75696\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nFA\n0\n1\n4\n13\n0\n6\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n53.89\n137.6\n0\n0\n0\n40\n2210\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.0\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - based on 2022 consensus data, ."
  },
  {
    "objectID": "pnote/test2.html#population-pyramid",
    "href": "pnote/test2.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html#import-data",
    "href": "pnote/test1.html#import-data",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the Excel file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - between 2017 and 2020, 793 unique customers contributed to the sales volume of 5,009 orders for 1,862 products.\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0\n\n\n\n\n\n\n\nShow the code\nsummary(unique(returns$Returned))\n\n\n   Length     Class      Mode \n        1 character character \n\n\nShow the code\nsummary(unique(returns$`Order ID`))\n\n\n   Length     Class      Mode \n      296 character character \n\n\nRemark :\nPreliminary data interpretation - there were 296 out of 5,009 orders returned."
  },
  {
    "objectID": "pnote/test1.html#population-pyramid",
    "href": "pnote/test1.html#population-pyramid",
    "title": "Test & Exploration 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test2.html#read-rds-file",
    "href": "pnote/test2.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test2.html#standardise-data",
    "href": "pnote/test2.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html#data-wrangling",
    "href": "pnote/test1.html#data-wrangling",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Join Data Frames\n\n\n\n\n\n\nCombine both data frames.\n\n3.3.1.1 join returns to orders\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to join the returns data frame to orders data frame by “Order ID” as the unique identifier.\n\n\n\n\n\nShow the code\nsummary(ss_ordersMgmt <- left_join(orders, \n                           returns,\n                        by = c('Order ID' = 'Order ID')\n                        ))\n\n\n     Row ID       Order ID           Order Date                    \n Min.   :   1   Length:12420       Min.   :2017-01-03 00:00:00.00  \n 1st Qu.:2466   Class :character   1st Qu.:2018-05-28 00:00:00.00  \n Median :5095   Mode  :character   Median :2019-07-18 00:00:00.00  \n Mean   :4983                      Mean   :2019-05-13 14:10:46.96  \n 3rd Qu.:7419                      3rd Qu.:2020-06-08 00:00:00.00  \n Max.   :9994                      Max.   :2020-12-30 00:00:00.00  \n                                                                   \n   Ship Date                       Ship Mode         Customer ID       \n Min.   :2017-01-07 00:00:00.00   Length:12420       Length:12420      \n 1st Qu.:2018-06-01 00:00:00.00   Class :character   Class :character  \n Median :2019-07-23 12:00:00.00   Mode  :character   Mode  :character  \n Mean   :2019-05-17 12:07:39.13                                        \n 3rd Qu.:2020-06-10 00:00:00.00                                        \n Max.   :2021-01-05 00:00:00.00                                        \n                                                                       \n Customer Name        Segment          Country/Region         City          \n Length:12420       Length:12420       Length:12420       Length:12420      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    State            Postal Code       Region           Product ID       \n Length:12420       Min.   : 1040   Length:12420       Length:12420      \n Class :character   1st Qu.:24153   Class :character   Class :character  \n Mode  :character   Median :60623   Mode  :character   Mode  :character  \n                    Mean   :57418                                        \n                    3rd Qu.:90045                                        \n                    Max.   :99301                                        \n                    NA's   :11                                           \n   Category         Sub-Category       Product Name           Sales          \n Length:12420       Length:12420       Length:12420       Min.   :    0.444  \n Class :character   Class :character   Class :character   1st Qu.:   17.904  \n Mode  :character   Mode  :character   Mode  :character   Median :   55.392  \n                                                          Mean   :  233.629  \n                                                          3rd Qu.:  212.680  \n                                                          Max.   :22638.480  \n                                                                             \n    Quantity         Discount          Profit            Returned        \n Min.   : 1.000   Min.   :0.0000   Min.   :-6599.978   Length:12420      \n 1st Qu.: 2.000   1st Qu.:0.0000   1st Qu.:    1.970   Class :character  \n Median : 3.000   Median :0.1500   Median :    9.072   Mode  :character  \n Mean   : 3.785   Mean   :0.1544   Mean   :   28.996                     \n 3rd Qu.: 5.000   3rd Qu.:0.2000   3rd Qu.:   29.372                     \n Max.   :14.000   Max.   :0.8000   Max.   : 8399.976                     \n                                                                         \n\n\nRemark :\nThere were 12,420 items sold, as indicated by the variable lengths.\n\n\n3.2.1.2 explore and inspect\n\n\nShow the code\nfreq(ss_ordersMgmt$Returned)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1 <NA>      9194      74.03           74.03\n2  Yes      3226      25.97          100.00\n\n\nRemark :\n3,226 out of ordered 12,420 items, approximately 25.97% of items returned.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nGroup items first before summarising the count of “Returned”.\n\n3.3.2.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group orders by specific param.\nsummarise( ) - dplyr - to count the number of returned orders.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nreturned_subCat <- ss_ordersMgmt %>%\n  group_by(`Sub-Category`) %>%\n  summarise(`Returned` = n()) %>%\n  arrange(desc(`Returned`)) %>%\n  ungroup()\n\nreturned_subCat\n\n\n# A tibble: 17 × 2\n   `Sub-Category` Returned\n   <chr>             <int>\n 1 Binders            1938\n 2 Paper              1734\n 3 Furnishings        1151\n 4 Phones             1121\n 5 Storage            1022\n 6 Accessories         965\n 7 Art                 926\n 8 Chairs              802\n 9 Appliances          603\n10 Labels              423\n11 Tables              405\n12 Fasteners           292\n13 Envelopes           291\n14 Bookcases           263\n15 Supplies            243\n16 Machines            157\n17 Copiers              84\n\n\n\n\n\n\n\n\n3.3.3 Compute Cumulative Frequency\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to compute new variables “cum_freq” and “cum”.\ncumsum( ) - base - to compute vector consists of cumulative sums elements.\n\n\n\n\n\nShow the code\ncf_subCat <- returned_subCat %>%\n  mutate(cum_freq = cumsum(Returned)) %>%\n  mutate(cum = cumsum(Returned)/sum(Returned))\n\ncf_subCat\n\n\n# A tibble: 17 × 4\n   `Sub-Category` Returned cum_freq   cum\n   <chr>             <int>    <int> <dbl>\n 1 Binders            1938     1938 0.156\n 2 Paper              1734     3672 0.296\n 3 Furnishings        1151     4823 0.388\n 4 Phones             1121     5944 0.479\n 5 Storage            1022     6966 0.561\n 6 Accessories         965     7931 0.639\n 7 Art                 926     8857 0.713\n 8 Chairs              802     9659 0.778\n 9 Appliances          603    10262 0.826\n10 Labels              423    10685 0.860\n11 Tables              405    11090 0.893\n12 Fasteners           292    11382 0.916\n13 Envelopes           291    11673 0.940\n14 Bookcases           263    11936 0.961\n15 Supplies            243    12179 0.981\n16 Machines            157    12336 0.993\n17 Copiers              84    12420 1"
  },
  {
    "objectID": "pnote/test1.html#pareto-chart",
    "href": "pnote/test1.html#pareto-chart",
    "title": "Exploration 1 - Pareto Chart",
    "section": "4.1 Pareto Chart",
    "text": "4.1 Pareto Chart\nIt is crucial to narrow down the 20% factor contributing to the 80% increment or drop in sales orders to avoid unnecessary waste of time and resources during preliminary decision-making for business development.\nHence, the Pareto chart is used to identify the 20% crucial factors and eliminates the 80% less crucial ones.\n\n4.1.1 Plot Static Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart and set the height of the bar to represent the actual returns counts.\ngeom_line( ) & geom_point - ggplot2 - to plot the line and scatter plot for the cumulative frequency of returned counts. The scatter plot helps identify each product’s cumulative frequency in a static chart.\nscale_y_continuous( ) - ggplot2 - to adjust the interval between the grid lines and to add a secondary y-axis to illustrate each product’s cumulative percentage of returns.\nThe secondary y-axis is based on a one-to-one transformation of the primary axis..\ntheme( ) - ggplot2 - to improve visibility by adjusting the plot’s background colour and grid lines.\n\n\n\n\n\nShow the code\nggplot(data = cf_subCat,\n       aes(x = reorder(`Sub-Category`,\n                       -`Returned`))) +\n  geom_col(aes(y = `Returned`),\n           fill = 'salmon', \n           width = 0.8) +\n  geom_point(aes(y = `cum_freq`), \n             color = 'grey20', \n             size = 0.8) +\n  geom_line(\n    aes(y = `cum_freq`, \n        group = 1), \n    colour = 'grey20', \n    size = 0.4) +\n  labs(x = \"Sub-Category\", \n       title = \"Pareto Chart of returns by sub-category\") +\n  scale_y_continuous(name = 'Returns (absolute frequency)', \n                     breaks = seq(0, 3500, 300), \n                     minor_breaks = seq(0, 3500, 100),\n                     sec.axis = sec_axis(~.*1/sum(cf_subCat$Returned), \n                                         name = 'Cumulative Frequency', \n                                         breaks = seq(0, 1, \n                                                      by = 0.1), \n                                         labels = scales::percent)) +\n  geom_hline(yintercept = 0.8*sum(cf_subCat$Returned), \n             linetype = \"dashed\", \n             color = \"grey50\") +\n  geom_text(\n    aes(17,\n        0.8*sum(Returned),\n        label = \"80.0%\",\n        vjust = -0.5),\n    size = 2) +\n  theme(panel.background = element_rect(\n    fill = 'white', \n    colour = 'grey60',\n    size = 0.5,\n    linetype = 'solid'),\n    panel.grid.major = element_line(\n      size = 0.3, \n      linetype = 'solid', \n      colour = 'grey85'),\n    panel.grid.minor = element_line(\n      size = 0.2, \n      linetype = 'solid', \n      colour = 'grey90'),\n    text = element_text(\n      size = 5.5),\n    axis.ticks.x = element_blank()) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot Interactive Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to plot an interactive Pareto chart that allows to view corresponding cumulative percentage for each product when hover across the line or the bars .\n\n\n\n\n\nShow the code\nplot_ly(cf_subCat, \n        x = ~reorder(`Sub-Category`,\n                     -`Returned`), \n        y = ~`Returned`, \n        type = \"bar\", \n        name = \"Returned\") %>%\n  add_trace(x = ~reorder(`Sub-Category`,\n                         -`Returned`), \n            y = ~`cum`*100,\n            type = \"scatter\", \n            mode = \"lines\", \n            yaxis = \"y2\", \n            name = \"Cum. %\") %>%\n  layout(title = \"Pareto chart of returns by sub-category\",\n         xaxis = list(\n           title = \"Sub-Category\"),\n         yaxis = list(\n           title = \"Returned (Absolute Frequency)\", \n           showgrid = F),\n         yaxis2 = list(\n           overlaying = \"y\", \n           side = \"right\", \n           title = \"Cumulative Percentage (%)\", \n           range = list(0, 100)),\n         legend = list(orientation = \"h\", \n                       yanchor = \"bottom\", \n                       y = 0.9,\n                       xanchor = \"top\",\n                       x = 0.2)) \n\n\n\n\n\n\n\nRemark :\nInteractive chart makes the interpretation easier by showing the sub-categories that below 80%. -\nTherewith, eight (8) sub-categories, namely Binders, Paper, Furnishings, Phones, Storage, Accessories, Art, Chairs, are identified to account for 80% of the returned products."
  },
  {
    "objectID": "pnote/test2.html#data-wrangling",
    "href": "pnote/test2.html#data-wrangling",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Compute Frequency Count\n\n\n\n\n\n\nCompute the frequency count by “age” and “sex”.\n\n3.3.1.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_agSx <- pop_sgp %>%\n  group_by(`AG`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = order)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(pop_agSx)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n\n\n\n\n3.3.2 Create Smaller Data Frame\n\n3.3.2.1 filter rows with head( ) function\n\n\nShow the code\ntest0 <- head(pop_sgp, 5000) %>%\n  select(-c(\"SZ\", \"FA\", \"Time\"))\n\n\n\n\n3.3.2.2 specify rows\n\n\nShow the code\ntest0_1 <- pop_sgp[c(1:5000),] %>%\n  select(-c(2,5,7))\n\n\n\n\n3.3.2.3 verify outputs\n\n\nShow the code\nquestionr::freq(test0 == test0_1)\n\n\n         n   % val%\nTRUE 20000 100  100\n\n\n\n\n\n3.3.3 Group Variables\n\n3.3.3.1 count population for Planning Area\n\n\nShow the code\ntest1 <- test0 %>%\n  group_by(`PA`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  ungroup()\n\nhead(test1)\n\n\n# A tibble: 3 × 2\n  PA          Count\n  <chr>       <dbl>\n1 Ang Mo Kio 161440\n2 Bedok      278870\n3 Bishan      56380\n\n\n\n\n3.3.3.2 count population by Planning Area & Gender\n\n\nShow the code\ntest1_1 <- test0 %>%\n  group_by(`PA`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'PA'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(test1_1)\n\n\n# A tibble: 6 × 3\n  PA         Sex      Count\n  <chr>      <chr>    <dbl>\n1 Ang Mo Kio Females  84340\n2 Ang Mo Kio Males    77100\n3 Bedok      Females 143760\n4 Bedok      Males   135110\n5 Bishan     Females  28880\n6 Bishan     Males    27500\n\n\n\n\n-- create new columns manually\n\n\nShow the code\ntest1_1$male <- test1_1$Sex == \"Males\"\ntest1_1$female <- test1_1$Sex == \"Females\"\n\nhead(test1_1)\n\n\n# A tibble: 6 × 5\n  PA         Sex      Count male  female\n  <chr>      <chr>    <dbl> <lgl> <lgl> \n1 Ang Mo Kio Females  84340 FALSE TRUE  \n2 Ang Mo Kio Males    77100 TRUE  FALSE \n3 Bedok      Females 143760 FALSE TRUE  \n4 Bedok      Males   135110 TRUE  FALSE \n5 Bishan     Females  28880 FALSE TRUE  \n6 Bishan     Males    27500 TRUE  FALSE \n\n\n\n\n-- create new columns with pivot_wider ( ) function\n\n\nShow the code\ntest1_2 <- test1_1 %>%\n  pivot_wider(id_cols = PA,\n              names_from = Sex,\n              values_from = Count)\n\nhead(test1_2)\n\n\n# A tibble: 3 × 3\n  PA         Females  Males\n  <chr>        <dbl>  <dbl>\n1 Ang Mo Kio   84340  77100\n2 Bedok       143760 135110\n3 Bishan       28880  27500\n\n\n\n\n\n3.3.4 Convert Row Names for Tibbles\nThe row.names( ) function is deprecated for Tibbles.\nHence, convert tbl_df to data.frame first with as.data.frame( ) function. Then, replace the row names with .rowNamesDF( ) function.\n\n3.3.4.1 convert to data.frame\nas.data.frame - base\n\n\nShow the code\ntest1_2.df <- as.data.frame(test1_2)\n\n\n\n\n3.3.4.2 replace row names\n.rowNamesDF - base\n\n\nShow the code\n.rowNamesDF(test1_2.df, make.names = FALSE) <- test1_2$PA\n\n\n\n\n-- remove “PA”\n\n\nShow the code\ntest1_2df <- test1_2.df[-(1)]"
  },
  {
    "objectID": "pnote/test2.html#plot-pyramid-chart",
    "href": "pnote/test2.html#plot-pyramid-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npyramid_agSx <- ggplot(pop_agSx, \n                       aes(x = ifelse(Sex == \"Males\",\n                                      yes = -Count,\n                                      no = Count),\n                           y = AG,\n                           fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npyramid_agSx\n\n\n\n\n\n\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n\n\n\n\n\n\nShow the code\nggplotly(pyramid_agSx, \n         session = \"knitr\")\n\n\n\n\n\n\nRemark :\nThe pyramid above shows the younger generation’s lower percentage, making Singapore’s population structure a constrictive type. That means an ageing population.\nBy June 2022, 4.07 million residents population with a median age of 42.1,1 which is approximately a 19% increase from the median age of 35.3 back in the year 20022.\nAlso, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore’s adjusted gender pay gap (GPG) is at 6%3.\nMeasures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions."
  },
  {
    "objectID": "pnote/test3.html",
    "href": "pnote/test3.html",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "",
    "text": "This study explores the interactivity and animation methods in designing an age-gender Pyramid chart using ggplot2 and supporting R packages between 2000 and 2020 at the planning area level.\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( )."
  },
  {
    "objectID": "pnote/test3.html#load-r-packages",
    "href": "pnote/test3.html#load-r-packages",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggiraph, gganimate, gifski)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test3.html#acquire-data-source",
    "href": "pnote/test3.html#acquire-data-source",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingapore Demographic & Geographic Distribution\n\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010” data set in csv format from Singstat.gov.sg.\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020” data set in csv format from Singstat.gov.sg.\n\n\n\n\n\n\n\n\nVariable Definition :\n\n\n\n\n\n“PA” = Planning Area\n“SZ” = Subzone\n“AG” = Age Group\n“Sex” = Gender\n“TOD” = Type of Dwelling\n“Pop” = Resident Count\n“Time” = Time / Period"
  },
  {
    "objectID": "pnote/test3.html#read-rds-file",
    "href": "pnote/test3.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test3.html#standardise-data",
    "href": "pnote/test3.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "about.html#working-experiences",
    "href": "about.html#working-experiences",
    "title": "Profile",
    "section": "WORKING EXPERIENCES",
    "text": "WORKING EXPERIENCES\n\nEnvironmental Consultancy\n\nenvironmental impact assessment (EIA) consultant\n\n\n\nFood & Beverages\n\noperational management, business-startup\n\n\n\nWall & Glass Decal & Retail\n\noperational management, designer, installer\n\n\n\nSoftware Solutions Consultancy\n\nproject management, quality assurance, ui/ux design, digital marketing, account supports, business development"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Profile",
    "section": "EDUCATION",
    "text": "EDUCATION\n\nAdvanced Degree\nInstitute : Singapore Management University - SMU\nCourse : Master of IT in Business, major in Analytics | Aug 2022 - Ongoing\nSome of the Modules Undertaken :\n\nApplied Geospatial Analytics\nData Analytics Lab with JMP Pro\nSpreadsheets Modeling for Decision Making\nPython Programming & Data Analysis\nApplied Statistical Analysis with R\n\n\n\nBachelor’s Degree\nInstitute : University Malaysia Sabah - UMS\nCourse : Bachelor of Science with Honours, major in Environmental Science | July 2006 - Oct 2009\nSome of the Modules Undertaken :\n\nPhysics & Environmental Remote Sensing\nGeographical Information System & Environmental Modelling\nEnvironmental Statistics\nEnvironmental Monitoring & Assessment\nSoil Science\nEcology & Microbiology\nEnvironmental Chemistry & Chemodynamics\nAir Quality Analysis and Noise\nHydrology & Water Quality Analysis\nPollution Control Technology\nEnvironmental Health & Toxicology\nSolid & Toxic Waste Management\nNatural Resources & Environmental Management\nMacro and Micro Economy\nPrinciples of Entrepreneurship\nFrench"
  },
  {
    "objectID": "pnote/test3.html#data-preparation",
    "href": "pnote/test3.html#data-preparation",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Import Data Sets\n\n\n\n\n\n\nThis section involves two(2) functions, i.e.\n\nimport CSV file as a table data frame that retains spec attribute.\ninspect parsing error, if any, when importing the data.\n\n\n\n\n\n\n\nimport these two(2) data sets separately to identify potential parsing errors.\n\n\n\n\n\n\n\n3.2.1.1 import CSV file :: demography between 2000 and 2010\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_0010 <- read_csv(\"data/respopagesextod2000to2010.csv\")\n\n\nRows: 1040592 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_0010)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 import CSV file :: demography between 2010 and 2020\n\n\nShow the code\npop_1020 <- read_csv(\"data/respopagesextod2011to2020.csv\")\n\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_1020)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.3 inspect imported data\n\n\n\n\n\n\nUsage of the code chunk below :\nglimpse( ) - dplyr - to get a glimpse of the imported data.\n\n\n\n\n\n-- pop_0010\n\n\nShow the code\nglimpse(pop_0010, 0)\n\n\nRows: 1,040,592\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\n\n\n-- pop_1020\n\n\nShow the code\nglimpse(pop_1020, 0)\n\n\nRows: 984,656\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\nRemarks :\n\nBoth data sets do not have the same number of rows, i.e. pop_0010(1,040,592 rows) and pop_1020 (984,656 rows).\nData types for “Pop” and “Time” are in  format."
  },
  {
    "objectID": "pnote/test3.html#data-wrangling",
    "href": "pnote/test3.html#data-wrangling",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Combine Data Frames\n\n\n\n\n\n\nRows bind function will be used instead of the columns bind function as the imported data frames have an unequal number of rows.\nHowever, using rows bind function will create a data frame with file size above 100 MB which exceed the limit.\nHence, change both “Time” and “Pop” from dbl type to int type first.\n\n3.3.1.1 convert data type\n\n\n\n\n\n\nUsage of the code chunk below :\nas.integer( ) - base - to convert both Time and Pop from double object to integer object.\nmutate( ) - dplyr - to add the converted variables into the data frame.\n\n\n\n\n\nShow the code\npop_0010 <- pop_0010 %>% \n  mutate(Time = as.integer(pop_0010$Time)) %>%\n  mutate(Pop = as.integer(pop_0010$Pop))\n\npop_1020 <- pop_1020 %>% \n  mutate(Time = as.integer(pop_1020$Time)) %>%\n  mutate(Pop = as.integer(pop_1020$Pop))\n\n\n\n\n3.3.1.2 combine both data frames\n\n\n\n\n\n\nUsage of the code chunk below :\nrbind( ) - dplyr - to union two or more data frames by row.\n\n\n\n\n\nShow the code\npop_0020 <- rbind(pop_0010, pop_1020)\n\n\nRemarks :\nThe combined data frame file size is 92.7 MB.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nTo compute frequency count, first group the variables.\n\n3.3.2.1 group variables\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age, gender, time and planning area.\nsummarise( ) - dplyr - to count the number of residents for each group.\n\n\n\n\n\nShow the code\nfreq_pop0020 <- pop_0020 %>%\n  group_by(`AG`, `Sex`, `Time`, `PA`) %>%\n  summarise(Count = sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG', 'Sex', 'Time'. You can override using\nthe `.groups` argument.\n\n\n\n\n3.3.2.2 inspect combined data frame\n\n\n\n\n\n\nUsage of the code chunk below :\nkable( ) - knitr - to create tables in Markdown.\n\n\n\n\n\nShow the code\nkable(head(freq_pop0020,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n\n\n\n\n\n\n\n3.3.2.3 check data consistency\n\n\nShow the code\nfunModeling::freq(freq_pop0020$Time)\n\n\nRemarks :\nAs shown in the plot above, the data volume is not the same. There are four (4) different sets of data volume.\n\n\n\n\n\n\n3.3.2 Remove Planning Areas without Residents\n\n\n\n\n\n\nFirst identify the planning areas with 0 resident count.\n\n3.3.2.1 list “PA” without resident\n\n\n\n\n\n\nUsage of the code chunk below :\nselect( ) - dplyr - to select variables by “PA” and “Count”.\ngroup_by( ) - dplyr - to group “PA” variable.\nsummarise( ) - dplyr - to count the total number of residents from 2000 to 2020.\nfilter( ) - dplyr - to identify the planning areas with no residents.\n\n\n\n\n\nShow the code\nno_pop <- freq_pop0020 %>%\n  select(`PA`, `Count`) %>%\n  group_by(`PA`) %>%\n  summarise(`Total` = sum(`Count`)) %>%\n  filter(`Total` == 0) %>%\n  select(`PA`) %>%\n  ungroup\n\n\n\n\nShow the code\nquestionr::freq(no_pop)\n\n\n                        n   % val%\nBoon Lay                1 7.7  7.7\nBoon Lay/Pioneer        1 7.7  7.7\nCentral Water Catchment 1 7.7  7.7\nChangi Bay              1 7.7  7.7\nMarina East             1 7.7  7.7\nMarina South            1 7.7  7.7\nPaya Lebar              1 7.7  7.7\nPioneer                 1 7.7  7.7\nSimpang                 1 7.7  7.7\nStraits View            1 7.7  7.7\nTengah                  1 7.7  7.7\nTuas                    1 7.7  7.7\nWestern Islands         1 7.7  7.7\n\n\nRemarks :\n!!!!! why Paya Lebar dont have residents?\n\n\n3.3.2.2 convert variable to non-distributed vector\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - pbdDMAT - to converts a distributed matrix into a non-distributed vector.\n\n\n\n\n\nShow the code\nno_pop_list <- as.vector(no_pop$PA)\n\n\nRemarks :\n!!!!! what is distributed and non-distributed data? !!!!! why need to convert?\n\n\n3.3.2.3 remove “PA” without resident\n\n\nShow the code\npop_0020_trim <- freq_pop0020 %>%\n  filter(!PA %in% no_pop_list)\n\n\n\n\n3.3.2.4 inspect output\n\n\nShow the code\nunique(pop_0020_trim$PA[pop_0020_trim$Count == 0])\n\n\n [1] \"Lim Chu Kang\"            \"Museum\"                 \n [3] \"North-Eastern Islands\"   \"Southern Islands\"       \n [5] \"Orchard\"                 \"Seletar\"                \n [7] \"Punggol\"                 \"Downtown Core\"          \n [9] \"Western Water Catchment\" \"Changi\"                 \n[11] \"Singapore River\"         \"Mandai\"                 \n[13] \"Sungei Kadut\"            \"Newton\"                 \n[15] \"River Valley\"            \"Sembawang\"              \n[17] \"Tanglin\"                \n\n\nRemarks :\n!!!!!“PA” without residents are removed????\n\n\n\n\n\n\n3.3.3 Set Display Order & Layout\n\n\n\n\n\n\nThis section involves 2 parts, i.e. set the orders and the display layout.\n\n3.3.3.1 set the display order\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - base - to encode a vector a a factor.\narrange( ) - dplyr - to sort variable by descending order.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_0020_sort <- pop_0020_trim %>%\n  mutate(AG = factor(AG,\n                     levels = order)) %>%\n  arrange(AG)\n\n\n\n\n3.3.3.2 set the display layout\n\n\n\n\n\n\nUsage of the code chunk below :\nifelse( ) - base - to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npop_0020_sort$nCount = ifelse(pop_0020_sort$Sex == \"Males\",\n                               yes = -pop_0020_sort$Count,\n                               no = pop_0020_sort$Count)\n\n\n\n\n-- inspect output\n\n\nShow the code\nkable(head(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n\n\n\nShow the code\nkable(tail(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180"
  },
  {
    "objectID": "pnote/test3.html#data-wrangling-1",
    "href": "pnote/test3.html#data-wrangling-1",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "4.2 Data Wrangling",
    "text": "4.2 Data Wrangling\nBy default, the values of the data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dpackage.\nNext, ifelse() was used to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop0020 <- new_pop0020 %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nsorted_pop0020$nCount = ifelse(sorted_pop0020$Sex == \"Males\", \n                                 yes = -sorted_pop0020$Count, \n                                 no = sorted_pop0020$Count)\n\nkable(head(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n0_to_4\nFemales\n2000\nBishan\n2560\n2560\n\n\n0_to_4\nFemales\n2000\nBukit Batok\n4400\n4400\n\n\n0_to_4\nFemales\n2000\nBukit Merah\n3240\n3240\n\n\n0_to_4\nFemales\n2000\nBukit Panjang\n3690\n3690\n\n\n\n\n\n\n\nShow the code\nkable(tail(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nTampines\n310\n-310\n\n\n90_and_over\nMales\n2020\nTanglin\n50\n-50\n\n\n90_and_over\nMales\n2020\nToa Payoh\n340\n-340\n\n\n90_and_over\nMales\n2020\nWestern Water Catchment\n0\n0\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180"
  },
  {
    "objectID": "pnote/test3.html#plot-pyramid-chart",
    "href": "pnote/test3.html#plot-pyramid-chart",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid"
  },
  {
    "objectID": "pnote/test3.html#by-year",
    "href": "pnote/test3.html#by-year",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "5.1 By Year",
    "text": "5.1 By Year\n\nANIMATED AGE-SEX PYRAMID\nThe first visualisation plotted is an animation of Singapore's Total Population from 2000 to 2020.\nFor this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using gganimate library, the static plot was converted into an animated pyramid via transition_time() and ease_aes() function. A moving subtitle was also included to relay the correct year information to the viewer.\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\nfig <-\n  ggplot(sorted_pop0020, aes(x = nCount, y = AG, fill = Sex)) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", \n        y = \"Age Group\", \n        title='Singapore Age-Sex Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\n\nfig + \n  transition_time(Time) +\n  ease_aes('linear') +\n  labs (subtitle = 'Year: {frame_time}')\n\n\n\n\n\nRemark :"
  },
  {
    "objectID": "pnote/test3.html#by-year-and-planning-location",
    "href": "pnote/test3.html#by-year-and-planning-location",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "5.2 By Year and Planning Location",
    "text": "5.2 By Year and Planning Location\nNext, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.\n\nDEFINE TIME AND PLANNING AREA\nThe time and planning area for each unique instance were defined using a for loop. The annotation variables for the drop down menu was also defined.\n\n\nShow the code\nyear_list <- list()\nfor (i in 1:length(unique(sorted_pop0020$Time))) { \n  year_list[[i]] <- list(method = \"restyle\",\n                         args = list(\"transforms[0].value\", unique(sorted_pop0020$Time)[i]),\n                         label = unique(sorted_pop0020$Time)[i])\n}\n\nPA_list <- list()\nfor (j in 1:length(unique(sorted_pop0020$PA))) { \n  PA_list[[j]] <- list(method = \"restyle\",\n                        args = list(\"transforms[1].value\", unique(sorted_pop0020$PA)[j]),\n                        label = unique(sorted_pop0020$PA)[j])\n}\n\nannot <- list(list(text = \"Select Planning Area:\",\n                   x = 1.61,\n                   y = 0.78,\n                   xref = 'paper',\n                   yref = 'paper',\n                   showarrow = FALSE))\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n** INTERACTIVE GRAPH WITH SLIDER AND DROPDOWN MENU**\nAn interactive graph was then generated using plotly(). A tooltip was added using the hovertemplate function to include age group, gender and population count.\nThe transforms - filter function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, layout - Updatemenus and layout - Sliders was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(sorted_pop0020, \n        x = ~nCount, \n        y = ~AG,\n        type = 'bar', \n        orientation = 'h',\n        hovertemplate = ~paste(\"<br>Age Group:\", AG,\n                               \"<br>Gender:\", Sex,\n                               \"<br>Population:\", Count),\n        color = ~Sex,\n        colors = c(\"lightpink\", \"lightblue\"),\n        transforms = list(list(type = 'filter',\n                               target = ~Time,\n                               operation = '=',\n                               value = unique(sorted_pop0020$Time)[1]),\n                          list(type = 'filter',\n                               target = ~PA,\n                               operation = '=',\n                               value = unique(sorted_pop0020$PA)[1]))\n                          )%>%\n  layout(autosize = F, bargap = 0.1, barmode = 'overlay',\n         xaxis = list(title = \"Population\",\n                      tickmode = 'array', tickvals = c(-10000, -8000, -6000, -4000, -2000, 0, \n                                                       2000, 4000, 6000, 8000, 10000),\n                      ticktext = c('10k', '8k', '6k', '4k', '2k', '0', \n                                   '2k', '4k', '6k', '8k', '10k')),\n         yaxis = list(title = \"Age Group\"),\n         title = 'Singapore Age-Sex Population Pyramid',\n         updatemenus = list(list(type = 'dropdown',\n                                 x = 1.6, y = 0.7,\n                                 buttons = PA_list)\n                            ),\n         sliders = list(list(\n                          active = 1, \n                          currentvalue = list(prefix = \"Year: \"), \n                          pad = list(t = 60), \n                          steps = year_list)), \n         annotations = annot)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test3.html#tableau-vs.-r",
    "href": "pnote/test3.html#tableau-vs.-r",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "5.1 Tableau vs. R",
    "text": "5.1 Tableau vs. R\n\nAnimations and interactivity in Tableau can easily be generated by a few clicks, whereas it requires more code and hence more tedious in R. However, this also means that visualisation in R is reproducible and repeatable as the steps can be traced back.\nR allows for more customisation of the visualisations as compared to Tableau. For example, the names widgets can be easily modified to detailed levels, whereas Tableau only takes in the data from the Table.\nThe animation in R may require more customisation to achieve less jerky animation as compared to Tableau."
  },
  {
    "objectID": "pnote/test0.html",
    "href": "pnote/test0.html",
    "title": "Explore with Geospatial Data",
    "section": "",
    "text": "Exploring R functions for visual analytics, and their applications."
  },
  {
    "objectID": "pnote/test0.html#load-r-packages",
    "href": "pnote/test0.html#load-r-packages",
    "title": "Explore with Geospatial Data",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, sf, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork, gplots)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test0.html#acquire-data-source",
    "href": "pnote/test0.html#acquire-data-source",
    "title": "Explore with Geospatial Data",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nNigeria water points dataset. Its a wrangled data from Geospatial Analytics module ."
  },
  {
    "objectID": "pnote/test0.html#read-rds-file",
    "href": "pnote/test0.html#read-rds-file",
    "title": "Explore with Geospatial Data",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_joined.sf <- read_rds(\"data/geodata/wp_joined.sf.rds\")\n\n\nwpt_functional.sf <- read_rds(\"data/geodata/wpt_functional.sf.rds\")\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")"
  },
  {
    "objectID": "pnote/test0.html#standardise-data",
    "href": "pnote/test0.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html#summary-of-r-functions",
    "href": "pnote/test1.html#summary-of-r-functions",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test1.html#base",
    "href": "pnote/test1.html#base",
    "title": "Exploration 1 - Pareto Chart",
    "section": "base :",
    "text": "base :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test3.html#summary-of-r-functions",
    "href": "pnote/test3.html#summary-of-r-functions",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test3.html#sort-data",
    "href": "pnote/test3.html#sort-data",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "3.3.4 Sort Data",
    "text": "3.3.4 Sort Data\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\narrange( ) - dpackage - to select variables by “PA” and “Count”.\nifelse( ) - base - to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.\n\n\n\nBy default, the values of the data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dpackage.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop0020 <- new_pop0020 %>%\n  mutate(AG =  factor(AG, \n                      levels = order)) %>%\n  arrange(AG)\n\nsorted_pop0020$nCount = ifelse(sorted_pop0020$Sex == \"Males\", \n                                 yes = -sorted_pop0020$Count, \n                                 no = sorted_pop0020$Count)\n\nkable(head(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n0_to_4\nFemales\n2000\nBishan\n2560\n2560\n\n\n0_to_4\nFemales\n2000\nBukit Batok\n4400\n4400\n\n\n0_to_4\nFemales\n2000\nBukit Merah\n3240\n3240\n\n\n0_to_4\nFemales\n2000\nBukit Panjang\n3690\n3690\n\n\n\n\n\nRemarks :\n\n\nShow the code\nkable(tail(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nTampines\n310\n-310\n\n\n90_and_over\nMales\n2020\nTanglin\n50\n-50\n\n\n90_and_over\nMales\n2020\nToa Payoh\n340\n-340\n\n\n90_and_over\nMales\n2020\nWestern Water Catchment\n0\n0\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180\n\n\n\n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test3.html#plot-animated-pyramid-chart",
    "href": "pnote/test3.html#plot-animated-pyramid-chart",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "4.1 Plot Animated Pyramid Chart",
    "text": "4.1 Plot Animated Pyramid Chart\n\n4.1.1 Plot Population from 2000 to 2020\n\n\n\n\n\n\nFor this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using gganimate library, the static plot was converted into an animated pyramid via transition_time() and ease_aes() function. A moving subtitle was also included to relay the correct year information to the viewer.\n\n\n\n\n\n\nUsage of the code chunk below :\ntransition_time( ) - gganimate - to display the data that represented specific point in time.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\nanime_pyramid <- ggplot(pop_0020_sort,\n                        aes(x = nCount,\n                            y = AG, \n                            fill = Sex)) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, \n                                  150000, \n                                  50000), \n                     labels = paste0(\n                       as.character(c(seq(150, 0, -50),\n                                      seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age Group\", \n        title = 'Singapore Age-Gender Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\"))\n\n\n\n\nShow the code\nanime_pyramid + \n  transition_time(Time) +\n  ease_aes('linear') +\n  labs (subtitle = 'Year: {frame_time}')\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot by Year and Planning Location\n\n\n\n\n\n\nNext, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.\n\n4.1.2.1 define time & planning area\nDefine the time and planning area for each unique instance using a for loop.\n\n\nShow the code\nyear_list <- list()\nfor (i in 1:length(\n  unique(\n    pop_0020_sort$Time))) \n  {year_list[[i]] <- list(method = \"restyle\",\n                          args = list(\"transforms[0].value\",\n                                      unique(pop_0020_sort$Time)[i]),\n                          label = unique(pop_0020_sort$Time)[i])\n  }\n\nPA_list <- list()\nfor (j in 1:length(unique(pop_0020_sort$PA))) { \n  PA_list[[j]] <- list(method = \"restyle\",\n                        args = list(\"transforms[1].value\", \n                                    unique(pop_0020_sort$PA)[j]),\n                        label = unique(pop_0020_sort$PA)[j])\n  }\n\n\n\n\n4.1.2.2 define drop down menu\n\n\nShow the code\nannot <- list(\n  list(text = \"Select Planning Area:\",\n       x = 1.61,\n       y = 0.78,\n       xref = 'paper',\n       yref = 'paper',\n       showarrow = FALSE))\n\n\n\n\n4.1.2.3 plot with widget\nAn interactive graph was then generated using plotly(). A tooltip was added using the hovertemplate function to include age group, gender and population count.\nThe transforms - filter function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, layout - Updatemenus and layout - Sliders was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to initiate a plotly visualisation.\n\n\n\n\n\nShow the code\nplot_ly(pop_0020_sort, \n        x = ~nCount, \n        y = ~AG,\n        type = 'bar', \n        orientation = 'h',\n        hovertemplate = ~paste(\"<br>Age Group:\", AG,\n                               \"<br>Gender:\", Sex,\n                               \"<br>Population:\", Count),\n        color = ~Sex,\n        colors = c(\"lightpink\", \"lightblue\"),\n        transforms = list(\n          list(type = 'filter',\n               target = ~Time,\n               operation = '=',\n               value = unique(pop_0020_sort$Time)[1]),\n          list(type = 'filter',\n               target = ~PA,\n               operation = '=',\n               value = unique(pop_0020_sort$PA)[1]))) %>%\n  layout(autosize = F, \n         bargap = 0.1, \n         barmode = 'overlay',\n         xaxis = list(\n           title = \"Population\",\n           tickmode = 'array', \n           tickvals = c(-10000, -8000, -6000, -4000, -2000, \n                        0, 2000, 4000, 6000, 8000, 10000),\n           ticktext = c('10k', '8k', '6k', '4k', '2k', '0',\n                        '2k', '4k', '6k', '8k', '10k')),\n         yaxis = list(\n           title = \"Age Group\"),\n         title = 'Singapore Age-Sex Population Pyramid',\n         updatemenus = list(\n           list(type = 'dropdown',\n                x = 1.6, \n                y = 0.7,\n                buttons = PA_list)),\n         sliders = list(\n           list(\n             active = 1,\n             currentvalue = list(prefix = \"Year: \"),\n             pad = list(t = 60),\n             steps = year_list)),\n         annotations = annot)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test5.html",
    "href": "pnote/test5.html",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "",
    "text": "This study explores the creation of a time-series visualisation with a subject matter focus on the COVID-19 impact on the stock prices of the top 40 companies in Singapore.\n\n\n\n\n\n\nVisualisation at daily or weekly data :\n\n\n\n\n\nDaily or weekly depends on the end users to this analysis output. For users whose cash flow unable to move fast enough would prefer weekly data, otherwise daily data.\nWeekly data helps to focus on the predominant longer-term trend, without being distracted by the “noise” and daily fluctuations.\nThe greatest challenge is to plot a comprehensible daily chart.\n\n\n\n\n\n\n\n\n\nLack of domain knowledge :\n\n\n\n\n\nExtra readings required to understand the financial terms and technical standards for stock market price monitoring."
  },
  {
    "objectID": "pnote/test5.html#load-r-packages",
    "href": "pnote/test5.html#load-r-packages",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, tidyquant, lubridate, ggthemes, data.table, ggHoriPlot)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test5.html#summary-of-r-functions",
    "href": "pnote/test5.html#summary-of-r-functions",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test5.html#acquire-data-source",
    "href": "pnote/test5.html#acquire-data-source",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\ncompaniesmarketcap.com market-capitalisation\n\nDownload “total market cap” data set."
  },
  {
    "objectID": "pnote/test5.html#import-data",
    "href": "pnote/test5.html#import-data",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nsgp_marketCap <- read_csv(\"data/sgp_marketcap.csv\")\n\n\nRows: 53 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Symbol, country\ndbl (3): Rank, marketcap, price (USD)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(sgp_marketCap)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(sgp_marketCap,0)\n\n\nRows: 53\nColumns: 6\n$ Rank          <dbl> …\n$ Name          <chr> …\n$ Symbol        <chr> …\n$ marketcap     <dbl> …\n$ `price (USD)` <dbl> …\n$ country       <chr> …\n\n\n\n\nShow the code\nkable(head(sgp_marketCap,5))\n\n\n\n\n\nRank\nName\nSymbol\nmarketcap\nprice (USD)\ncountry\n\n\n\n\n1\nDBS Group\nD05.SI\n66770694229\n25.94\nSingapore\n\n\n2\nOCBC Bank\nO39.SI\n41736766443\n9.28\nSingapore\n\n\n3\nUOB\nU11.SI\n38709263592\n23.12\nSingapore\n\n\n4\nSea (Garena)\nSE\n31271952384\n55.67\nSingapore\n\n\n5\nSingtel\nZ74.SI\n31067209219\n1.88\nSingapore\n\n\n\n\n\n\n\n\n\n\n3.2.3 Filter Top40 Companies\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhead( ) - utils - to return the top 40 companies.\n\n\n\n\n\nShow the code\ntop40 <- head(sgp_marketCap, 40) %>%\n  select(-c(1, 4:6)) %>%\n  rename(symbol = Symbol) %>%\n  rename(name = Name)"
  },
  {
    "objectID": "pnote/test5.html#data-wrangling",
    "href": "pnote/test5.html#data-wrangling",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Create Non-Distributed Vector List\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - pbdDMAT - to convert “name” and “symbol” into a non-distributed vectors.\n\n\n\n\n\nShow the code\nvector_name.list <- as.vector(top40$name)\nvector_symbol.list <- as.vector(top40$symbol)\n\n\n\n\n\n\n\n3.3.2 Extract Stock Information\n\n\n\n\n\n\nThe prices that retrieved with tq_get() is different from the prices displayed on the website. But there is no metadata to verify this differences. Hence, identify this matter first prior to analyse the data.\n\n3.3.2.1 clarify price difference\n\n\n\n\n\n\nUsage of the code chunk below :\ntq_get( ) - tidyquant - to get the quantitative stock data in tibble format.\ntq_transmute( ) - tidyquant - to get weekly data.\n\n\n\n\n\nShow the code\ntest0 = tq_get(vector_symbol.list,\n                      get = \"stock.prices\",\n                      from = \"2022-12-01\",\n                      to = \"2023-01-06\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"weeks\")\n\nkable(head(test0))\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\n\n\n\n\nD05.SI\n2022-12-02\n34.75\n34.85\n34.47\n34.47\n3468700\n34.47\n\n\nD05.SI\n2022-12-09\n33.33\n33.46\n33.31\n33.39\n2777100\n33.39\n\n\nD05.SI\n2022-12-16\n33.80\n34.13\n33.76\n33.84\n4953300\n33.84\n\n\nD05.SI\n2022-12-23\n34.00\n34.23\n33.98\n34.04\n1341300\n34.04\n\n\nD05.SI\n2022-12-30\n34.00\n34.08\n33.76\n33.92\n1820100\n33.92\n\n\nD05.SI\n2023-01-05\n34.60\n34.89\n34.37\n34.78\n5529800\n34.78\n\n\n\n\n\nRemarks :\nThe price for DBS Group, dated January 5, 2023, indicated on the companiesmarketcap.com website, was USD$25.94. But this value is unable to match any retrieved prices, as shown above.\nBased on the exchange rate between 1SGD and UGD dated January 5, 2023, 0930 UTC, which is 1730 pm Singapore time (the SGX trading hours ceased by then, so the closing price should not be far off from the currency exchanged), it was $0.746082.\nHence, dividing USD$25.94 by $0.746082 will get SGD$34.77, which is close to the adjusted closing price, i.e. $34.78, as shown above, which can be verified with Yahoo data to ensure there is no parsing error.\n\n\n3.3.2.2 extract stock data\n\n\n\n\n\n\nThe “from” date will need to be set before December 27, 2019, if January 3, 2020, data is crucial for analysis. Else, the value of the first row will have “NA” when computing the change rate.\n\n\n\n\n\nShow the code\nstock_week = tq_get(vector_symbol.list,\n                      get = \"stock.prices\",\n                      from = \"2020-01-01\",\n                      to = \"2021-12-31\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"weeks\")\n\nkable(head(stock_week))\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\n\n\n\n\nD05.SI\n2020-01-03\n26.17\n26.32\n25.83\n26.00\n4336600\n22.52781\n\n\nD05.SI\n2020-01-10\n26.00\n26.12\n25.92\n26.00\n7869500\n22.52781\n\n\nD05.SI\n2020-01-17\n26.45\n26.45\n26.32\n26.35\n2347500\n22.83106\n\n\nD05.SI\n2020-01-24\n26.37\n26.38\n26.16\n26.20\n1474500\n22.70110\n\n\nD05.SI\n2020-01-31\n25.62\n25.65\n25.20\n25.37\n8167400\n21.98194\n\n\nD05.SI\n2020-02-07\n25.57\n25.65\n25.21\n25.31\n5097800\n21.92995\n\n\n\n\n\nRemarks :\nThe data is based on every week Sunday. However, the trading hours for Singapore Exchange (SGX) is between Monday to Friday.\n“open” = the opening value of a day.\n“close” = the closing value of a day.\n“adjusted” = adjusted closing price refers to the price of the stock after paying off the dividends. Often used to examine historical returns or analyse past performance.\n“open” and “close” are far apart it shows strong momentum, otherwise may suggest indecision or weak momentum.1\n“high” and “low” are useful to assess volatility of a stock price.\n\n\n3.3.2.3 save RDS file\n\n\nShow the code\nwrite_rds(stock_week, \"data/stock_week.rds\")\n\n\n\n\n3.3.2.4 read RDS file\n\n\nShow the code\nstock_week <- read_rds(\"data/stock_week.rds\")\n\n\n\n\n\n\n\n\n3.3.3 Compute Rate of Change\n\n\n\n\n\n\nThe Rate of Change (ROC) represents the momentum of a variable over a defined period. A positive ROC typically means the stock outperforms the market within the past 2 weeks.\n“roc” will be derived by dividing the current “adjusted” price by the previous “adjusted price”. Next, deduct 1 before multiplying the final value by 100.\n\n\nShow the code\nstock_week$roc <- ((stock_week$adjusted/shift(stock_week$adjusted))-1)*100\n\n\n\n\n\n\n\n3.3.4 Merge Data Frames\n\n\n\n\n\n\nUsers unfamiliar with the Singapore stock market may not be able to identify companies easily based on “symbol” value. Hence, to display the “name” on the y-axis, the “name” from top40 will need to be merged with stock_week.\n\n\n\n\n\n\nUsage of the code chunk below :\nmerge( ) - base - to merge stock_week data frame and top40 data frame by “symbol” variable.\n\n\n\n\n\nShow the code\nstock_week <- merge(stock_week,\n                    top40,\n                    by = 'symbol')\n\nkable(head(stock_week))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\nroc\nname\n\n\n\n\n2588.HK\n2020-01-03\n78.75\n78.95\n77.90\n78.20\n517909\n69.56584\n255.2765708\nBOC Aviation\n\n\n2588.HK\n2020-01-10\n72.45\n75.20\n72.35\n74.35\n2092454\n66.14094\n-4.9232553\nBOC Aviation\n\n\n2588.HK\n2020-01-17\n74.90\n75.00\n74.25\n74.70\n482330\n66.45229\n0.4707448\nBOC Aviation\n\n\n2588.HK\n2020-01-24\n71.65\n72.65\n71.60\n72.55\n311990\n64.53967\n-2.8781851\nBOC Aviation\n\n\n2588.HK\n2020-01-31\n71.50\n72.55\n71.35\n71.80\n692375\n63.87249\n-1.0337626\nBOC Aviation\n\n\n2588.HK\n2020-02-07\n75.60\n75.60\n74.55\n75.05\n395475\n66.76365\n4.5264607\nBOC Aviation\n\n\n\n\n\n\n3.3.4.1 encode vector to factor\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - base - to encode a vector as a factor.\n\n\n\n\n\nShow the code\nstock_week <- stock_week %>%\n  mutate(name = factor(name,\n                       levels = vector_name.list))"
  },
  {
    "objectID": "pnote/test5.html#section",
    "href": "pnote/test5.html#section",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.4",
    "text": "3.4"
  },
  {
    "objectID": "pnote/test4.html",
    "href": "pnote/test4.html",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "",
    "text": "This study explores the visualisation of multidimensional data from Starbucks drinks.\n!!!!! Questions\n\nhow missing data affect the plots?\n\n\n\n\n\n\n\nData Wrangling Challenges :\n\n\n\n\n\n\nSome values have a special character, “+”, while others are presented as range values.\nOnly specific drinks are duplicated.\n\nmanually remove the special character and use loop with ifelse( ) function to replace the range value with the max of range value.\n\n\n\n\n\n\n\n\n\nNormalise Character Type Variable :\n\n\n\n\n\nSince the nutritional value is different according to the sizes and volumes. Hence, the milk type and whipped cream must be normalised by volume before plotting the heatmap."
  },
  {
    "objectID": "pnote/test4.html#load-r-packages",
    "href": "pnote/test4.html#load-r-packages",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, ggplot2, ggcorrplot, corrplot, ggstatsplot, heatmaply, dendextend, parallelPlot, factoextra, psych)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test4.html#summary-of-r-functions",
    "href": "pnote/test4.html#summary-of-r-functions",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test4.html#acquire-data-source",
    "href": "pnote/test4.html#acquire-data-source",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nKaggle Starbucks nutrition data set\n\nDownload “starbucks_drink.csv” data set."
  },
  {
    "objectID": "pnote/test4.html#import-data",
    "href": "pnote/test4.html#import-data",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\ndrink <- read_csv(\"data/starbucks_drink.csv\")\n\n\nRows: 2068 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Category, Name, Caffeine(mg), Size, Milk, Whipped Cream\ndbl (12): Portion(fl oz), Calories, Calories from fat, Total Fat(g), Saturat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(drink)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(drink,0)\n\n\nRows: 2,068\nColumns: 18\n$ Category                <chr> …\n$ Name                    <chr> …\n$ `Portion(fl oz)`        <dbl> …\n$ Calories                <dbl> …\n$ `Calories from fat`     <dbl> …\n$ `Total Fat(g)`          <dbl> …\n$ `Saturated fat(g)`      <dbl> …\n$ `Trans fat(g)`          <dbl> …\n$ `Cholesterol(mg)`       <dbl> …\n$ `Sodium(mg)`            <dbl> …\n$ `Total Carbohydrate(g)` <dbl> …\n$ `Dietary Fiber(g)`      <dbl> …\n$ `Sugars(g)`             <dbl> …\n$ `Protein(g)`            <dbl> …\n$ `Caffeine(mg)`          <chr> …\n$ Size                    <chr> …\n$ Milk                    <chr> …\n$ `Whipped Cream`         <chr> …\n\n\n\n\nShow the code\nskimr::skim(drink)\n\n\n\nData summary\n\n\nName\ndrink\n\n\nNumber of rows\n2068\n\n\nNumber of columns\n18\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n12\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCategory\n0\n1.00\n3\n29\n0\n10\n0\n\n\nName\n0\n1.00\n10\n54\n0\n119\n0\n\n\nCaffeine(mg)\n0\n1.00\n1\n6\n0\n76\n0\n\n\nSize\n12\n0.99\n4\n11\n0\n7\n0\n\n\nMilk\n271\n0.87\n6\n19\n0\n6\n0\n\n\nWhipped Cream\n813\n0.61\n9\n16\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPortion(fl oz)\n0\n1\n16.22\n5.64\n8\n12.0\n16.00\n20\n30.0\n▇▆▂▃▁\n\n\nCalories\n0\n1\n223.37\n136.72\n0\n117.5\n210.00\n320\n650.0\n▇▇▆▃▁\n\n\nCalories from fat\n0\n1\n55.33\n50.69\n0\n15.0\n40.00\n90\n240.0\n▇▃▂▁▁\n\n\nTotal Fat(g)\n0\n1\n6.13\n5.63\n0\n1.5\n4.50\n10\n27.0\n▇▃▂▁▁\n\n\nSaturated fat(g)\n0\n1\n3.51\n3.73\n0\n0.0\n2.25\n6\n18.0\n▇▃▁▁▁\n\n\nTrans fat(g)\n0\n1\n0.02\n0.09\n0\n0.0\n0.00\n0\n0.5\n▇▁▁▁▁\n\n\nCholesterol(mg)\n0\n1\n14.31\n17.48\n0\n0.0\n5.00\n25\n75.0\n▇▂▂▁▁\n\n\nSodium(mg)\n0\n1\n153.52\n103.18\n0\n70.0\n150.00\n230\n490.0\n▇▇▅▂▁\n\n\nTotal Carbohydrate(g)\n0\n1\n37.08\n23.39\n0\n19.0\n35.00\n53\n99.0\n▇▇▆▃▁\n\n\nDietary Fiber(g)\n0\n1\n0.85\n1.33\n0\n0.0\n0.00\n1\n7.0\n▇▁▁▁▁\n\n\nSugars(g)\n0\n1\n34.48\n22.31\n0\n17.0\n32.00\n49\n93.0\n▇▇▆▃▁\n\n\nProtein(g)\n0\n1\n5.18\n4.44\n0\n2.0\n4.00\n7\n19.0\n▇▆▂▂▁\n\n\n\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:5, 15:18)]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nPortion(fl oz)\nCalories\nCalories from fat\nCaffeine(mg)\nSize\nMilk\nWhipped Cream\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n160\n25\n40–60\nVenti Iced\nAlmond\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n35\n40–60\nVenti Iced\nCoconut\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n0\n40–60\nVenti Iced\nNonfat milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n230\n50\n40–60\nVenti Iced\nWhole Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n35\n40\nVenti Iced\n2% Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n25\n40–60\nVenti Iced\nSoy (United States)\nNA\n\n\n\n\n\n\n\nShow the code\nquestionr::freq(unique(drink$`Caffeine(mg)`))\n\n\n       n   % val%\n0      1 1.3  1.3\n0–15   1 1.3  1.3\n10     1 1.3  1.3\n100    1 1.3  1.3\n110    1 1.3  1.3\n115    1 1.3  1.3\n120    1 1.3  1.3\n125    1 1.3  1.3\n130    1 1.3  1.3\n140    1 1.3  1.3\n145    1 1.3  1.3\n15     1 1.3  1.3\n15–20  1 1.3  1.3\n15–25  1 1.3  1.3\n150    1 1.3  1.3\n155    1 1.3  1.3\n165    1 1.3  1.3\n170    1 1.3  1.3\n175    1 1.3  1.3\n180    1 1.3  1.3\n185    1 1.3  1.3\n190    1 1.3  1.3\n195    1 1.3  1.3\n20     1 1.3  1.3\n20–25  1 1.3  1.3\n200    1 1.3  1.3\n205    1 1.3  1.3\n215    1 1.3  1.3\n225    1 1.3  1.3\n235    1 1.3  1.3\n240    1 1.3  1.3\n25     1 1.3  1.3\n25–30  1 1.3  1.3\n25–40  1 1.3  1.3\n255    1 1.3  1.3\n260    1 1.3  1.3\n265    1 1.3  1.3\n270    1 1.3  1.3\n275    1 1.3  1.3\n280    1 1.3  1.3\n290    1 1.3  1.3\n30     1 1.3  1.3\n30–35  1 1.3  1.3\n300    1 1.3  1.3\n310    1 1.3  1.3\n315    1 1.3  1.3\n320    1 1.3  1.3\n330    1 1.3  1.3\n340    1 1.3  1.3\n35     1 1.3  1.3\n35–45  1 1.3  1.3\n360    1 1.3  1.3\n375    1 1.3  1.3\n40     1 1.3  1.3\n40–45  1 1.3  1.3\n40–60  1 1.3  1.3\n40+    1 1.3  1.3\n410    1 1.3  1.3\n425    1 1.3  1.3\n445    1 1.3  1.3\n45     1 1.3  1.3\n45–55  1 1.3  1.3\n475    1 1.3  1.3\n5–85   1 1.3  1.3\n50     1 1.3  1.3\n50–55  1 1.3  1.3\n55     1 1.3  1.3\n65     1 1.3  1.3\n70     1 1.3  1.3\n70–85  1 1.3  1.3\n75     1 1.3  1.3\n80     1 1.3  1.3\n85     1 1.3  1.3\n90     1 1.3  1.3\n90–110 1 1.3  1.3\n95     1 1.3  1.3\n\n\nShow the code\nquestionr::freq(unique(drink$`Trans fat(g)`))\n\n\n    n  % val%\n0   1 50   50\n0.5 1 50   50\n\n\nShow the code\nquestionr::freq(unique(drink$Size))\n\n\n            n    % val%\nGrande      1 12.5 14.3\nKids        1 12.5 14.3\nShort       1 12.5 14.3\nTall        1 12.5 14.3\nTrenta Iced 1 12.5 14.3\nVenti       1 12.5 14.3\nVenti Iced  1 12.5 14.3\nNA          1 12.5   NA\n\n\nShow the code\nquestionr::freq(unique(drink$Milk))\n\n\n                    n    % val%\n2% Milk             1 14.3 16.7\nAlmond              1 14.3 16.7\nCoconut             1 14.3 16.7\nNonfat milk         1 14.3 16.7\nSoy (United States) 1 14.3 16.7\nWhole Milk          1 14.3 16.7\nNA                  1 14.3   NA\n\n\nShow the code\nquestionr::freq(unique(drink$`Whipped Cream`))\n\n\n                 n  % val%\nNo Whipped Cream 1 20   25\nSweetened        1 20   25\nUnsweetened      1 20   25\nWhipped Cream    1 20   25\nNA               1 20   NA\n\n\n\n\nShow the code\nlength(drink$Name)\n\n\n[1] 2068\n\n\nShow the code\nquestionr::freq(drink$`Whipped Cream`)\n\n\n                   n    % val%\nNo Whipped Cream 539 26.1 42.9\nSweetened         90  4.4  7.2\nUnsweetened       92  4.4  7.3\nWhipped Cream    534 25.8 42.5\nNA               813 39.3   NA\n\n\nShow the code\nquestionr::freq(drink$Milk)\n\n\n                      n    % val%\n2% Milk             301 14.6 16.8\nAlmond              293 14.2 16.3\nCoconut             300 14.5 16.7\nNonfat milk         301 14.6 16.8\nSoy (United States) 301 14.6 16.8\nWhole Milk          301 14.6 16.8\nNA                  271 13.1   NA\n\n\nShow the code\nquestionr::freq(drink$Size)\n\n\n              n    % val%\nGrande      583 28.2 28.4\nKids         34  1.6  1.7\nShort       206 10.0 10.0\nTall        583 28.2 28.4\nTrenta Iced  73  3.5  3.6\nVenti       218 10.5 10.6\nVenti Iced  359 17.4 17.5\nNA           12  0.6   NA\n\n\n\n\nShow the code\ndrink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\n# A tibble: 242 × 19\n   Categ…¹ Name  Porti…² Calor…³ Calor…⁴ Total…⁵ Satur…⁶ Trans…⁷ Chole…⁸ Sodiu…⁹\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 iced-c… Cold…      12      50       0       0       0       0       0      25\n 2 iced-c… Cold…      12      50       0       0       0       0       0      25\n 3 iced-c… Cold…      16      80       0       0       0       0       0      30\n 4 iced-c… Cold…      16      80       0       0       0       0       0      30\n 5 iced-c… Cold…      24     100       0       0       0       0       0      40\n 6 iced-c… Cold…      24     100       0       0       0       0       0      40\n 7 iced-c… Cold…      30     130       0       0       0       0       0      45\n 8 iced-c… Cold…      30     130       0       0       0       0       0      45\n 9 iced-c… Iced…      12       0       0       0       0       0       0       0\n10 iced-c… Iced…      12       0       0       0       0       0       0       0\n# … with 232 more rows, 9 more variables: `Total Carbohydrate(g)` <dbl>,\n#   `Dietary Fiber(g)` <dbl>, `Sugars(g)` <dbl>, `Protein(g)` <dbl>,\n#   `Caffeine(mg)` <chr>, Size <chr>, Milk <chr>, `Whipped Cream` <chr>,\n#   dupe_count <int>, and abbreviated variable names ¹​Category,\n#   ²​`Portion(fl oz)`, ³​Calories, ⁴​`Calories from fat`, ⁵​`Total Fat(g)`,\n#   ⁶​`Saturated fat(g)`, ⁷​`Trans fat(g)`, ⁸​`Cholesterol(mg)`, ⁹​`Sodium(mg)`\n\n\nRemarks :\n\n“Caffein(mg)” variable consist of mixed values including absolute and values in range.\nThere are 121 rows of duplicated data.\nOut of 2,068 drinks, more than 10% of “Whipped Cream” and “Milk” are missing."
  },
  {
    "objectID": "pnote/test4.html#data-wrangling",
    "href": "pnote/test4.html#data-wrangling",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Edit “Caffeine(mg)” Variable\n\n\n\n\n\n\nFirst remove special character, then replace the range values with the maximum value.\n\n3.3.1.1 remove special character\nRemove special character from ‘40+’.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"][drink[\"Caffeine(mg)\"] == '40+'] <- '40'\n\n\n\n\n3.3.1.2 update with for-loop function\n\n\nShow the code\nfor (i in 1:nrow(drink)) {\n  drink[i, \"Caffeine(mg)\"] <- ifelse(\n    grepl(\"–\", \n          drink[i,\n                \"Caffeine(mg)\"]),\n    substr(drink[i, \n                 \"Caffeine(mg)\"],\n           nchar(\n             drink[i, \n                   \"Caffeine(mg)\"])-1,\n           nchar(\n             drink[i,\n                   \"Caffeine(mg)\"])),\n    drink[i, \n          \"Caffeine(mg)\"])\n  }\n\n\n\n\n3.3.1.3 convert variable type\nChange the variable to numeric data type.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"] <- as.numeric(unlist(drink[\"Caffeine(mg)\"]))\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:2, 15)],3))\n\n\n\n\n\nCategory\nName\nCaffeine(mg)\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\ntea\nIced Teavana® London Fog Tea Latte\n40\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\n\n\n\nRemarks :\n\n\n\n\n\n\n3.3.2 Remove Duplication\n\n\n\n\n\n\n3.3.2.1 filter duplicated data\n\n\n\n\n\nShow the code\nduplication <- drink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\nShow the code\nduplication <- duplication %>%\n  filter(duplicated(duplication) == TRUE)\n\n\n\n3.3.2.2 remove duplicated data\n\n\nShow the code\ndrink_clean <- drink[!duplicated(drink),]"
  },
  {
    "objectID": "pnote/test4.html#create-new-dataframe",
    "href": "pnote/test4.html#create-new-dataframe",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.4 Create New Dataframe",
    "text": "3.4 Create New Dataframe\n\n3.4.1 Create Dataframe by “Category” :: category_top4\n\n\n\n\n\n\nThis data frame will be used to compare differences in variables by “Category” via multiple correlogram under section xxx.\n\n3.4.1.1 filter top 4 “Category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - base - to group the orders by name.\nsummarise( ) - dplyr - to count the number of drinks for each “Category” and assign under “Total”.\narrange(desc( ) - base - to sort data in descending order.\ntop_n( ) - base - to retain only the four (4) “Category” with the highest “Total”.\n\n\n\n\n\nShow the code\ncategory_top4 <- drink %>%\n  group_by(`Category`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(4)\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(category_top4)\n\n\n\n\n\nCategory\nTotal\n\n\n\n\nespresso\n728\n\n\nfrappuccino-blended-beverages\n504\n\n\nkids-drinks-and-other\n262\n\n\ntea\n237\n\n\n\n\n\n\n\n3.4.1.2 create vector list\n\n\nShow the code\ncategory_top4.list <- as.vector(category_top4$Category)\n\n\n\n\n3.4.1.3 filter attribute data with vector list\n\n\nShow the code\ncategory_filtered <- drink %>%\n  filter(Category %in% category_top4.list)\n\n\n\n\n3.4.1.4 inspect filtered output\n\n\nShow the code\nunique(category_filtered$Category)\n\n\n[1] \"espresso\"                      \"frappuccino-blended-beverages\"\n[3] \"kids-drinks-and-other\"         \"tea\"                          \n\n\n\n\n\n\n\n\n3.4.2 Create Dataframe by “Name” :: name_top3\n\n\n\n\n\n\nThis dataframe will be used to ??\n\n3.4.2.1 filter top 3 “Names”\n\n\nShow the code\nname_top3 <- drink %>%\n  group_by(`Name`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(3) %>%\n  ungroup\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(name_top3)\n\n\n\n\n\nName\nTotal\n\n\n\n\nIced Coffee with Milk\n94\n\n\nHot Chocolate\n60\n\n\nPumpkin Spice Crème\n60\n\n\n\n\n\n\n\n3.4.2.2 create vector list\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - base - to ???.\n\n\n\n\n\nShow the code\nname_top3.list <- as.vector(name_top3$Name)\n\n\n\n\n3.4.2.3 filter attribute data with vector list\n\n\nShow the code\nname_filtered <- drink %>%\n  filter(Name %in% name_top3.list)\n\n\n\n\n3.4.2.4 inspect filtered output\n\n\nShow the code\nunique(name_filtered$Name)\n\n\n[1] \"Iced Coffee with Milk\" \"Hot Chocolate\"         \"Pumpkin Spice Crème\"  \n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test4.html#data-normalisation",
    "href": "pnote/test4.html#data-normalisation",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.5 Data Normalisation",
    "text": "3.5 Data Normalisation\n\n3.5.1 Normalise category_filtered\n\n\n\n\n\n\nTo compare the category holistically, need to first group “Category”, “Name”, “Milk” and “Whipped Cream”. Then, normalise the drinks’ attributes by the volume, i.e. “Portion( fl oz)”.\n\n3.5.1.1 normalise nutritional-related variables\n\n\nShow the code\ncategory_norm <- category_filtered %>%\n  group_by(`Category`,\n           `Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Category', 'Name', 'Milk'. You can\noverride using the `.groups` argument.\n\n\n\n\n3.5.1.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\n\n\n\n\nUsage of the code chunk below :\npaste( ) - base - to update the drinks’ name.\n\n\n\n\n\nShow the code\ncategory_norm$Name_mw <- paste(\n  category_norm$Name, \n  category_norm$Milk, \n  category_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(category_norm[,c(1:3, 17)],3))\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nMilk\nName_mw\n\n\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\n2% Milk\nIced Starbucks® Blonde Caffè Latte 2% Milk NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nAlmond\nIced Starbucks® Blonde Caffè Latte Almond NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nCoconut\nIced Starbucks® Blonde Caffè Latte Coconut NA\n\n\n\n\n\n\n\n3.5.1.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_category <- category_norm %>%\n  select(c(1,5:16))\n\n\n\n\n3.5.1.4 replace row references with “Name_mw”\n\n\n\n\n\n\nUsage of the code chunk below :\nrow.names( ) - dplyr - to replace the row reference with the updated name.\n\n\n\n\n\nShow the code\nrow.names(corr_var_category) <- category_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.1.5 inspect output\n\n\nShow the code\nglimpse(corr_var_category, 70)\n\n\nRows: 498\nColumns: 13\n$ Category                   <chr> \"espresso\", \"espresso\", \"espresso…\n$ `Calories per oz)`         <dbl> 7.986111, 4.236111, 5.625000, 5.6…\n$ `Calories from fat per oz` <dbl> 2.638889, 2.256944, 2.986111, 0.0…\n$ `Total Fat(g/oz)`          <dbl> 0.2743056, 0.2500000, 0.3125000, …\n$ `Saturated fat(g/oz)`      <dbl> 0.149305556, 0.000000000, 0.31250…\n$ `Trans fat(g/oz)`          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `Cholesterol(mg/oz)`       <dbl> 1.1805556, 0.0000000, 0.0000000, …\n$ `Sodium(mg/oz)`            <dbl> 7.118056, 6.875000, 6.493056, 6.3…\n$ `Total Carbohydrate(g/oz)` <dbl> 0.7986111, 0.3888889, 0.5972222, …\n$ `Dietary Fiber(g/oz)`      <dbl> 0.00000000, 0.07638889, 0.0000000…\n$ `Sugars(g/oz)`             <dbl> 0.6875000, 0.2152778, 0.4861111, …\n$ `Protein(g/oz)`            <dbl> 0.50000000, 0.11111111, 0.0763888…\n$ `Caffeine(mg/oz)`          <dbl> 9.444444, 9.444444, 9.444444, 9.4…\n\n\n\n\n\n\n\n\n3.5.2 Normalise name_filtered\n\n\n\n\n\n\nIn order to study the nutritional value holistically, the toppings, i.e. milk and whipped cream will need to be normalised by the volume of drink.\n\n3.5.2.1 normalise nutritional-related variables\n\n\nShow the code\nname_norm <- name_filtered %>%\n  group_by(`Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Name', 'Milk'. You can override using the\n`.groups` argument.\n\n\n\n\n3.5.2.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\nShow the code\nname_norm$Name_mw <- paste(\n  name_norm$Name, \n  name_norm$Milk, \n  name_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(name_norm[,c(1:3, 16)],3))\n\n\n\n\n\n\n\n\n\n\n\nName\nMilk\nWhipped Cream\nName_mw\n\n\n\n\nHot Chocolate\n2% Milk\nNo Whipped Cream\nHot Chocolate 2% Milk No Whipped Cream\n\n\nHot Chocolate\n2% Milk\nWhipped Cream\nHot Chocolate 2% Milk Whipped Cream\n\n\nHot Chocolate\nAlmond\nNo Whipped Cream\nHot Chocolate Almond No Whipped Cream\n\n\n\n\n\nRemarks :\n!!!!! Should we introduce new variable “Name_mw” or stick to “Name” when the new value is combined between 3 vars’ value?\n\n\n3.5.2.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_name <- name_norm %>%\n  select(c(4:15))\n\n\n\n\n3.5.2.4 replace row references with “Name_mw”\n\n\nShow the code\nrow.names(corr_var_name) <- name_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.2.5 inspect output\n\n\nShow the code\nglimpse(corr_var_name, 70)\n\n\nRows: 36\nColumns: 12\n$ `Calories per oz)`         <dbl> 20.866667, 26.833333, 15.866667, …\n$ `Calories from fat per oz` <dbl> 5.0000000, 10.0750000, 4.3583333,…\n$ `Total Fat(g/oz)`          <dbl> 0.56416667, 1.10666667, 0.5000000…\n$ `Saturated fat(g/oz)`      <dbl> 0.37000000, 0.67833333, 0.1250000…\n$ `Trans fat(g/oz)`          <dbl> 0.00000, 0.00500, 0.00000, 0.0000…\n$ `Cholesterol(mg/oz)`       <dbl> 1.74583333, 3.53750000, 0.0000000…\n$ `Sodium(mg/oz)`            <dbl> 10.083333, 10.641667, 9.441667, 1…\n$ `Total Carbohydrate(g/oz)` <dbl> 3.12416667, 3.33500000, 2.5350000…\n$ `Dietary Fiber(g/oz)`      <dbl> 0.250000000, 0.250000000, 0.34916…\n$ `Sugars(g/oz)`             <dbl> 2.69583333, 2.87416667, 1.9958333…\n$ `Protein(g/oz)`            <dbl> 0.87833333, 0.88833333, 0.2891666…\n$ `Caffeine(mg/oz)`          <dbl> 1.745833, 1.745833, 1.745833, 1.7…"
  },
  {
    "objectID": "pnote/test4.html#plot-correlogram",
    "href": "pnote/test4.html#plot-correlogram",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.1 Plot Correlogram",
    "text": "4.1 Plot Correlogram\n\n4.1.1 Plot with R Base\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npanel.cor( ) - xcms - to create correlation coefficient panel for pairs function.\n\npar( ) - graphics - to set or query graphical parameters.\n\nusr = a vector of the form c(x1, x2, y1, y2) giving the extremes of the user coordinates of the plotting region.\n\npar(“usr”) = useful command for custom plot with fixed features1. It allows objects to be placed within the plot window.\n\n\non.exit( ) - base - to set execution when the function exits naturally or due to error2. Use together with usr.\ncor( ) - stats - to returns a correlation data frame rather a matrix.\n\ncomplete.obs= correlations will be computed from complete observations, with an error being raised if there are no complete cases.3\n\nstrwidth( ) - graphics - to compute the width and height of the given strings txt.4\n\n\n\n\n\n\nShow the code\npanel.cor <- function(x, y, \n                      digits = 3, \n                      prefix = \"\",\n                      cex.cor)\n  {\n  usr <- par(\"usr\" = c(0, 1, 0, 1))\n  on.exit(par(usr))\n  \n  r <- abs(\n    cor(x, y, use = \"complete.obs\"))\n  \n  txt <- format(\n    c(r, 0.123456789),\n    digits = digits)[1]\n  \n  txt <- paste(prefix, \n               txt, \n               sep = \"\")\n  \n  if(missing(cex.cor))\n    cex.cor <- 0.8/strwidth(txt)\n  \n  text(0.5, 0.5, \n       txt, \n       cex = cex.cor*(1+r)/2)\n  }\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npairs( ) - graphics - to produce matrix of scatterplots.\n\n\n\n\n\nShow the code\npairs(corr_var_name,\n      upper.panel = panel.cor,\n      label.pos = 0.5, \n      line.main = 2,\n      cex.labels = 0.5, \n      font.labels = 0.5,\n      gap = 0.2)\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nggcorrmat( ) - ggstatsplot - to visualise a correlation matrix.5\n\n\n\n\n\nShow the code\nggcorrmat(data = corr_var_name,\n  ggcorrplot.args = list(outline.color = \"white\", \n                         hc.order = TRUE,\n                         lab_col = \"black\",\n                         lab_size = 3,\n                         pch.col = \"red\",\n                         pch.cex = 6),\n  title = \"Nutrition Value for Top 3 Starbucks Drinks\",\n  ggplot.component = list(\n    theme_void(\n      base_size = 10),\n    theme(\n      plot.title = element_text(size = 12),\n      legend.text = element_text(size = 8),\n      axis.text.x = element_text(size = 8, \n                                 angle = 75, \n                                 hjust = 0.6),\n      axis.text.y = element_text(size = 8, \n                                 hjust = 1)\n      ))\n  )\n\n\n\n\n\nRemarks :\nAbove correlation plot is hc.ordered meaning using hierarchical function.\n“Trans fat(g/oz)” and “Dietary Fiber(g/oz)” has no significant at p < 0.05.\n\n\n\n\n\n4.1.3 Plot Multiple Correlogram with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngrouped_ggcorrmat( ) - ggstatsplot - a helper function to apply the function to visualise multiple correlation matrix.\n\n\n\n\n\nShow the code\ngrouped_ggcorrmat(\n    data = corr_var_category,\n    grouping.var = Category,\n    type = \"p\",\n    p.adjust.method = \"holm\",\n    plotgrid.args = list(ncol = 2),\n    ggcorrplot.args = list(outline.color = \"black\",\n                           lab_col = \"black\",\n                           lab_size = 1.5,\n                           pch.col = \"red\",\n                           pch.cex = 3),\n    annotation.args = list(\n      tag_levels = \"a\",\n      title = \"Correlation of Attributes for Starbucks Top 4 Drink Categories\",\n      subtitle = \"Top 4 categories : Espresso, Frapuccino blended beverages, Kids Drinks & Tea\"),\n    ggplot.component = list(\n      theme_void(base_size = 6),\n      theme(\n        plot.title = element_text(size = 6),\n        plot.subtitle = element_text(size = 3),\n        legend.text = element_text(size = 3),\n        axis.text.x = element_text(size = 3, \n                                   angle = 75, \n                                   hjust = 0.6),\n        axis.text.y = element_text(size = 3, \n                                   hjust = 1),\n        strip.text.x = element_text(size = 3),\n        legend.key.size = unit(3, 'mm')\n        ))\n    )\n\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n\n\n\n4.1.4 Plot with corrplot package\n\n\n\n\n\n\nThe figure below shows a corrgram using the corrplot combined with the significant test of 0.1. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total carbohydrate and sugar is statistically significant at significant level of 0.1 but not the pair between total caffeine and trans fat.\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncor.mtest( ) - corrplot - to generate p-values for “p” variable, and confidence intervals for each pair of input variables.\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\n\n\n\n\n\n\n\n\nShow the code\nname.sig = cor.mtest(corr_var_name, \n                     conf.level = .9)\n\n\n\n\nShow the code\ncorrplot.mixed((cor(corr_var_name)),\n               lower = \"number\",\n               upper = \"square\",\n               order = \"AOE\",\n               diag = \"l\",\n               tl.pos = \"lt\",\n               tl.col = \"black\",\n               tl.cex = .6,\n               tl.srt = 45,\n               pch.col = \"grey70\",\n               pch.cex = 1.5,\n               number.cex = .6,\n               cl.cex = .6,\n               lower.col = \"black\",\n               p.mat = name.sig$p, \n               sig.level = 0.1,\n               title = \"Attributes Pairs Correlation with significant level of 0.1\",\n               mar = c(0,0,1,0)\n               )\n\n\n\n\n\nRemarks :\n\n\n\n\n\n4.1.5 Plot with Histogram on Diagonal Panel\n\n\nShow the code\npanel.smooth <- function (x, y, \n                          col = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), \n                          bg = NA,\n                          pch = 12,\n                          cex = 0.8, \n                          col.smooth = \"red\", \n                          span = 2/3, \n                          iter = 3,\n                          panel = panel.smooth){\n  points(x, y, \n          pch = pch, \n          col = col, \n          bg = bg, \n          cex = cex)\n  }\n\n\nRemarks :\nCode chunk above with references to 2 sites :\n\nScatter Plot Matrices - R Base Graphs\nStack Overflow - How to modify this Correlation Matrix plot?\n\n\n\nShow the code\npanel.hist <- function(x){\n  usr <- par(\"usr\")\n  \n  on.exit(par(usr))\n\n  par(usr = c(usr[1:2], 0, 1.5) )\n  \n  h <- hist(x, plot = FALSE)\n  \n  breaks <- h$breaks\n  \n  nB <- length(breaks)\n  \n  y <- h$counts; \n  y <- y/max(y)\n  \n  rect(breaks[-nB], 0, \n       breaks[-1], y, \n       col = \"cyan\")\n}\n\n\n\n\nShow the code\npairs(corr_var_name,\n      lower.panel = panel.smooth, \n      upper.panel = panel.cor,\n      diag.panel = panel.hist,\n      gap = 0.2, \n      row1attop = TRUE)\n\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\n\n\n\n\n\n\n4.1.6 Plot with psych package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npairs.panels( ) - psych - to include histograms and correlations into the Scatter Plot of Matrices (SPLOM)6.\n\nmethod parameters for the correlation (“pearson”, “spearman”, “kendall”\ndensity TRUE shows histograms and density plots.\nellipses TRUE draws correlation ellipses.\nhist.col colour for histogram.\n\nnote : the alpha level for the confidence regions is 0.05.\n\n\n\n\n\nShow the code\npairs.panels(corr_var_name,\n             method = \"pearson\",\n             hist.col = \"#00AFBB\",\n             density = TRUE,\n             ellipses = TRUE,\n             digits = 3,\n             gap = 0.2)\n\n\n\n\n\n\n\n\n\n\n4.1.7 Plot with Hierarchical Clustering\n\n\n\n\n\n\nThe dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\ncv_name.matrix <- data.matrix(corr_var_name)\n\n\n\n\nShow the code\nname_d <- dist(normalize(cv_name.matrix, method = \"euclidean\"))\n\n\n\n\nShow the code\nname_hclust <- hclust(name_d, method = \"average\")\n\n\n\n\nShow the code\nname_num_k <- find_k(name_hclust)\n\nplot(name_num_k)\n\n\n\n\n\ns\n\n\nShow the code\nset.seed(12345)\n\nfactoextra::fviz_nbclust(cv_name.matrix,\n                         FUNcluster = hcut,\n                         nstart = 25,  \n                         method = \"gap_stat\", \n                         nboot = 50,\n                         linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Gap statistic method\")\n\n\n\n\n\nw\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"wss\",\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"silhouette\",\n             linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, the corrgram was plotted using corrplot() and hclust based on the results of hierarchical clustering.\n\n\nShow the code\ncorrplot((cor(corr_var_name)),\n         method = \"ellipse\",\n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 2,\n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.cex = .6,\n         tl.srt = 45,\n         number.cex = .6,\n         cl.cex = .6,\n         title = \"Correlation with K-2 Hierarchical Clustering\",\n         mar = c(0,0,1,0))\n\n\n\n\n\n\n\n\n\n\n4.1.8 Conclude SPLOM Methods and Findings\n\n\n\n\n\n\nIn general, the corrgram for all starbucks drinks show that caffeine is mostly negatively correlated with the other nutritional factors except protein, whereas the rest are positively correlated. The diagram also shows that following pairs of nutritional factors of starbucks drinks are highly correlated (r > 0.90):\n\nTotal Fat(g) – Calories from Fat (r = 1)\nTotal Fat(g) – Saturated Fat(g) (r = 0.94)\nCalories from fat – Saturated Fat (g) (r = 0.94)\nSugars (g) – Total Carbohydrate (g) (r = 0.99)\nSugars (g) – Calories (r = 0.92)\nTotal Carbohydrate (g) – Calories (r = 0.94)\n\nThe trans fat(g) and caffeine (mg) pair is not significant at p <0.05 and has a correlation parameter of only 0.01.\nFrom the multiple corrgram, an interesting finding is that the caffeine for kids drinks and tea is positively correlated to the other factors.\nThe starbucks drinks nutrition factors can be separated into 3 clusters:\n\nCaffeine (mg)\nTrans fat(g), Cholesterol(mg), Saturated fat(g), Calories from fat, Total Fat(g)\nSodium (mg), Calories, Total Carbohydrate(g), Sugars(g), Dietary Fiber(g), Protein(g)\n\nThe nutrition factors in each cluster are correlated with one another. Caffeine is standalone as it is not highly correlated with the others and generally has a negative correlation with the rest."
  },
  {
    "objectID": "pnote/test4.html#heatmap",
    "href": "pnote/test4.html#heatmap",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.2 Heatmap",
    "text": "4.2 Heatmap\n\n\n\n\n\n\nA heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.\nThe top drinks dataset where nutritional values have been normalised against the unit volume will be used for plotting the heat map.\nFirst, the dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\nname_matrix <- data.matrix(name_norm)\n\n\n\n\nShow the code\nname_matrix_d <- dist(normalize(name_matrix), method = \"euclidean\")\n\n\n\n\nShow the code\nname_clustHM <- hclust(name_matrix_d, method = \"average\")\n\n\n\n\nShow the code\nheatmap_k <- find_k(name_clustHM)\nplot(heatmap_k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, heatmaply package was used to plot the heatmap for Ice Coffee, Hot Chocolate and Pumpkin Spice Crème for different combinations of milk and whipped cream.\n\n\nShow the code\nheatmaply(percentize(name_matrix),\n          colors = Blues,\n          k_row = 6,\n          margins = c(0, 100, 30, 50), #btm, left, top, right\n          fontsize_row = 6,\n          fontsize_col = 6,\n          title= list(\n            text = \"Playing with Fonts\",\n            font = t1),\n          xlab = \"Nutrition\",\n          ylab = \"Drinks\",\n          main = \"Heatmap of Top 3 popular Starbucks Drinks\")\n\n\n\n\n\n\n\n\n\n\n4.2.1 Conclusion\n\n\n\n\n\n\nThe heatmap compares the nutritional value of hot chocolate, pumpkin spice crème and iced coffee, which are popular drinks in Starbucks. It shows that hot chocolate and pump spice crème are generally unhealthier, containing higher sodium, sugars, carbohydrates, and cholesterol levels than iced coffee. On the other hand, iced coffee contains higher caffeine levels than the hot chocolate and pump spice crème. The impact of milk, whipped cream, sweetener choices on the nutritional value of drinks were further analysed using hierarchical clustering. The drinks were separated into 4 clusters:\n\nHot Chocolate and Pumpkin Spice Crème with whipped cream or Pumpkin Spiced Crème with Whole/2% milk\nPumpkin Spice Crème without whipped cream with soy or nonfat milk\nHot Chocolate and Pumpkin Spice Crème without whipped cream\nIced Coffee with all milk and sweetener combinations\n\nFor Hot Chocolate and Pumpkin Spice Crème, the nutritional value was determined by whipped cream then milk type. In general, no whipped cream and plant-based milk milk choices are considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels. For Iced coffee, the nutritional value was determined by sweetener then milk type. Unsweetened iced coffee with plant-based milk is considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels."
  },
  {
    "objectID": "pnote/test4.html#parallel-coordinate-plot",
    "href": "pnote/test4.html#parallel-coordinate-plot",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.3 Parallel Coordinate Plot",
    "text": "4.3 Parallel Coordinate Plot\n\n\n\n\n\n\nParallel coordinates are a common way of visualizing and analyzing high-dimensional datasets. To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\nThe parallel coordinate was plotted using the parallelPlot package.\n\n\nShow the code\ndrink.pc <- corr_var_name\n\nhistoVisibility <- rep(TRUE, \n                       ncol(drink.pc))\n\nparallelPlot(drink.pc,\n             rotateTitle = TRUE,\n             continuousCS = 'YlGnBu',\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n\n\n4.3.1 Conclusion\n\n\n\n\n\n\nThe findings from the parallel coordinate plot are generally in line with the corrgram above. Drinks with high calories typically have high total carbohydrate, sugars, sodium and lower caffeine, vice versa. Some factors like trans fat, dietary fibre and cholesterol are generally not-well distributed with most drinks having a low nutritional value for those factors. They may not be a good indicator of the calorific content of the drinks."
  },
  {
    "objectID": "pnote/test5.html#plot-horizontal-chart",
    "href": "pnote/test5.html#plot-horizontal-chart",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "4.1 Plot Horizontal Chart",
    "text": "4.1 Plot Horizontal Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - ggHoriplot - to encode a vector as a factor.\nscale_fill_hcl( ) - ggHoriplot - to set value for “palette” with ‘RdBu’. Need colour contrast between negative (red) and positive (blue) to illustrate the “roc”.\ngeom_vline( ) - ggHoriplot - to draw a vertical dashed line intercepting the x-axis.\n\n\n\n\n\nShow the code\nggplot() +\n  geom_horizon(aes(date, roc),\n               data = stock_week,\n               origin = 0,\n               horizonscale = c(-15, -5, -1,  0,  1, 3, 5)) +\n  scale_fill_hcl(palette = 'RdBu') +\n  facet_grid(name~.) +\n  theme_few() +\n  theme(\n    panel.spacing.y = unit(0, \"lines\"),\n    plot.title = element_text(size = 12),\n    plot.subtitle = element_text(size = 9),\n    strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(size = 7, angle = 90, hjust = 0, vjust = 0.5),\n    axis.title.x = element_blank(),\n    panel.border = element_blank(),\n    legend.position = \"none\"\n    ) +\n  scale_x_date(expand = c(0,0), \n               date_breaks = \"1 month\", \n               date_labels = \"%b '%y\",\n               limit = c(as.Date(\"2020-01-01\"),\n                         as.Date(\"2021-12-31\"))) +\n  xlab('Date') +\n  ggtitle('Stock Prices of Top 40 Companies in Singapore, 2020 to 2021', \n          'Ranked by Market Capitalisation, Weekly Data') +\n  geom_vline(xintercept = as.Date(\"2020-02-07\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-04-07\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-06-02\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-11-09\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2021-05-08\"), color = \"limegreen\", size = 1) + \n  geom_vline(xintercept = as.Date(\"2021-10-09\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2021-11-26\"), color = \"limegreen\", size = 1) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\nRemarks :\n2020-02-07 : initial wave of Covid-19\nDisease Outbreak Response System Condition (DORSCON) to orange, signalling that the disease is severe and there is widespread transmission from unknown sources.\n\nThis is highest level ever reached since the SARS outbreak in 2003.\nThe severity of the pandemic caused panic and uncertainty amongst business and citizens.\nMore countries were also entering a lockdown state to contain the spread, disrupting global trade flows which exacerbated the market.\nHence, spurring on the COVID-19 financial crash in March 2020, which not only impacted Singapore but all major stock markets as well.\nThe March 2020 COVID-19 crash was a short-lived bear market, and in April 2020 stock markets re-entered a bull market.\n\n\n2020-04-07 : circuit breaker\nIntroduced the Circuit Breaker period, where citizens practised enhanced social distancing and isolation.\n\nWorkplaces and schools closed and most shops shuttered.\nBusinesses were badly impacted by the drop in footfall and consumption.\nHowever, the stock market seem to be recovering from the crash in March.\nOne reason could be the implementation of the Budgets the Government has dedicated to support Singaporeans and businesses in the battle against COVID-19, which amounted close to $100 billion.\nSecondly, businesses were also adapting to the change in consumer patterns through contactless digital systems, which were well-received.\n\n\n2020-06-02\nEased of circuit breaker. Enters its first phase of reopening, where businesses and activities are progressively allowed to resume, giving rise to some semblance of normalcy.\n\nHence, causing the stock price in the market to rise.\n\n\n2020-11-09 : National Vaccination Campaign\nPfizer and BioNTech SE announced a vaccine candidate that has demonstrated evidence of efficacy against COVID-19.\n\nAs the news brought about positivity of a potential return of normal activity, many shares of companies soared.\nSince Dec 2020, the National Vaccination Campaign commenced and in late 2021, Singapore became the world’s most-vaccinated country, with more than 85% of its total population fully-vaccinated.\n\n\n2021-05-08 : DELTA WAVE OF COVID-19\nBy May 2021, the Delta variant of COVID-19 had widely spread, causing several clusters across the nation.\n\nThe re-opening efforts put forth by the Government were heldback, Singapore reverted back to Phase 2 from 8 May, which was subsequently tightened to Phase 2 Heightened Alert from 16 May.\nThis tightening of measures caused the stock market prices to dip.\n\n\n2021-10-09 : CAUTIOUS RE-OPENING WITH ENDEMIC COVID-19\nSince then, the nation has acknowledged that the Zero-Covid strategy is no longer feasible due to highly infectious variants formed.\n\nIt has engaged a cautions re-opening strategy to enable Singaporeans to resume their lives, participate in social activities, open the borders and revive the economy.\nOne such example would be the Vaccinated Travel Lane (VTL) which allowed fully-vaccinated Singaporean citizens and permanent residents to return to Singapore without quarantine.\nOn 9 Oct 2021, it was announced that Singapore would open up more VTLs with other countries, including South Korea and the United States.\nThis saw some rise in the stock market prices, especially companies who stand to gain most such as Singapore Airlines and SATS.\n\n\n2021-11-26 : OMICRON VARIANT OF COVID-19\nOn 26 Nov 2021, the World Health Organisation (WHO) announced the Omicron variant discovery of COVID-19.\n\nWhile there was some dip to the stock market prices, due to lack of information on the virus, the impact seems to be lower than the Delta and Alpha variant of the virus for most companies."
  },
  {
    "objectID": "pnote/note1.html",
    "href": "pnote/note1.html",
    "title": "Personal Note",
    "section": "",
    "text": "plot title - subject + details\ncv = continuous variables\n\n\n\n\n\n\n\n\n\nchart\nusage\nmeasure / param\nremark / attention\n\n\n\n\nBar\nquick comparison btw categories and trends.\n\nuseful when data can split into multiple bins\n\n\nLine\nquick view data trends over a period of time.\n\n\n\n\nHistogram\nfrequency of bins of value\ncv = probability distribution\n\nmean\nmedian\nmode\n\n\n\n\nBox plot\nhttp://www.sthda.com/english/wiki/box-plots-r-base-graphs\n\n\n\n\nScatter Plot\nreveal the relationship btw variables.\n\n\n\n\nScatter Plot Matrices\n\n\n\n\n\nCorrelogram\nreveal multicollinearity.\n\n\n\n\nHorizon chart\nSpot general trends and identify extreme values.\n\n\n\n\nDensity Map\nreveal patterns or relative concentration within a small geographic area.1\n\n\n\n\nOthers\nGantt chat, bubble chart,\n\n\n\n\n\n\n\n\nunderstand distribution\nmeasure\nremark / note\n\n\n\n\nCentral Tendency\n\nmean\nmedian\nmode\n\nMean affected the most by outliers.\n\n\nDispersion\n\nrange\nquartiles\ninter-quartile range\nvariance\nstandard deviation\n\ninter-quartile range = differences between Q1 and Q3 == 50% of population lies within.\nvariance = average of the squared differences from the Mean.\nstandard deviation = is square root of variance.\n\n\nShape of Distribution\n\nskewness\nkurtosis\n\n\n\n\n\n\nnegative skewed curve = long left tail.\nmesokurtic = medium kurtosis (medium tails)\nplatykurtic = low kurtosis (thin). E.g. age of students from a school.\nleptokurtic = high kurtosis (fat)\n\n\n\nDefinition :\nKurtosis = measures the heaviness of a distribution’s tails relative to a normal distribution. Tails represent the probability or frequency of values that are extreme high or low from the mean. Tailedness is how often outliers occur.\n\n3 Types of Kurtosis2\n\n\n\nMesokurtic\nPlatykurtic\nLeptokurtic\n\n\n\n\nTailedness\nMedium-tailed\nThin-tailed\nFat-tailed\n\n\nOutlier frequency\nMedium\nLow\nHigh\n\n\nKurtosis\nModerate (3)\nLow (<3)\nHigh (>3)\n\n\nExcess kurtosis\n0\nNegative\nPositive\n\n\nExample distribution\nNormal\nUniform\nLaplace\n\n\n\n\n\n\n\n\n\n\n\n\n\ntopic\nmeasure / parameter / aspect\nCol3\nCol4\nCol5\n\n\n\n\npopulation distribution\ntotal population\nyoung population\nelderly population\nworking age population\nabsolute, percentage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nTracy R. (N.A.). Which Type of Chart or Graph is Right for You? Tableau. https://www.tableau.com/learn/whitepapers/which-chart-or-graph-is-right-for-you↩︎\nShaun T. (2022). What Is Kurtosis? | Definition, Examples & Formula. Scribbr. https://www.scribbr.com/statistics/kurtosis/#:~:text=Kurtosis%20is%20a%20measure%20of,(thin%20tails)%20are%20platykurtic.↩︎"
  },
  {
    "objectID": "pnote/error_shiny_test0.html",
    "href": "pnote/error_shiny_test0.html",
    "title": "Encountered Shiny Errors",
    "section": "",
    "text": "Error Message :\nError in func(fname, ...) : app.R did not return a shiny.appobj object.\nCause : Curly bracket is missing.\nExample : server <- function(input, output)\nSolution : server <- function(input, output) {}"
  },
  {
    "objectID": "pnote/test0.html#plot-multiple-boxplots",
    "href": "pnote/test0.html#plot-multiple-boxplots",
    "title": "Explore with Geospatial Data",
    "section": "4.1 Plot Multiple Boxplots",
    "text": "4.1 Plot Multiple Boxplots\n\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)"
  },
  {
    "objectID": "pnote/test0.html#plot-basic-boxplot",
    "href": "pnote/test0.html#plot-basic-boxplot",
    "title": "Explore with Geospatial Data",
    "section": "4.2 Plot Basic Boxplot",
    "text": "4.2 Plot Basic Boxplot\n\n4.2.1 with & without frame\n\nboxplot(cluster_vars$wp_functional,\n        cluster_vars$wp_nonFunctional,\n        frame = FALSE)\n\n\n\nboxplot(cluster_vars$wp_functional,\n        cluster_vars$wp_nonFunctional)\n\n\n\n\n\n\n4.2.2 change colour, name & direction\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = \"steelblue\",\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        col = \"steelblue\",\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\"),\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = \"steelblue\",\n        horizontal = TRUE\n        )\n\n\n\n\n\n\n4.2.3 plot with 2 characters + 1 continuous variable\n\n\nShow the code\nboxplot(pressure_score ~ water_tech_clean*usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = c(\"#E69F00\", \"#56B4E9\")\n        )\n\n\n\n\n\n\n\n4.2.4 add number of observations in each group\n\n\n\n\n\n\nUsage of the code chunk below :\nboxplot2( ) - gplots - to produce a boxplot annotated with the number of observations.\n\nboxplot2(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE,\n        shrink = 0.7,\n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\")\n        )"
  },
  {
    "objectID": "pnote/test0.html#plot-mixed-chart-with-functions",
    "href": "pnote/test0.html#plot-mixed-chart-with-functions",
    "title": "Explore with Geospatial Data",
    "section": "4.3 Plot Mixed Chart with Functions",
    "text": "4.3 Plot Mixed Chart with Functions\n\n4.3.1 Set Function\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\n4.3.2 Plot Histogram & Box Plot\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\n\n4.3.3 Set Function for Multiple Histograms\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\n4.3.4 Plot Multiple Histograms\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\n\n4.3.5 Set Function for Multiple Maps\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\n4.3.6 Plot Multiple Maps\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test0.html#compare-plots-of-before-and-after-data-standardisation",
    "href": "pnote/test0.html#compare-plots-of-before-and-after-data-standardisation",
    "title": "Explore with Geospatial Data",
    "section": "4.4 Compare Plots of Before and After Data Standardisation",
    "text": "4.4 Compare Plots of Before and After Data Standardisation\n\n4.4.1 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n4.4.1.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 21  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\nwp_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      198        1   0.0911  0.09632 0.005319 0.009309 \n     .25      .50      .75      .90      .95 \n0.023936 0.062500 0.117021 0.191489 0.289894 \n\nlowest : 0.000000000 0.001329787 0.002659574 0.003989362 0.005319149\nhighest: 0.664893617 0.691489362 0.785904255 0.857712766 1.000000000\n--------------------------------------------------------------------------------\nwp_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      140        1   0.1522   0.1416 0.003597 0.010791 \n     .25      .50      .75      .90      .95 \n0.050360 0.122302 0.219424 0.330935 0.402878 \n\nlowest : 0.000000000 0.003597122 0.007194245 0.010791367 0.014388489\nhighest: 0.615107914 0.636690647 0.658273381 0.776978417 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\nVariables with all observations missing:\n\n[1] wp_unknown\n\n\n\n4.4.1.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 21  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\nwp_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       198         1 3.739e-17     0.892   -0.7944   -0.7574 \n      .25       .50       .75       .90       .95 \n  -0.6220   -0.2649    0.2400    0.9296    1.8408 \n\nlowest : -0.8436052 -0.8312915 -0.8189779 -0.8066643 -0.7943506\nhighest:  5.3132110  5.5594836  6.4337515  7.0986877  8.4162463\n--------------------------------------------------------------------------------\nwp_nonFunctional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       140         1 4.166e-17     1.063   -1.1158   -1.0618 \n      .25       .50       .75       .90       .95 \n  -0.7647   -0.2244    0.5050    1.3424    1.8827 \n\nlowest : -1.142840 -1.115827 -1.088813 -1.061800 -1.034786\nhighest:  3.476478  3.638560  3.800641  4.692088  6.366929\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\nVariables with all observations missing:\n\n[1] wp_unknown\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n\n\n\n4.4.2 Compare Distribution For Standardisation Method\n\n\n\n\n\n\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test0.html#create-data-samples",
    "href": "pnote/test0.html#create-data-samples",
    "title": "Explore with Geospatial Data",
    "section": "3.3 Create Data Samples",
    "text": "3.3 Create Data Samples\n\n3.3.1 Random 20 Rows with All Variables\n\n\nShow the code\nset.seed(12345)\ntest <- sample(wp_ngaTrim, 20)\n\ntest\n\n\nSimple feature collection with 761 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.6474 ymax: 13.89442\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n   pct_mechPump total_uc300 total_urban0 pct_urban0  pct_uc250 total_cs04\n1      82.35294           3            0   0.000000  0.0000000         10\n2      87.32394           9            4   5.633803  0.0000000         52\n3      59.64912          23           48  84.210526  0.0000000         33\n4      91.66667           4           40  83.333333  0.0000000         18\n5       9.44206         175          204  87.553648 15.4506438        206\n6      76.47059           8            7  20.588235  0.0000000         23\n7      70.58824          34            0   0.000000  0.8403361        109\n8      32.89474         102          145  95.394737  0.0000000        135\n9      65.15152          23           48  72.727273  0.0000000         22\n10     66.66667          13           21  53.846154  0.0000000         26\n   total_mechPump  pct_cs10 total_ps40                       geometry pct_uc300\n1              14 41.176471          0 MULTIPOLYGON (((7.401109 5.... 17.647059\n2              62 26.760563          0 MULTIPOLYGON (((7.334479 5.... 12.676056\n3              34 42.105263          0 MULTIPOLYGON (((7.045872 9.... 40.350877\n4              44 62.500000          0 MULTIPOLYGON (((7.811244 5....  8.333333\n5              22 11.587983          0 MULTIPOLYGON (((8.4109 6.28... 75.107296\n6              26 32.352941          0 MULTIPOLYGON (((3.143903 7.... 23.529412\n7              84  8.403361          0 MULTIPOLYGON (((3.301615 7.... 28.571429\n8              50 11.184211          0 MULTIPOLYGON (((8.153282 5.... 67.105263\n9              43 66.666667          0 MULTIPOLYGON (((7.321909 5.... 34.848485\n10             26 33.333333          0 MULTIPOLYGON (((6.669202 4.... 33.333333\n   total_ps19 wp_nonFunctional pct_nonFunctional total_cs10 total_handPump\n1           5                9          52.94118          7              2\n2           5               35          49.29577         19              7\n3          24               34          59.64912         24             23\n4          18               25          52.08333         30              4\n5          20               42          18.02575         27            102\n6           8               15          44.11765         11              5\n7           2               33          27.73109         10             20\n8           4               62          40.78947         17             91\n9          35               26          39.39394         44              1\n10         13               13          33.33333         13             12\n   total_uc1000 wp_unknown pct_cs04 total_ps09\n1            14          0 58.82353         12\n2            62          0 73.23944         66\n3            34          0 57.89474         33\n4            44          0 37.50000         30\n5            22          0 88.41202        213\n6            26          0 67.64706         26\n7            84          0 91.59664        117\n8            50          0 88.81579        148\n9            43          0 33.33333         31\n10           26          0 66.66667         26\n\n\n\n\n3.3.2 Random 20 Samples with Row Id Returned\n\n\nShow the code\nset.seed(12345)\ntest2 <- sample(1:nrow(wp_ngaTrim), 20)\n\ntest2\n\n\n [1] 142  51 720 730 220 664 605 587 352 216  86  75  38 615 465  40 286 257 724\n[20] 506\n\n\n\n\nShow the code\nwp_ngaTrim[test2,]\n\n\nSimple feature collection with 20 features and 43 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 4.133963 ymin: 4.869661 xmax: 13.88706 ymax: 12.83967\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n       shapeName                       geometry total_wp wp_functional\n142       Damban MULTIPOLYGON (((10.92966 11...       74            28\n51  Anambra East MULTIPOLYGON (((6.981355 6....       69            17\n720        Uruan MULTIPOLYGON (((8.008052 4....       48             8\n730       Warawa MULTIPOLYGON (((8.86303 11....      199           145\n220         Fika MULTIPOLYGON (((10.92982 11...       19            15\n664      Shendam MULTIPOLYGON (((9.621475 8....      428           113\n605 Orumba North MULTIPOLYGON (((7.146546 5....       66            13\n587    Ondo West MULTIPOLYGON (((4.998771 6....      161            55\n352      Irewole MULTIPOLYGON (((4.25219 7.4...      111            50\n216   Ezza South MULTIPOLYGON (((8.066542 6....      314           135\n    pct_functional wp_nonFunctional pct_nonFunctional wp_unknown pct_unknown\n142       37.83784               46          62.16216          0           0\n51        24.63768               16          23.18841          0           0\n720       16.66667               40          83.33333          0           0\n730       72.86432               54          27.13568          0           0\n220       78.94737                4          21.05263          0           0\n664       26.40187              109          25.46729          0           0\n605       19.69697               15          22.72727          0           0\n587       34.16149              106          65.83851          0           0\n352       45.04505               50          45.04505          0           0\n216       42.99363               60          19.10828          0           0\n    total_handPump total_mechPump total_tapStand pct_handPump pct_mechPump\n142             63             11              0     85.13514    14.864865\n51              33              0              0     47.82609     0.000000\n720              5             41              0     10.41667    85.416667\n730            194              5              0     97.48744     2.512563\n220              0             19              0      0.00000   100.000000\n664            193             29              0     45.09346     6.775701\n605              7             21              0     10.60606    31.818182\n587             83             78              0     51.55280    48.447205\n352             51             49              0     45.94595    44.144144\n216            180             15             12     57.32484     4.777070\n    pct_tapStand total_uc300 total_uc1000 total_uc250 total_uc50 total_ucN1000\n142     0.000000          63           11           0          0            63\n51      0.000000          69            0           0          0            69\n720     0.000000           5           41           2          0             7\n730     0.000000         194            5           0          0           194\n220     0.000000           0           19           0          0             0\n664     0.000000         399           29           0          0           399\n605     0.000000          45           21           0          0            45\n587     0.000000          83           78           0          0            83\n352     0.000000          62           49           0          0            62\n216     3.821656         287           15          12          0           299\n    pct_ucN1000 pct_uc300 pct_uc1000 pct_uc250 total_urban1 total_urban0\n142    85.13514  85.13514  14.864865  0.000000           22           52\n51    100.00000 100.00000   0.000000  0.000000            0           69\n720    14.58333  10.41667  85.416667  4.166667            1           47\n730    97.48744  97.48744   2.512563  0.000000            3          196\n220     0.00000   0.00000 100.000000  0.000000            1           18\n664    93.22430  93.22430   6.775701  0.000000           38          390\n605    68.18182  68.18182  31.818182  0.000000            7           59\n587    51.55280  51.55280  48.447205  0.000000           91           70\n352    55.85586  55.85586  44.144144  0.000000           60           51\n216    95.22293  91.40127   4.777070  3.821656           18          296\n    pct_urban1 pct_urban0 total_cs04 total_cs10 pct_cs04   pct_cs10\n142  29.729730   70.27027         30         44 40.54054 59.4594595\n51    0.000000  100.00000         37         32 53.62319 46.3768116\n720   2.083333   97.91667          8         40 16.66667 83.3333333\n730   1.507538   98.49246        176         23 88.44221 11.5577889\n220   5.263158   94.73684          7         12 36.84211 63.1578947\n664   8.878505   91.12150        220        208 51.40187 48.5981308\n605  10.606061   89.39394         29         37 43.93939 56.0606061\n587  56.521739   43.47826        123         38 76.39752 23.6024845\n352  54.054054   45.94595         90         21 81.08108 18.9189189\n216   5.732484   94.26752        313          1 99.68153  0.3184713\n    total_status1 total_status0 pct_stat1 pct_stat0 total_ps09 total_ps19\n142            28            46  37.83784  62.16216         30         44\n51             17            16  24.63768  23.18841         49         20\n720             8            40  16.66667  83.33333         13         35\n730           146            53  73.36683  26.63317        190          9\n220            15             4  78.94737  21.05263         10          9\n664           113           108  26.40187  25.23364        247        181\n605            14            14  21.21212  21.21212         40         26\n587            56           105  34.78261  65.21739        130         31\n352            50            50  45.04505  45.04505         92         19\n216           134            60  42.67516  19.10828        313          1\n    total_ps39 total_ps40 pct_ps09   pct_ps19 pct_ps39 pct_ps40\n142          0          0 40.54054 59.4594595        0        0\n51           0          0 71.01449 28.9855072        0        0\n720          0          0 27.08333 72.9166667        0        0\n730          0          0 95.47739  4.5226131        0        0\n220          0          0 52.63158 47.3684211        0        0\n664          0          0 57.71028 42.2897196        0        0\n605          0          0 60.60606 39.3939394        0        0\n587          0          0 80.74534 19.2546584        0        0\n352          0          0 82.88288 17.1171171        0        0\n216          0          0 99.68153  0.3184713        0        0"
  },
  {
    "objectID": "pnote/test0.html#create-data-frame-for-clustering-analysis",
    "href": "pnote/test0.html#create-data-frame-for-clustering-analysis",
    "title": "Explore with Geospatial Data",
    "section": "3.4 Create Data Frame for Clustering Analysis",
    "text": "3.4 Create Data Frame for Clustering Analysis\n\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"wp_functional\",\n         \"wp_nonFunctional\",\n         \"wp_unknown\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)"
  },
  {
    "objectID": "pnote/test2.html#plot-bar-chart",
    "href": "pnote/test2.html#plot-bar-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.2 Plot Bar Chart",
    "text": "4.2 Plot Bar Chart\n\n\nShow the code\ntest1_2.mat <- as.matrix.data.frame(test1_2df)\n\n\n\n4.2.1 Explore Bar Plot with graphics Package\n\n\nShow the code\nbarplot(test1_2.mat, \n        horiz = TRUE, \n        names.arg = c(\"females\", \"males\"))\n\n\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"white\", border = \"steelblue\")\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"white\",\n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"steelblue\")\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat,\n        col = \"steelblue\",\n        main = \"Population Gender\",\n        xlab = \"Gender\",\n        ylab = \"Count\"\n        )\n\n\n\n\n\n\n\n4.2.2 Stacked Bar Plots\n\n\nShow the code\nbarplot(test1_2.mat,\n        main = \"Population Count\",\n        font.main = 4,\n        col = c(\"lightblue\", \"mistyrose\", \"lightcyan\", \n                 \"lavender\", \"cornsilk\"),\n        legend = rownames(test1_2.mat))\n\n\n\n\n\n\n\n4.2.3 Grouped Bar Plots\nbeside = FALSE, stacked bar (output same as above); TRUE , juxtaposed bars.\n\n\nShow the code\nbarplot(test1_2.mat, \n        col = c(\"lightcyan\",\n                           \"lavender\",\n                           \"cornsilk\"),\n        legend = rownames(test1_2.mat),\n        args.legend = list(x = \"topright\"), \n        ylim = c(0,150000), \n        beside = TRUE)"
  },
  {
    "objectID": "handsOn_ex1.html",
    "href": "handsOn_ex1.html",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "",
    "text": "This study explores data visualisation using Tidyverse package."
  },
  {
    "objectID": "handsOn_ex1.html#load-r-packages",
    "href": "handsOn_ex1.html#load-r-packages",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\n\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "handsOn_ex1.html#acquire-data-source",
    "href": "handsOn_ex1.html#acquire-data-source",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "handsOn_ex1.html#import-data",
    "href": "handsOn_ex1.html#import-data",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data\n\n\n\n\n\n\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Missing Value\n\n\n\n\n\n\n\n\nShow the code\nskimr::skim(exam_data)\n\n\n\nData summary\n\n\nName\nexam_data\n\n\nNumber of rows\n322\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nID\n0\n1\n10\n10\n0\n322\n0\n\n\nCLASS\n0\n1\n2\n2\n0\n9\n0\n\n\nGENDER\n0\n1\n4\n6\n0\n2\n0\n\n\nRACE\n0\n1\n5\n7\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nENGLISH\n0\n1\n67.18\n14.69\n21\n59.00\n70\n78.00\n96\n▁▂▅▇▃\n\n\nMATHS\n0\n1\n69.33\n19.98\n9\n58.00\n74\n85.00\n99\n▁▂▃▇▇\n\n\nSCIENCE\n0\n1\n61.16\n18.18\n15\n49.25\n65\n74.75\n96\n▂▃▆▇▃\n\n\n\n\n\nRemarks :\nNo missing data."
  },
  {
    "objectID": "handsOn_ex1.html#data-visualisation",
    "href": "handsOn_ex1.html#data-visualisation",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4. DATA VISUALISATION",
    "text": "4. DATA VISUALISATION"
  },
  {
    "objectID": "handsOn_ex1.html#essential-grammatical-elements-in-ggplot2",
    "href": "handsOn_ex1.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Essential Grammatical Elements in ggplot2",
    "text": "Essential Grammatical Elements in ggplot2\n\nThemes\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\nA list of theme can be found at this link.\nEach theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title)."
  },
  {
    "objectID": "handsOn_ex1.html#essential-grammatical-elements-in-ggplot2-1",
    "href": "handsOn_ex1.html#essential-grammatical-elements-in-ggplot2-1",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Essential Grammatical Elements in ggplot2",
    "text": "Essential Grammatical Elements in ggplot2\n\nWorking with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\nWorking with theme\nA horizontal bar chart plotted using theme_classic().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\nWorking with theme\nPlot a horizontal bar chart looks similar to the figure below.\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white."
  },
  {
    "objectID": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-i",
    "href": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-i",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis I",
    "text": "Designing Data-drive Graphics for Analysis I\n\nThe original design\nA simple vertical bar chart for frequency analysis. Critics:\n\ny-aixs label is not clear (i.e. count)\nTo support effective comparison, the bars should be sorted by their resepctive frequencies.\nFor static graph, frequency values should be added to provide addition information."
  },
  {
    "objectID": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-i-1",
    "href": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-i-1",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis I",
    "text": "Designing Data-drive Graphics for Analysis I\n\nThe makeover design\nWith reference to the critics on the earlier slide, create a makeover looks similar to the figure on the right.\n\nThe makeover design\nThis code chunk uses fct_infreq() of forcats package.\nCredit: I learned this trick from Getting things into the right order of Prof. Claus O. Wilke, the author of Fundamentals of Data Visualization"
  },
  {
    "objectID": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-ii",
    "href": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-ii",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis II",
    "text": "Designing Data-drive Graphics for Analysis II\n\nThe original design"
  },
  {
    "objectID": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-ii-1",
    "href": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-ii-1",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis II",
    "text": "Designing Data-drive Graphics for Analysis II\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\nDesigning Data-drive Graphics for Analysis III\nThe original design\n\nThe histograms on the left are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\nCreate a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils."
  },
  {
    "objectID": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "handsOn_ex1.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis IV",
    "text": "Designing Data-drive Graphics for Analysis IV\n\nThe original design.\n\n\n\nCreate a makeover looks similar to the figure on the right.\nA within group scatterplot with reference lines."
  },
  {
    "objectID": "handsOn_ex1.html#reference",
    "href": "handsOn_ex1.html#reference",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "Reference",
    "text": "Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "handsOn_ex1.html#compare-histogram-by-r-graphics-with-ggplot2",
    "href": "handsOn_ex1.html#compare-histogram-by-r-graphics-with-ggplot2",
    "title": "Hands-on 1 - Programming Elegant DataVis with ggplot2",
    "section": "4.1 Compare Histogram by R Graphics with ggplot2",
    "text": "4.1 Compare Histogram by R Graphics with ggplot2\n\n\n\n\n\n\n4.1.1 Plot with R Graphics\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhist( ) - graphics - to compute a histogram.\n\n\n\n\n\nShow the code\nhist(exam_data$MATHS)\n\n\n\n\n\n\n4.1.2 Plot with ggplot2\n\n\n\n\n\n\nUsage of the code chunk below :\nggplot( ) - ggplot2 - to initialise a ggplot object.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\", \n                 fill = \"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n3.3.2 Create Smaller Data Frame\n\n3.3.2.1 initialise a ggplot object\n\n\nShow the code\nggplot(data = exam_data)\n\n\n\n\n\n\n\n3.3.2.2 introduce aesthetic mappings\naes( ) function to visualise the attributes of the data.\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\n\n3.3.2.3 add geometric objects\n\n\n– plot geom_bar\n\n\n\nGeometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n– plot geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nGeometric Objects: geom_dotplot The code chunk below performs the following two steps:\nscale_y_continuous() is used to turn off the y-axis, and binwidth argument is used to change the binwidth to 2.5.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n– plot histogram\nGeometric Objects: geom_histogram() In the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\nNote that the default bin is 30.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nEssential Grammatical Elements in ggplot2 Modifying a geometric object by changing geom() In the code chunk below,\nbins argument is used to change the number of bins to 20, fill argument is used to shade the histogram with light blue color, and color argument is used to change the outline colour of the bars in black\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\nEssential Grammatical Elements in ggplot2 Modifying a geometric object by changing aes() The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\nGeometric Objects: geom-density geom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\nKernel density estimation\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nGeometric Objects: geom-density The code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\nGeometric Objects: geom_boxplot geom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually. The code chunk below plots boxplots by using geom_boxplot().]\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nGeometric Objects: geom_boxplot Notches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\ngeom objects can be combined The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +              #<<      \n  geom_point(position=\"jitter\", #<<\n             size = 0.5)        #<<\n\n\n\n\n\nGeometric Objects: geom_violin geom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\nGeometric Objects: geom_violin() and geom_boxplot() The code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.]\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(fill=\"light blue\") +\n  geom_boxplot(alpha=0.5)           \n\n\n\n\n\nGeometric Objects: geom_point() geom_point() is especially useful for creating scatterplot. The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\nStatistics, stat The Statistics functions statistically transform data, usually as some form of summary. For example: frequency of values of a variable (bar graph) a mean a confidence limit There are two ways to use these functions: add a stat_() function and override the default geom, or add a geom_() function and override the default stat.\nWorking with stat The boxplots on the right are incomplete because the positions of the means were not shown.\nNext two slides will show you how to add the mean values on the boxplots.\nWorking with stat - the stat_summary() method The code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\nHow to add a best fit curve on a scatterplot? The scatterplot on the right shows the relationship of Maths and English grades of pupils.\nThe interpretability of this graph can be improved by adding a best fit curve.\nHow to add a best fit curve on a scatterplot? In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\nThe default method used is loess.]\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nHow to add a best fit curve on a scatterplot? The default smoothing method can be overridden as shown below.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFacets Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables.\nggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\nfacet_wrap() facet_wrap wraps a 1d sequence of panels into 2d.\nThis is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nWorking with facet_wrap() The code chunk below plots a trellis plot using facet-wrap().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nfacet_grid() function facet_grid() forms a matrix of panels defined by row and column facetting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nWorking with facet_grid() The code chunk below plots a trellis plot using facet_grid().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nPlot a trellis boxplot looks similar to the figure below.\n\n\n\n\nCoordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\nWorking with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nWorking with Coordinate\n\nHow to change to the y- and x-axis range?\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "handsOn_ex1.html#compare-charts-between-r-graphics-and-ggplot2",
    "href": "handsOn_ex1.html#compare-charts-between-r-graphics-and-ggplot2",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4.1 Compare Charts between R Graphics and ggplot2",
    "text": "4.1 Compare Charts between R Graphics and ggplot2\n\n\n\n\n\n\nCompare histogram by R Graphics and ggplot2 -\n\n4.1.1 Plot with R Graphics\n\n\n\n\n\n\nUsage of the code chunk below :\nhist( ) - graphics - to compute a histogram.\n\n\n\n\n\nShow the code\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n4.1.2 Plot with ggplot2\n\n\n\n\n\n\nUsage of the code chunk below :\nggplot( ) - ggplot2 - to initialise a ggplot object.\n\ngeom_histogram( )\nggtitle( )\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\", \n                 fill = \"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nRemarks :\nggplot2 allows to customise axis labels, title, grid lines."
  },
  {
    "objectID": "handsOn_ex1.html#explore-functions-in-ggplot2",
    "href": "handsOn_ex1.html#explore-functions-in-ggplot2",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4.2 Explore Functions in ggplot2",
    "text": "4.2 Explore Functions in ggplot2\n\n4.2.1 Create Base for a ggplot Object\n\n\n\n\n\n\ntext\n\n-- initialise a ggplot Object\n\nggplot(data = exam_data)\n\n\n\n\n\n\n-- introduce aesthetic mappings\n\n\n\n\n\n\nUsage of the code chunk below :\naes( ) - ggplot2 - to visualise the attributes of the data.\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\n\n\n\n\n4.2.2 Add Geometric Objects\n\n\n\n\n\n\ntext\n\n4.2.2.1 plot bar chart\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_bar( ) - ggplot2 - to makes the height of the bar proportional to the number of “MaTHS”.\n\n\n\n\n\n\nuse geom_col( ) if the bars need to represent values in the data.\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n4.2.2.2 plot dot chart\nThe width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm).\n\ndots are stacked.\neach dot representing one observation.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nRemarks :\nThe y-scale can be misleading. Hence, below dot chart, the y-axis will be turned off with scale-y-continuous( ) function.\n\n\n\n\n\n\nUsage of the code chunk below :\nbindwidth( ) - ggplot2 - to change the bin width to 2.5.\nscale_y_continuous( ) - ggplot2 - to turn off the y-axis.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n4.2.2.3 plot histogram\nNote that the default bin is 30.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n-- modify colour and bin\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"light blue\")  \n\n\n\n\n\n\n\n-- add subgroup to each bar\n\n\n\n\n\n\nUsage of the code chunk below :\nfill( ) - ggplot2 - to change colour to reflect the sub-group.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\n\n\n4.2.2.4 plot density chart\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_density( ) - ggplot2 - to computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\nIt is useful for continuous data that comes from an underlying smooth distribution.\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n-- plot two (2) kernel density lines with colour arguments under aes( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n-- plot two (2) kernel density with fill arguments under aes( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n4.2.2.5 plot box plot\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_boxplot( ) - ggplot2 - to display summary statistics (median, two hinges and two whiskers) and outliers.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n-- add notches to box plot\n\n\n\n\n\n\nUsage of the code chunk below :\nnotch( ) - ggplot2 - to make it easier to visually notice the distribution of median.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n4.2.2.6 mix plot\ngeom objects can be combined The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +              #<<      \n  geom_point(position=\"jitter\", #<<\n             size = 0.5)        #<<\n\n\n\n\n\nGeometric Objects: geom_violin geom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\nGeometric Objects: geom_violin() and geom_boxplot() The code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.]\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(fill=\"light blue\") +\n  geom_boxplot(alpha=0.5)           \n\n\n\n\n\nGeometric Objects: geom_point() geom_point() is especially useful for creating scatterplot. The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\nStatistics, stat The Statistics functions statistically transform data, usually as some form of summary. For example: frequency of values of a variable (bar graph) a mean a confidence limit There are two ways to use these functions: add a stat_() function and override the default geom, or add a geom_() function and override the default stat.\nWorking with stat The boxplots on the right are incomplete because the positions of the means were not shown.\nNext two slides will show you how to add the mean values on the boxplots.\nWorking with stat - the stat_summary() method The code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\nHow to add a best fit curve on a scatterplot? The scatterplot on the right shows the relationship of Maths and English grades of pupils.\nThe interpretability of this graph can be improved by adding a best fit curve.\nHow to add a best fit curve on a scatterplot? In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\nThe default method used is loess.]\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nHow to add a best fit curve on a scatterplot? The default smoothing method can be overridden as shown below.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFacets Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables.\nggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\nfacet_wrap() facet_wrap wraps a 1d sequence of panels into 2d.\nThis is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nWorking with facet_wrap() The code chunk below plots a trellis plot using facet-wrap().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\nfacet_grid() function facet_grid() forms a matrix of panels defined by row and column facetting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nWorking with facet_grid() The code chunk below plots a trellis plot using facet_grid().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\nPlot a trellis boxplot looks similar to the figure below.\n\n\n\n\n\nCoordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\nWorking with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nWorking with Coordinate\n\nHow to change to the y- and x-axis range?\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]