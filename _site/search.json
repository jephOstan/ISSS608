[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "VISUAL ANALYTICS & APPLICATIONS\nwith R Markdown, R Studio and Quarto\n\n\n\n\n\n\nContent Disclaimer\n\n\n\n\n\nThis micro-site is for academic purposes only. Any views or opinions, or comments represented in this site is personal and belongs solely to the site owner and do not represent those people, institutions or organisations that the owner may or may not be associated professionally or within a personal capacity unless explicitly stated.\nAll content on this site is for informational purposes only. This site’s owner makes no representation of the accuracy or completeness of any display information or any link on this site. The owner will not be liable for any errors, omissions or availability of any information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.\n\n\n\nmodule : ISSS608-AY2022-23Jan Visual Analytics and Applications\ninstructor : Dr. Kam Tin Seong, Associate Professor of Information Systems (Practice)\ninstitute : MITB-Analytics Track , Singapore Management University (SMU)\ntimeline : January 14, 2023 to March 25, 2023\n\n\n\n\ntopic\nlesson cover\ndate\n\n\n\n\n\nIntroduction to Visual Analytics\n\nHands-on Ex1\nJan 14, 2023\n\n\n\nDesigning Graphs to Enlighten\n\n\nJan 21, 2023\n\n\n\nInteractivity in Visual Analytics\n\n\nJan 28, 2023\n\n\n\nFundamentals of Visual Analytics\n\n\nFeb 4, 2023\n\n\n\nVisual Multivariate Analysis\n\n\nFeb 11, 2023\n\n\n\nIt’s About Time\n\n\nFeb 18, 2023\n\n\n\nGeoVisual Analytics\n\n\nFeb 25, 2023\n\n\n\nNetwork Data Visualisation and Analysis\n\n\nMar 11, 2023\n\n\n\nInformation Dashboard Design\n\n\nMar 18, 2023\n\n\n\nVisualising Financial Data\n\n\nMar 25, 2023"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name : Tan Zexeong, Joseph\nResidency : Singapore Permanent Resident"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise, we will explore the pros and cons of creating data visualisations using ggplot2 and Tableau. The two data visualisations included in this exercise are:\n\nA pareto chart showing the distribution of returns by a fictious superstore\nA population pyramid of Singapore by age cohort and gender\n\n\n\n\nThe raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using mutate() and then sorting via arrange().\nThe secondary axes in ggplot2 is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.\nAs ggplot2 produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using plotly package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using plotly tools.\nThe default visualization created with ggplot2 is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.\n\n\n\n\n\nIn R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.\nTableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic pareto plot can be created by stat_pareto() of ggQC, and a basic population pyramid can be plotted using nPyramid() of rCharts.\nVisualisations in Tableau are interactive, whereas ggplot2 in R is static. Extra effort is also required to customise the details of the visualisation in ggplot2. Interactivity and customisation can be included through ggplot and plotly. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.\n\n\n\n\nReference charts were already created using Tableau for in-class exercise 2, hence they will be used as the proposed sketch for the data visualisations for ggplot2.\n\n\n\n\n\nAs Tableau produces interactive charts and dashboards, we will use plotly to convert the ggplot2 plots to produce interactive graphs for a more objective comparison."
  },
  {
    "objectID": "Hands-on_Ex1.html#load-r-packages",
    "href": "Hands-on_Ex1.html#load-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "Hands-on_Ex1.html#acquire-data-source",
    "href": "Hands-on_Ex1.html#acquire-data-source",
    "title": "Take-home Exercise 1",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nTableau Fictatious Dataset\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”.\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "Hands-on_Ex1.html#import-data",
    "href": "Hands-on_Ex1.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0"
  },
  {
    "objectID": "Hands-on_Ex1.html#population-pyramid",
    "href": "Hands-on_Ex1.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html",
    "href": "pnote/test1.html",
    "title": "Exploration 1 - Pareto Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges to plot secondary-axis :\n\n\n\n\n\nThe functions in ggplot2 transform the secondary axis one-to-one based on the primary axis. Hence, the scale of the secondary axis plot will not be accurate.\nResolve by transforming the secondary axis with a coefficient to match the scale with the primary axis.\n\n\n\n\n\n\n\n\n\nLack of interactive function :\n\n\n\n\n\nThe ggplot2 can only produce static charts.\nResolve by using plotly functions to allow readers to hover over the chart to reveal details for each plotted point."
  },
  {
    "objectID": "pnote/test1.html#load-r-packages",
    "href": "pnote/test1.html#load-r-packages",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "pnote/test1.html#acquire-data-source",
    "href": "pnote/test1.html#acquire-data-source",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Tableau’s fictatious data set -\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”."
  },
  {
    "objectID": "pnote/test1.html#read-rds-file",
    "href": "pnote/test1.html#read-rds-file",
    "title": "Test & Explore",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test1.html#standardise-data",
    "href": "pnote/test1.html#standardise-data",
    "title": "Test & Explore",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test2.html",
    "href": "pnote/test2.html",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges in wrangling the raw data :\n\n\n\n\n\nThe age group variable, “AG”, is a character data type.\nIf it is used to plot the population pyramid, “10_to_14” will be parsed first instead of “5_to_9” after “0_to_4 is parsed.\nBecause of that, the order in the chart will be incorrect.\nResolve manually with these functions - mutate( ) and arrange( )."
  },
  {
    "objectID": "pnote/test2.html#load-r-packages",
    "href": "pnote/test2.html#load-r-packages",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test2.html#acquire-data-source",
    "href": "pnote/test2.html#acquire-data-source",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "pnote/test2.html#import-data",
    "href": "pnote/test2.html#import-data",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_sgp <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_sgp)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskim(pop_sgp)\n\n\n\nData summary\n\n\nName\npop_sgp\n\n\nNumber of rows\n75696\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nFA\n0\n1\n4\n13\n0\n6\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n53.89\n137.6\n0\n0\n0\n40\n2210\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.0\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - based on 2022 consensus data, ."
  },
  {
    "objectID": "pnote/test2.html#population-pyramid",
    "href": "pnote/test2.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html#import-data",
    "href": "pnote/test1.html#import-data",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the Excel file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - between 2017 and 2020, 793 unique customers contributed to the sales volume of 5,009 orders for 1,862 products.\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0\n\n\n\n\n\n\n\nShow the code\nsummary(unique(returns$Returned))\n\n\n   Length     Class      Mode \n        1 character character \n\n\nShow the code\nsummary(unique(returns$`Order ID`))\n\n\n   Length     Class      Mode \n      296 character character \n\n\nRemark :\nPreliminary data interpretation - there were 296 out of 5,009 orders returned."
  },
  {
    "objectID": "pnote/test1.html#population-pyramid",
    "href": "pnote/test1.html#population-pyramid",
    "title": "Test & Exploration 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test2.html#read-rds-file",
    "href": "pnote/test2.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test2.html#standardise-data",
    "href": "pnote/test2.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html#data-wrangling",
    "href": "pnote/test1.html#data-wrangling",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Join Data Frames\n\n\n\n\n\n\nCombine both data frames.\n\n3.3.1.1 join returns to orders\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to join the returns data frame to orders data frame by “Order ID” as the unique identifier.\n\n\n\n\n\nShow the code\nsummary(ss_ordersMgmt <- left_join(orders, \n                           returns,\n                        by = c('Order ID' = 'Order ID')\n                        ))\n\n\n     Row ID       Order ID           Order Date                    \n Min.   :   1   Length:12420       Min.   :2017-01-03 00:00:00.00  \n 1st Qu.:2466   Class :character   1st Qu.:2018-05-28 00:00:00.00  \n Median :5095   Mode  :character   Median :2019-07-18 00:00:00.00  \n Mean   :4983                      Mean   :2019-05-13 14:10:46.96  \n 3rd Qu.:7419                      3rd Qu.:2020-06-08 00:00:00.00  \n Max.   :9994                      Max.   :2020-12-30 00:00:00.00  \n                                                                   \n   Ship Date                       Ship Mode         Customer ID       \n Min.   :2017-01-07 00:00:00.00   Length:12420       Length:12420      \n 1st Qu.:2018-06-01 00:00:00.00   Class :character   Class :character  \n Median :2019-07-23 12:00:00.00   Mode  :character   Mode  :character  \n Mean   :2019-05-17 12:07:39.13                                        \n 3rd Qu.:2020-06-10 00:00:00.00                                        \n Max.   :2021-01-05 00:00:00.00                                        \n                                                                       \n Customer Name        Segment          Country/Region         City          \n Length:12420       Length:12420       Length:12420       Length:12420      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    State            Postal Code       Region           Product ID       \n Length:12420       Min.   : 1040   Length:12420       Length:12420      \n Class :character   1st Qu.:24153   Class :character   Class :character  \n Mode  :character   Median :60623   Mode  :character   Mode  :character  \n                    Mean   :57418                                        \n                    3rd Qu.:90045                                        \n                    Max.   :99301                                        \n                    NA's   :11                                           \n   Category         Sub-Category       Product Name           Sales          \n Length:12420       Length:12420       Length:12420       Min.   :    0.444  \n Class :character   Class :character   Class :character   1st Qu.:   17.904  \n Mode  :character   Mode  :character   Mode  :character   Median :   55.392  \n                                                          Mean   :  233.629  \n                                                          3rd Qu.:  212.680  \n                                                          Max.   :22638.480  \n                                                                             \n    Quantity         Discount          Profit            Returned        \n Min.   : 1.000   Min.   :0.0000   Min.   :-6599.978   Length:12420      \n 1st Qu.: 2.000   1st Qu.:0.0000   1st Qu.:    1.970   Class :character  \n Median : 3.000   Median :0.1500   Median :    9.072   Mode  :character  \n Mean   : 3.785   Mean   :0.1544   Mean   :   28.996                     \n 3rd Qu.: 5.000   3rd Qu.:0.2000   3rd Qu.:   29.372                     \n Max.   :14.000   Max.   :0.8000   Max.   : 8399.976                     \n                                                                         \n\n\nRemark :\nThere were 12,420 items sold, as indicated by the variable lengths.\n\n\n3.2.1.2 explore and inspect\n\n\nShow the code\nfreq(ss_ordersMgmt$Returned)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1 <NA>      9194      74.03           74.03\n2  Yes      3226      25.97          100.00\n\n\nRemark :\n3,226 out of ordered 12,420 items, approximately 25.97% of items returned.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nGroup items first before summarising the count of “Returned”.\n\n3.3.2.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group orders by specific param.\nsummarise( ) - dplyr - to count the number of returned orders.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nreturned_subCat <- ss_ordersMgmt %>%\n  group_by(`Sub-Category`) %>%\n  summarise(`Returned` = n()) %>%\n  arrange(desc(`Returned`)) %>%\n  ungroup()\n\nreturned_subCat\n\n\n# A tibble: 17 × 2\n   `Sub-Category` Returned\n   <chr>             <int>\n 1 Binders            1938\n 2 Paper              1734\n 3 Furnishings        1151\n 4 Phones             1121\n 5 Storage            1022\n 6 Accessories         965\n 7 Art                 926\n 8 Chairs              802\n 9 Appliances          603\n10 Labels              423\n11 Tables              405\n12 Fasteners           292\n13 Envelopes           291\n14 Bookcases           263\n15 Supplies            243\n16 Machines            157\n17 Copiers              84\n\n\n\n\n\n\n\n\n3.3.3 Compute Cumulative Frequency\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to compute new variables “cum_freq” and “cum”.\ncumsum( ) - base - to compute vector consists of cumulative sums elements.\n\n\n\n\n\nShow the code\ncf_subCat <- returned_subCat %>%\n  mutate(cum_freq = cumsum(Returned)) %>%\n  mutate(cum = cumsum(Returned)/sum(Returned))\n\ncf_subCat\n\n\n# A tibble: 17 × 4\n   `Sub-Category` Returned cum_freq   cum\n   <chr>             <int>    <int> <dbl>\n 1 Binders            1938     1938 0.156\n 2 Paper              1734     3672 0.296\n 3 Furnishings        1151     4823 0.388\n 4 Phones             1121     5944 0.479\n 5 Storage            1022     6966 0.561\n 6 Accessories         965     7931 0.639\n 7 Art                 926     8857 0.713\n 8 Chairs              802     9659 0.778\n 9 Appliances          603    10262 0.826\n10 Labels              423    10685 0.860\n11 Tables              405    11090 0.893\n12 Fasteners           292    11382 0.916\n13 Envelopes           291    11673 0.940\n14 Bookcases           263    11936 0.961\n15 Supplies            243    12179 0.981\n16 Machines            157    12336 0.993\n17 Copiers              84    12420 1"
  },
  {
    "objectID": "pnote/test1.html#pareto-chart",
    "href": "pnote/test1.html#pareto-chart",
    "title": "Exploration 1 - Pareto Chart",
    "section": "4.1 Pareto Chart",
    "text": "4.1 Pareto Chart\nIt is crucial to narrow down the 20% factor contributing to the 80% increment or drop in sales orders to avoid unnecessary waste of time and resources during preliminary decision-making for business development.\nHence, the Pareto chart is used to identify the 20% crucial factors and eliminates the 80% less crucial ones.\n\n4.1.1 Plot Static Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart and set the height of the bar to represent the actual returns counts.\ngeom_line( ) & geom_point - ggplot2 - to plot the line and scatter plot for the cumulative frequency of returned counts. The scatter plot helps identify each product’s cumulative frequency in a static chart.\nscale_y_continuous( ) - ggplot2 - to adjust the interval between the grid lines and to add a secondary y-axis to illustrate each product’s cumulative percentage of returns.\nThe secondary y-axis is based on a one-to-one transformation of the primary axis..\ntheme( ) - ggplot2 - to improve visibility by adjusting the plot’s background colour and grid lines.\n\n\n\n\n\nShow the code\nggplot(data = cf_subCat,\n       aes(x = reorder(`Sub-Category`,\n                       -`Returned`))) +\n  geom_col(aes(y = `Returned`),\n           fill = 'salmon', \n           width = 0.8) +\n  geom_point(aes(y = `cum_freq`), \n             color = 'grey20', \n             size = 0.8) +\n  geom_line(\n    aes(y = `cum_freq`, \n        group = 1), \n    colour = 'grey20', \n    size = 0.4) +\n  labs(x = \"Sub-Category\", \n       title = \"Pareto Chart of returns by sub-category\") +\n  scale_y_continuous(name = 'Returns (absolute frequency)', \n                     breaks = seq(0, 3500, 300), \n                     minor_breaks = seq(0, 3500, 100),\n                     sec.axis = sec_axis(~.*1/sum(cf_subCat$Returned), \n                                         name = 'Cumulative Frequency', \n                                         breaks = seq(0, 1, \n                                                      by = 0.1), \n                                         labels = scales::percent)) +\n  geom_hline(yintercept = 0.8*sum(cf_subCat$Returned), \n             linetype = \"dashed\", \n             color = \"grey50\") +\n  geom_text(\n    aes(17,\n        0.8*sum(Returned),\n        label = \"80.0%\",\n        vjust = -0.5),\n    size = 2) +\n  theme(panel.background = element_rect(\n    fill = 'white', \n    colour = 'grey60',\n    size = 0.5,\n    linetype = 'solid'),\n    panel.grid.major = element_line(\n      size = 0.3, \n      linetype = 'solid', \n      colour = 'grey85'),\n    panel.grid.minor = element_line(\n      size = 0.2, \n      linetype = 'solid', \n      colour = 'grey90'),\n    text = element_text(\n      size = 5.5),\n    axis.ticks.x = element_blank()) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot Interactive Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to plot an interactive Pareto chart that allows to view corresponding cumulative percentage for each product when hover across the line or the bars .\n\n\n\n\n\nShow the code\nplot_ly(cf_subCat, \n        x = ~reorder(`Sub-Category`,\n                     -`Returned`), \n        y = ~`Returned`, \n        type = \"bar\", \n        name = \"Returned\") %>%\n  add_trace(x = ~reorder(`Sub-Category`,\n                         -`Returned`), \n            y = ~`cum`*100,\n            type = \"scatter\", \n            mode = \"lines\", \n            yaxis = \"y2\", \n            name = \"Cum. %\") %>%\n  layout(title = \"Pareto chart of returns by sub-category\",\n         xaxis = list(\n           title = \"Sub-Category\"),\n         yaxis = list(\n           title = \"Returned (Absolute Frequency)\", \n           showgrid = F),\n         yaxis2 = list(\n           overlaying = \"y\", \n           side = \"right\", \n           title = \"Cumulative Percentage (%)\", \n           range = list(0, 100)),\n         legend = list(orientation = \"h\", \n                       yanchor = \"bottom\", \n                       y = 0.9,\n                       xanchor = \"top\",\n                       x = 0.2)) \n\n\n\n\n\n\n\nRemark :\nInteractive chart makes the interpretation easier by showing the sub-categories that below 80%. -\nTherewith, eight (8) sub-categories, namely Binders, Paper, Furnishings, Phones, Storage, Accessories, Art, Chairs, are identified to account for 80% of the returned products."
  },
  {
    "objectID": "pnote/test2.html#data-wrangling",
    "href": "pnote/test2.html#data-wrangling",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Compute Frequency Count\n\n\n\n\n\n\nCompute the frequency count by “age” and “sex”.\n\n3.3.1.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_agSx <- pop_sgp %>%\n  group_by(`AG`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = order)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(pop_agSx)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350"
  },
  {
    "objectID": "pnote/test2.html#plot-pyramid-chart",
    "href": "pnote/test2.html#plot-pyramid-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npyramid_agSx <- ggplot(pop_agSx, \n                       aes(x = ifelse(Sex == \"Males\",\n                                      yes = -Count,\n                                      no = Count),\n                           y = AG,\n                           fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npyramid_agSx\n\n\n\n\n\n\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n\n\n\n\n\n\nShow the code\nggplotly(pyramid_agSx, \n         session = \"knitr\")\n\n\n\n\n\n\nRemark :\nThe pyramid above shows the younger generation’s lower percentage, making Singapore’s population structure a constrictive type. That means an ageing population.\nBy June 2022, 4.07 million residents population with a median age of 42.1,1 which is approximately a 19% increase from the median age of 35.3 back in the year 20022.\nAlso, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore’s adjusted gender pay gap (GPG) is at 6%3.\nMeasures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions."
  },
  {
    "objectID": "pnote/test3.html",
    "href": "pnote/test3.html",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "",
    "text": "This study explores the interactivity and animation methods in designing an age-gender Pyramid chart using ggplot2 and supporting R packages between 2000 and 2020 at the planning area level.\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( )."
  },
  {
    "objectID": "pnote/test3.html#load-r-packages",
    "href": "pnote/test3.html#load-r-packages",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggiraph, gganimate, gifski)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test3.html#acquire-data-source",
    "href": "pnote/test3.html#acquire-data-source",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingapore Demographic & Geographic Distribution\n\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010” data set in csv format from Singstat.gov.sg.\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020” data set in csv format from Singstat.gov.sg.\n\n\n\n\n\n\n\n\nVariable Definition :\n\n\n\n\n\n“PA” = Planning Area\n“SZ” = Subzone\n“AG” = Age Group\n“Sex” = Gender\n“TOD” = Type of Dwelling\n“Pop” = Resident Count\n“Time” = Time / Period"
  },
  {
    "objectID": "pnote/test3.html#read-rds-file",
    "href": "pnote/test3.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test3.html#standardise-data",
    "href": "pnote/test3.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "about.html#working-experiences",
    "href": "about.html#working-experiences",
    "title": "Profile",
    "section": "WORKING EXPERIENCES",
    "text": "WORKING EXPERIENCES\n\nEnvironmental Consultancy\n\nenvironmental impact assessment (EIA) consultant\n\n\n\nFood & Beverages\n\noperational management, business-startup\n\n\n\nWall & Glass Decal & Retail\n\noperational management, designer, installer\n\n\n\nSoftware Solutions Consultancy\n\nproject management, quality assurance, ui/ux design, digital marketing, account supports, business development"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Profile",
    "section": "EDUCATION",
    "text": "EDUCATION\n\nAdvanced Degree\nInstitute : Singapore Management University - SMU\nCourse : Master of IT in Business, major in Analytics | Aug 2022 - Ongoing\nSome of the Modules Undertaken :\n\nApplied Geospatial Analytics\nData Analytics Lab with JMP Pro\nSpreadsheets Modeling for Decision Making\nPython Programming & Data Analysis\nApplied Statistical Analysis with R\n\n\n\nBachelor’s Degree\nInstitute : University Malaysia Sabah - UMS\nCourse : Bachelor of Science with Honours, major in Environmental Science | July 2006 - Oct 2009\nSome of the Modules Undertaken :\n\nPhysics & Environmental Remote Sensing\nGeographical Information System & Environmental Modelling\nEnvironmental Statistics\nEnvironmental Monitoring & Assessment\nSoil Science\nEcology & Microbiology\nEnvironmental Chemistry & Chemodynamics\nAir Quality Analysis and Noise\nHydrology & Water Quality Analysis\nPollution Control Technology\nEnvironmental Health & Toxicology\nSolid & Toxic Waste Management\nNatural Resources & Environmental Management\nMacro and Micro Economy\nPrinciples of Entrepreneurship\nFrench"
  },
  {
    "objectID": "pnote/test3.html#data-preparation",
    "href": "pnote/test3.html#data-preparation",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Import Data Sets\n\n\n\n\n\n\nThis section involves two(2) functions, i.e.\n\nimport CSV file as a table data frame that retains spec attribute.\ninspect parsing error, if any, when importing the data.\n\n\n\n\n\n\n\nimport these two(2) data sets separately to identify potential parsing errors.\n\n\n\n\n\n\n\n3.2.1.1 import CSV file :: demography between 2000 and 2010\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_0010 <- read_csv(\"data/respopagesextod2000to2010.csv\")\n\n\nRows: 1040592 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_0010)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 import CSV file :: demography between 2010 and 2020\n\n\nShow the code\npop_1020 <- read_csv(\"data/respopagesextod2011to2020.csv\")\n\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_1020)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.3 inspect imported data\n\n\n\n\n\n\nUsage of the code chunk below :\nglimpse( ) - dplyr - to get a glimpse of the imported data.\n\n\n\n\n\n-- pop_0010\n\n\nShow the code\nglimpse(pop_0010, 0)\n\n\nRows: 1,040,592\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\n\n\n-- pop_1020\n\n\nShow the code\nglimpse(pop_1020, 0)\n\n\nRows: 984,656\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\nRemarks :\n\nBoth data sets do not have the same number of rows, i.e. pop_0010(1,040,592 rows) and pop_1020 (984,656 rows).\nData types for “Pop” and “Time” are in  format."
  },
  {
    "objectID": "pnote/test3.html#data-wrangling",
    "href": "pnote/test3.html#data-wrangling",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Combine Data Frames\n\n\n\n\n\n\nRows bind function will be used instead of the columns bind function as the imported data frames have an unequal number of rows.\nHowever, using rows bind function will create a data frame with file size above 100 MB which exceed the limit.\nHence, change both “Time” and “Pop” from dbl type to int type first.\n\n3.3.1.1 convert data type\n\n\n\n\n\n\nUsage of the code chunk below :\nas.integer( ) - base - to convert both Time and Pop from double object to integer object.\nmutate( ) - dplyr - to add the converted variables into the data frame.\n\n\n\n\n\nShow the code\npop_0010 <- pop_0010 %>% \n  mutate(Time = as.integer(pop_0010$Time)) %>%\n  mutate(Pop = as.integer(pop_0010$Pop))\n\npop_1020 <- pop_1020 %>% \n  mutate(Time = as.integer(pop_1020$Time)) %>%\n  mutate(Pop = as.integer(pop_1020$Pop))\n\n\n\n\n3.3.1.2 combine both data frames\n\n\n\n\n\n\nUsage of the code chunk below :\nrbind( ) - dplyr - to union two or more data frames by row.\n\n\n\n\n\nShow the code\npop_0020 <- rbind(pop_0010, pop_1020)\n\n\nRemarks :\nThe combined data frame file size is 92.7 MB.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nTo compute frequency count, first group the variables.\n\n3.3.2.1 group variables\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age, gender, time and planning area.\nsummarise( ) - dplyr - to count the number of residents for each group.\n\n\n\n\n\nShow the code\nfreq_pop0020 <- pop_0020 %>%\n  group_by(`AG`, `Sex`, `Time`, `PA`) %>%\n  summarise(Count = sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG', 'Sex', 'Time'. You can override using\nthe `.groups` argument.\n\n\n\n\n3.3.2.2 inspect combined data frame\n\n\n\n\n\n\nUsage of the code chunk below :\nkable( ) - knitr - to create tables in Markdown.\n\n\n\n\n\nShow the code\nkable(head(freq_pop0020,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n\n\n\n\n\n\n\n3.3.2.3 check data consistency\n\n\nShow the code\nfunModeling::freq(freq_pop0020$Time)\n\n\nRemarks :\nAs shown in the plot above, the data volume is not the same. There are four (4) different sets of data volume.\n\n\n\n\n\n\n3.3.2 Remove Planning Areas without Residents\n\n\n\n\n\n\nFirst identify the planning areas with 0 resident count.\n\n3.3.2.1 list “PA” without resident\n\n\n\n\n\n\nUsage of the code chunk below :\nselect( ) - dplyr - to select variables by “PA” and “Count”.\ngroup_by( ) - dplyr - to group “PA” variable.\nsummarise( ) - dplyr - to count the total number of residents from 2000 to 2020.\nfilter( ) - dplyr - to identify the planning areas with no residents.\n\n\n\n\n\nShow the code\nno_pop <- freq_pop0020 %>%\n  select(`PA`, `Count`) %>%\n  group_by(`PA`) %>%\n  summarise(`Total` = sum(`Count`)) %>%\n  filter(`Total` == 0) %>%\n  select(`PA`) %>%\n  ungroup\n\n\n\n\nShow the code\nquestionr::freq(no_pop)\n\n\n                        n   % val%\nBoon Lay                1 7.7  7.7\nBoon Lay/Pioneer        1 7.7  7.7\nCentral Water Catchment 1 7.7  7.7\nChangi Bay              1 7.7  7.7\nMarina East             1 7.7  7.7\nMarina South            1 7.7  7.7\nPaya Lebar              1 7.7  7.7\nPioneer                 1 7.7  7.7\nSimpang                 1 7.7  7.7\nStraits View            1 7.7  7.7\nTengah                  1 7.7  7.7\nTuas                    1 7.7  7.7\nWestern Islands         1 7.7  7.7\n\n\nRemarks :\n!!!!! why Paya Lebar dont have residents?\n\n\n3.3.2.2 convert variable to non-distributed vector\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - pbdDMAT - to converts a distributed matrix into a non-distributed vector.\n\n\n\n\n\nShow the code\nno_pop_list <- as.vector(no_pop$PA)\n\n\nRemarks :\n!!!!! what is distributed and non-distributed data? !!!!! why need to convert?\n\n\n3.3.2.3 remove “PA” without resident\n\n\nShow the code\npop_0020_trim <- freq_pop0020 %>%\n  filter(!PA %in% no_pop_list)\n\n\n\n\n3.3.2.4 inspect output\n\n\nShow the code\nunique(pop_0020_trim$PA[pop_0020_trim$Count == 0])\n\n\n [1] \"Lim Chu Kang\"            \"Museum\"                 \n [3] \"North-Eastern Islands\"   \"Southern Islands\"       \n [5] \"Orchard\"                 \"Seletar\"                \n [7] \"Punggol\"                 \"Downtown Core\"          \n [9] \"Western Water Catchment\" \"Changi\"                 \n[11] \"Singapore River\"         \"Mandai\"                 \n[13] \"Sungei Kadut\"            \"Newton\"                 \n[15] \"River Valley\"            \"Sembawang\"              \n[17] \"Tanglin\"                \n\n\nRemarks :\n!!!!!“PA” without residents are removed????\n\n\n\n\n\n\n3.3.3 Set Display Order & Layout\n\n\n\n\n\n\nThis section involves 2 parts, i.e. set the orders and the display layout.\n\n3.3.3.1 set the display order\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - base - to encode a vector a a factor.\narrange( ) - dplyr - to sort variable by descending order.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_0020_sort <- pop_0020_trim %>%\n  mutate(AG = factor(AG,\n                     levels = order)) %>%\n  arrange(AG)\n\n\n\n\n3.3.3.2 set the display layout\n\n\n\n\n\n\nUsage of the code chunk below :\nifelse( ) - base - to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npop_0020_sort$nCount = ifelse(pop_0020_sort$Sex == \"Males\",\n                               yes = -pop_0020_sort$Count,\n                               no = pop_0020_sort$Count)\n\n\n\n\n-- inspect output\n\n\nShow the code\nkable(head(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n\n\n\nShow the code\nkable(tail(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180"
  },
  {
    "objectID": "pnote/test3.html#data-wrangling-1",
    "href": "pnote/test3.html#data-wrangling-1",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "4.2 Data Wrangling",
    "text": "4.2 Data Wrangling\nBy default, the values of the data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dpackage.\nNext, ifelse() was used to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop0020 <- new_pop0020 %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nsorted_pop0020$nCount = ifelse(sorted_pop0020$Sex == \"Males\", \n                                 yes = -sorted_pop0020$Count, \n                                 no = sorted_pop0020$Count)\n\nkable(head(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n0_to_4\nFemales\n2000\nBishan\n2560\n2560\n\n\n0_to_4\nFemales\n2000\nBukit Batok\n4400\n4400\n\n\n0_to_4\nFemales\n2000\nBukit Merah\n3240\n3240\n\n\n0_to_4\nFemales\n2000\nBukit Panjang\n3690\n3690\n\n\n\n\n\n\n\nShow the code\nkable(tail(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nTampines\n310\n-310\n\n\n90_and_over\nMales\n2020\nTanglin\n50\n-50\n\n\n90_and_over\nMales\n2020\nToa Payoh\n340\n-340\n\n\n90_and_over\nMales\n2020\nWestern Water Catchment\n0\n0\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180"
  },
  {
    "objectID": "pnote/test3.html#plot-pyramid-chart",
    "href": "pnote/test3.html#plot-pyramid-chart",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid"
  },
  {
    "objectID": "pnote/test3.html#by-year",
    "href": "pnote/test3.html#by-year",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "5.1 By Year",
    "text": "5.1 By Year\n\nANIMATED AGE-SEX PYRAMID\nThe first visualisation plotted is an animation of Singapore's Total Population from 2000 to 2020.\nFor this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using gganimate library, the static plot was converted into an animated pyramid via transition_time() and ease_aes() function. A moving subtitle was also included to relay the correct year information to the viewer.\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\nfig <-\n  ggplot(sorted_pop0020, aes(x = nCount, y = AG, fill = Sex)) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", \n        y = \"Age Group\", \n        title='Singapore Age-Sex Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\n\nfig + \n  transition_time(Time) +\n  ease_aes('linear') +\n  labs (subtitle = 'Year: {frame_time}')\n\n\n\n\n\nRemark :"
  },
  {
    "objectID": "pnote/test3.html#by-year-and-planning-location",
    "href": "pnote/test3.html#by-year-and-planning-location",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "5.2 By Year and Planning Location",
    "text": "5.2 By Year and Planning Location\nNext, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.\n\nDEFINE TIME AND PLANNING AREA\nThe time and planning area for each unique instance were defined using a for loop. The annotation variables for the drop down menu was also defined.\n\n\nShow the code\nyear_list <- list()\nfor (i in 1:length(unique(sorted_pop0020$Time))) { \n  year_list[[i]] <- list(method = \"restyle\",\n                         args = list(\"transforms[0].value\", unique(sorted_pop0020$Time)[i]),\n                         label = unique(sorted_pop0020$Time)[i])\n}\n\nPA_list <- list()\nfor (j in 1:length(unique(sorted_pop0020$PA))) { \n  PA_list[[j]] <- list(method = \"restyle\",\n                        args = list(\"transforms[1].value\", unique(sorted_pop0020$PA)[j]),\n                        label = unique(sorted_pop0020$PA)[j])\n}\n\nannot <- list(list(text = \"Select Planning Area:\",\n                   x = 1.61,\n                   y = 0.78,\n                   xref = 'paper',\n                   yref = 'paper',\n                   showarrow = FALSE))\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n** INTERACTIVE GRAPH WITH SLIDER AND DROPDOWN MENU**\nAn interactive graph was then generated using plotly(). A tooltip was added using the hovertemplate function to include age group, gender and population count.\nThe transforms - filter function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, layout - Updatemenus and layout - Sliders was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(sorted_pop0020, \n        x = ~nCount, \n        y = ~AG,\n        type = 'bar', \n        orientation = 'h',\n        hovertemplate = ~paste(\"<br>Age Group:\", AG,\n                               \"<br>Gender:\", Sex,\n                               \"<br>Population:\", Count),\n        color = ~Sex,\n        colors = c(\"lightpink\", \"lightblue\"),\n        transforms = list(list(type = 'filter',\n                               target = ~Time,\n                               operation = '=',\n                               value = unique(sorted_pop0020$Time)[1]),\n                          list(type = 'filter',\n                               target = ~PA,\n                               operation = '=',\n                               value = unique(sorted_pop0020$PA)[1]))\n                          )%>%\n  layout(autosize = F, bargap = 0.1, barmode = 'overlay',\n         xaxis = list(title = \"Population\",\n                      tickmode = 'array', tickvals = c(-10000, -8000, -6000, -4000, -2000, 0, \n                                                       2000, 4000, 6000, 8000, 10000),\n                      ticktext = c('10k', '8k', '6k', '4k', '2k', '0', \n                                   '2k', '4k', '6k', '8k', '10k')),\n         yaxis = list(title = \"Age Group\"),\n         title = 'Singapore Age-Sex Population Pyramid',\n         updatemenus = list(list(type = 'dropdown',\n                                 x = 1.6, y = 0.7,\n                                 buttons = PA_list)\n                            ),\n         sliders = list(list(\n                          active = 1, \n                          currentvalue = list(prefix = \"Year: \"), \n                          pad = list(t = 60), \n                          steps = year_list)), \n         annotations = annot)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test3.html#tableau-vs.-r",
    "href": "pnote/test3.html#tableau-vs.-r",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "5.1 Tableau vs. R",
    "text": "5.1 Tableau vs. R\n\nAnimations and interactivity in Tableau can easily be generated by a few clicks, whereas it requires more code and hence more tedious in R. However, this also means that visualisation in R is reproducible and repeatable as the steps can be traced back.\nR allows for more customisation of the visualisations as compared to Tableau. For example, the names widgets can be easily modified to detailed levels, whereas Tableau only takes in the data from the Table.\nThe animation in R may require more customisation to achieve less jerky animation as compared to Tableau."
  },
  {
    "objectID": "pnote/test0.html",
    "href": "pnote/test0.html",
    "title": "Test & Explore 2",
    "section": "",
    "text": "--"
  },
  {
    "objectID": "pnote/test0.html#load-r-packages",
    "href": "pnote/test0.html#load-r-packages",
    "title": "Test & Explore 2",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, sf, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork)\n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test0.html#acquire-data-source",
    "href": "pnote/test0.html#acquire-data-source",
    "title": "Test & Explore 2",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nDataset will be the water points from Nigeria"
  },
  {
    "objectID": "pnote/test0.html#read-rds-file",
    "href": "pnote/test0.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test0.html#standardise-data",
    "href": "pnote/test0.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html#summary-of-r-functions",
    "href": "pnote/test1.html#summary-of-r-functions",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test1.html#base",
    "href": "pnote/test1.html#base",
    "title": "Exploration 1 - Pareto Chart",
    "section": "base :",
    "text": "base :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test3.html#summary-of-r-functions",
    "href": "pnote/test3.html#summary-of-r-functions",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test3.html#sort-data",
    "href": "pnote/test3.html#sort-data",
    "title": "Exploration 3 :: Interactive & Animated Pyramid Chart",
    "section": "3.3.4 Sort Data",
    "text": "3.3.4 Sort Data\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\narrange( ) - dpackage - to select variables by “PA” and “Count”.\nifelse( ) - base - to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.\n\n\n\nBy default, the values of the data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dpackage.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop0020 <- new_pop0020 %>%\n  mutate(AG =  factor(AG, \n                      levels = order)) %>%\n  arrange(AG)\n\nsorted_pop0020$nCount = ifelse(sorted_pop0020$Sex == \"Males\", \n                                 yes = -sorted_pop0020$Count, \n                                 no = sorted_pop0020$Count)\n\nkable(head(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n0_to_4\nFemales\n2000\nBishan\n2560\n2560\n\n\n0_to_4\nFemales\n2000\nBukit Batok\n4400\n4400\n\n\n0_to_4\nFemales\n2000\nBukit Merah\n3240\n3240\n\n\n0_to_4\nFemales\n2000\nBukit Panjang\n3690\n3690\n\n\n\n\n\nRemarks :\n\n\nShow the code\nkable(tail(sorted_pop0020))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nTampines\n310\n-310\n\n\n90_and_over\nMales\n2020\nTanglin\n50\n-50\n\n\n90_and_over\nMales\n2020\nToa Payoh\n340\n-340\n\n\n90_and_over\nMales\n2020\nWestern Water Catchment\n0\n0\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180\n\n\n\n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test3.html#plot-animated-pyramid-chart",
    "href": "pnote/test3.html#plot-animated-pyramid-chart",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "4.1 Plot Animated Pyramid Chart",
    "text": "4.1 Plot Animated Pyramid Chart\n\n4.1.1 Plot Population from 2000 to 2020\n\n\n\n\n\n\nFor this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using gganimate library, the static plot was converted into an animated pyramid via transition_time() and ease_aes() function. A moving subtitle was also included to relay the correct year information to the viewer.\n\n\n\n\n\n\nUsage of the code chunk below :\ntransition_time( ) - gganimate - to display the data that represented specific point in time.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\nanime_pyramid <- ggplot(pop_0020_sort,\n                        aes(x = nCount,\n                            y = AG, \n                            fill = Sex)) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, \n                                  150000, \n                                  50000), \n                     labels = paste0(\n                       as.character(c(seq(150, 0, -50),\n                                      seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age Group\", \n        title = 'Singapore Age-Gender Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\"))\n\n\n\n\nShow the code\nanime_pyramid + \n  transition_time(Time) +\n  ease_aes('linear') +\n  labs (subtitle = 'Year: {frame_time}')\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot by Year and Planning Location\n\n\n\n\n\n\nNext, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.\n\n4.1.2.1 define time & planning area\nDefine the time and planning area for each unique instance using a for loop.\n\n\nShow the code\nyear_list <- list()\nfor (i in 1:length(\n  unique(\n    pop_0020_sort$Time))) \n  {year_list[[i]] <- list(method = \"restyle\",\n                          args = list(\"transforms[0].value\",\n                                      unique(pop_0020_sort$Time)[i]),\n                          label = unique(pop_0020_sort$Time)[i])\n  }\n\nPA_list <- list()\nfor (j in 1:length(unique(pop_0020_sort$PA))) { \n  PA_list[[j]] <- list(method = \"restyle\",\n                        args = list(\"transforms[1].value\", \n                                    unique(pop_0020_sort$PA)[j]),\n                        label = unique(pop_0020_sort$PA)[j])\n  }\n\n\n\n\n4.1.2.2 define drop down menu\n\n\nShow the code\nannot <- list(\n  list(text = \"Select Planning Area:\",\n       x = 1.61,\n       y = 0.78,\n       xref = 'paper',\n       yref = 'paper',\n       showarrow = FALSE))\n\n\n\n\n4.1.2.3 plot with widget\nAn interactive graph was then generated using plotly(). A tooltip was added using the hovertemplate function to include age group, gender and population count.\nThe transforms - filter function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, layout - Updatemenus and layout - Sliders was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to initiate a plotly visualisation.\n\n\n\n\n\nShow the code\nplot_ly(pop_0020_sort, \n        x = ~nCount, \n        y = ~AG,\n        type = 'bar', \n        orientation = 'h',\n        hovertemplate = ~paste(\"<br>Age Group:\", AG,\n                               \"<br>Gender:\", Sex,\n                               \"<br>Population:\", Count),\n        color = ~Sex,\n        colors = c(\"lightpink\", \"lightblue\"),\n        transforms = list(\n          list(type = 'filter',\n               target = ~Time,\n               operation = '=',\n               value = unique(pop_0020_sort$Time)[1]),\n          list(type = 'filter',\n               target = ~PA,\n               operation = '=',\n               value = unique(pop_0020_sort$PA)[1]))) %>%\n  layout(autosize = F, \n         bargap = 0.1, \n         barmode = 'overlay',\n         xaxis = list(\n           title = \"Population\",\n           tickmode = 'array', \n           tickvals = c(-10000, -8000, -6000, -4000, -2000, \n                        0, 2000, 4000, 6000, 8000, 10000),\n           ticktext = c('10k', '8k', '6k', '4k', '2k', '0',\n                        '2k', '4k', '6k', '8k', '10k')),\n         yaxis = list(\n           title = \"Age Group\"),\n         title = 'Singapore Age-Sex Population Pyramid',\n         updatemenus = list(\n           list(type = 'dropdown',\n                x = 1.6, \n                y = 0.7,\n                buttons = PA_list)),\n         sliders = list(\n           list(\n             active = 1,\n             currentvalue = list(prefix = \"Year: \"),\n             pad = list(t = 60),\n             steps = year_list)),\n         annotations = annot)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test5.html",
    "href": "pnote/test5.html",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "",
    "text": "In this take-home exercise, we will explore the impact of COVID-19 on the stock prices of top 40 companies in Singapore by market capitalisation.\n\n\nThe data extraction and cleaning required some effort as the company names had to be referenced from another table, and extracted using the tidyquant package. Some experimentation also had to be done to optimise the frequency of the data to be extracted, as daily data may lower the clarity due to minute fluctuations as compared to weekly data.\nThe horiplot required extensive customisation to make it aesthetically pleasing, such as the sizing of the text fonts, adjusting the scale of the colour and the origin of the graph. Furthermore, as a time series scale was used for the x-axis, the date labels required special customisation using the scale_x_date function.\nComing from a non-financial background, the task took abit of research to figure out financial terms and technical standards for stock market price monitoring\n\n\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( ).\n\n\n\n\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( ).\n\n\n\n\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( )."
  },
  {
    "objectID": "pnote/test5.html#load-r-packages",
    "href": "pnote/test5.html#load-r-packages",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, rmarkdown, tidyquant, lubridate, ggthemes, data.table, ggHoriPlot)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test5.html#summary-of-r-functions",
    "href": "pnote/test5.html#summary-of-r-functions",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test5.html#acquire-data-source",
    "href": "pnote/test5.html#acquire-data-source",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThe dataset used for this practice is the stock prices of top 40 companies in Singapore by market capitalisation between 1st January 2020 - 31st December 2021.\n\nKaggle Starbucks nutrition data set\n\nDownload “starbucks_drink.csv” data set."
  },
  {
    "objectID": "pnote/test5.html#import-data",
    "href": "pnote/test5.html#import-data",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nsgp_marketCap <- read_csv(\"data/sgp_marketcap.csv\")\n\n\nRows: 53 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Symbol, country\ndbl (3): Rank, marketcap, price (USD)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(sgp_marketCap)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(sgp_marketCap,0)\n\n\nRows: 53\nColumns: 6\n$ Rank          <dbl> …\n$ Name          <chr> …\n$ Symbol        <chr> …\n$ marketcap     <dbl> …\n$ `price (USD)` <dbl> …\n$ country       <chr> …\n\n\n\n\nShow the code\nkable(head(sgp_marketCap))\n\n\n\n\n\n\n\n\n\n\n\n\n\nRank\nName\nSymbol\nmarketcap\nprice (USD)\ncountry\n\n\n\n\n1\nDBS Group\nD05.SI\n65157130700\n25.32\nSingapore\n\n\n2\nOCBC Bank\nO39.SI\n40864457238\n9.09\nSingapore\n\n\n3\nUOB\nU11.SI\n38371794525\n22.91\nSingapore\n\n\n4\nSingtel\nZ74.SI\n31683620839\n1.92\nSingapore\n\n\n5\nSea (Garena)\nSE\n29227227136\n52.03\nSingapore\n\n\n6\nWilmar International\nF34.SI\n19429093823\n3.11\nSingapore\n\n\n\n\n\nSince the dataset is already ranked by market capitalisation, we can extract the Top 40 by using head().\n\n\nShow the code\ntop40 <- head(sgp_marketCap, 40)\n\n\nRemarks :\nThe “Caffein(mg)” variable consist of mixed values including absolute and values in range."
  },
  {
    "objectID": "pnote/test5.html#data-wrangling",
    "href": "pnote/test5.html#data-wrangling",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Edit “Caffeine(mg)” Variable\n\n\n\n\n\n\nFirst remove special character, then replace the range values with the maximum value.\n\n3.3.1.1 remove special character\nRemove special character from ‘40+’.\nOnly the columns containing the symbol and name of the company were extracted, and the columns were renamed in preparation for joining of tables later on.\n\n\nShow the code\ntop40 <- top40[-c(1, 4:6)]\ntop40 <- rename(top40, symbol = Symbol)\ntop40 <- rename(top40, name = Name)\n\nkable(head(top40))\n\n\n\n\n\nname\nsymbol\n\n\n\n\nDBS Group\nD05.SI\n\n\nOCBC Bank\nO39.SI\n\n\nUOB\nU11.SI\n\n\nSingtel\nZ74.SI\n\n\nSea (Garena)\nSE\n\n\nWilmar International\nF34.SI\n\n\n\n\n\n\n\n3.3.1.2 update with for-loop function\nThe company symbols and names were listed using as.vector() function according to the rank.\n\n\nShow the code\ntop40_sym <- as.vector(top40$symbol)\ntop40_name <- as.vector(top40$name)\n\n\n\n\n3.3.1.3 convert variable type\nUsing the list of Top 40 symbols, the stock prices of the companies from 2020 to 2021 were extracted using the tidyquant package. Weekly period was used as it provides a longer term comparison compared to daily period, which may be too fluctuative to point out major trends.\n\n\nShow the code\nstock_data_weekly = tq_get(top40_sym,\n                          get = \"stock.prices\",\n                          from = \"2020-01-01\",\n                          to = \"2021-12-31\")%>%\n  group_by(symbol) %>%\n  tq_transmute(select     = NULL, \n               mutate_fun = to.period, \n               period  = \"weeks\")\n\nkable(head(stock_data_weekly))\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\n\n\n\n\nD05.SI\n2020-01-03\n26.17\n26.32\n25.83\n26.00\n4336600\n22.52781\n\n\nD05.SI\n2020-01-10\n26.00\n26.12\n25.92\n26.00\n7869500\n22.52781\n\n\nD05.SI\n2020-01-17\n26.45\n26.45\n26.32\n26.35\n2347500\n22.83107\n\n\nD05.SI\n2020-01-24\n26.37\n26.38\n26.16\n26.20\n1474500\n22.70110\n\n\nD05.SI\n2020-01-31\n25.62\n25.65\n25.20\n25.37\n8167400\n21.98194\n\n\nD05.SI\n2020-02-07\n25.57\n25.65\n25.21\n25.31\n5097800\n21.92996\n\n\n\n\n\n\n\n\n\n\n\nRemarks :\nThe"
  },
  {
    "objectID": "pnote/test5.html#section",
    "href": "pnote/test5.html#section",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.4",
    "text": "3.4"
  },
  {
    "objectID": "pnote/test4.html",
    "href": "pnote/test4.html",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "",
    "text": "This study explores the visualisation of multidimensional data from Starbucks drinks.\n!!!!! Questions\n\nfor data visualisation, display unit next to variable a distraction? ok to remove so that the display not clutter?\nhow missing data affect the plots?\n\n\n\n\n\n\n\nData Wrangling Challenges :\n\n\n\n\n\n\nSome values have a special character, “+”, while others are presented as range values.\nOnly specific drinks are duplicated.\n\nmanually remove the special character and use loop with ifelse( ) function to replace the range value with the max of range value.\n\n\n\n\n\n\n\n\n\nNormalise Character Type Variable :\n\n\n\n\n\nSince the nutritional value is different according to the sizes and volumes. Hence, the milk type and whipped cream must be normalised by volume before plotting the heatmap."
  },
  {
    "objectID": "pnote/test4.html#load-r-packages",
    "href": "pnote/test4.html#load-r-packages",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, ggplot2, ggcorrplot, corrplot, ggstatsplot, heatmaply, dendextend, parallelPlot, factoextra)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test4.html#summary-of-r-functions",
    "href": "pnote/test4.html#summary-of-r-functions",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test4.html#acquire-data-source",
    "href": "pnote/test4.html#acquire-data-source",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nKaggle Starbucks nutrition data set\n\nDownload “starbucks_drink.csv” data set."
  },
  {
    "objectID": "pnote/test4.html#import-data",
    "href": "pnote/test4.html#import-data",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\ndrink <- read_csv(\"data/starbucks_drink.csv\")\n\n\nRows: 2068 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Category, Name, Caffeine(mg), Size, Milk, Whipped Cream\ndbl (12): Portion(fl oz), Calories, Calories from fat, Total Fat(g), Saturat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(drink)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(drink,0)\n\n\nRows: 2,068\nColumns: 18\n$ Category                <chr> …\n$ Name                    <chr> …\n$ `Portion(fl oz)`        <dbl> …\n$ Calories                <dbl> …\n$ `Calories from fat`     <dbl> …\n$ `Total Fat(g)`          <dbl> …\n$ `Saturated fat(g)`      <dbl> …\n$ `Trans fat(g)`          <dbl> …\n$ `Cholesterol(mg)`       <dbl> …\n$ `Sodium(mg)`            <dbl> …\n$ `Total Carbohydrate(g)` <dbl> …\n$ `Dietary Fiber(g)`      <dbl> …\n$ `Sugars(g)`             <dbl> …\n$ `Protein(g)`            <dbl> …\n$ `Caffeine(mg)`          <chr> …\n$ Size                    <chr> …\n$ Milk                    <chr> …\n$ `Whipped Cream`         <chr> …\n\n\n\n\nShow the code\nskimr::skim(drink)\n\n\n\nData summary\n\n\nName\ndrink\n\n\nNumber of rows\n2068\n\n\nNumber of columns\n18\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n12\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCategory\n0\n1.00\n3\n29\n0\n10\n0\n\n\nName\n0\n1.00\n10\n54\n0\n119\n0\n\n\nCaffeine(mg)\n0\n1.00\n1\n6\n0\n76\n0\n\n\nSize\n12\n0.99\n4\n11\n0\n7\n0\n\n\nMilk\n271\n0.87\n6\n19\n0\n6\n0\n\n\nWhipped Cream\n813\n0.61\n9\n16\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPortion(fl oz)\n0\n1\n16.22\n5.64\n8\n12.0\n16.00\n20\n30.0\n▇▆▂▃▁\n\n\nCalories\n0\n1\n223.37\n136.72\n0\n117.5\n210.00\n320\n650.0\n▇▇▆▃▁\n\n\nCalories from fat\n0\n1\n55.33\n50.69\n0\n15.0\n40.00\n90\n240.0\n▇▃▂▁▁\n\n\nTotal Fat(g)\n0\n1\n6.13\n5.63\n0\n1.5\n4.50\n10\n27.0\n▇▃▂▁▁\n\n\nSaturated fat(g)\n0\n1\n3.51\n3.73\n0\n0.0\n2.25\n6\n18.0\n▇▃▁▁▁\n\n\nTrans fat(g)\n0\n1\n0.02\n0.09\n0\n0.0\n0.00\n0\n0.5\n▇▁▁▁▁\n\n\nCholesterol(mg)\n0\n1\n14.31\n17.48\n0\n0.0\n5.00\n25\n75.0\n▇▂▂▁▁\n\n\nSodium(mg)\n0\n1\n153.52\n103.18\n0\n70.0\n150.00\n230\n490.0\n▇▇▅▂▁\n\n\nTotal Carbohydrate(g)\n0\n1\n37.08\n23.39\n0\n19.0\n35.00\n53\n99.0\n▇▇▆▃▁\n\n\nDietary Fiber(g)\n0\n1\n0.85\n1.33\n0\n0.0\n0.00\n1\n7.0\n▇▁▁▁▁\n\n\nSugars(g)\n0\n1\n34.48\n22.31\n0\n17.0\n32.00\n49\n93.0\n▇▇▆▃▁\n\n\nProtein(g)\n0\n1\n5.18\n4.44\n0\n2.0\n4.00\n7\n19.0\n▇▆▂▂▁\n\n\n\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:5, 15:18)]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nPortion(fl oz)\nCalories\nCalories from fat\nCaffeine(mg)\nSize\nMilk\nWhipped Cream\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n160\n25\n40–60\nVenti Iced\nAlmond\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n35\n40–60\nVenti Iced\nCoconut\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n0\n40–60\nVenti Iced\nNonfat milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n230\n50\n40–60\nVenti Iced\nWhole Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n35\n40\nVenti Iced\n2% Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n25\n40–60\nVenti Iced\nSoy (United States)\nNA\n\n\n\n\n\n\n\nShow the code\nquestionr::freq(unique(drink$`Caffeine(mg)`))\n\n\n       n   % val%\n0      1 1.3  1.3\n0–15   1 1.3  1.3\n10     1 1.3  1.3\n100    1 1.3  1.3\n110    1 1.3  1.3\n115    1 1.3  1.3\n120    1 1.3  1.3\n125    1 1.3  1.3\n130    1 1.3  1.3\n140    1 1.3  1.3\n145    1 1.3  1.3\n15     1 1.3  1.3\n15–20  1 1.3  1.3\n15–25  1 1.3  1.3\n150    1 1.3  1.3\n155    1 1.3  1.3\n165    1 1.3  1.3\n170    1 1.3  1.3\n175    1 1.3  1.3\n180    1 1.3  1.3\n185    1 1.3  1.3\n190    1 1.3  1.3\n195    1 1.3  1.3\n20     1 1.3  1.3\n20–25  1 1.3  1.3\n200    1 1.3  1.3\n205    1 1.3  1.3\n215    1 1.3  1.3\n225    1 1.3  1.3\n235    1 1.3  1.3\n240    1 1.3  1.3\n25     1 1.3  1.3\n25–30  1 1.3  1.3\n25–40  1 1.3  1.3\n255    1 1.3  1.3\n260    1 1.3  1.3\n265    1 1.3  1.3\n270    1 1.3  1.3\n275    1 1.3  1.3\n280    1 1.3  1.3\n290    1 1.3  1.3\n30     1 1.3  1.3\n30–35  1 1.3  1.3\n300    1 1.3  1.3\n310    1 1.3  1.3\n315    1 1.3  1.3\n320    1 1.3  1.3\n330    1 1.3  1.3\n340    1 1.3  1.3\n35     1 1.3  1.3\n35–45  1 1.3  1.3\n360    1 1.3  1.3\n375    1 1.3  1.3\n40     1 1.3  1.3\n40–45  1 1.3  1.3\n40–60  1 1.3  1.3\n40+    1 1.3  1.3\n410    1 1.3  1.3\n425    1 1.3  1.3\n445    1 1.3  1.3\n45     1 1.3  1.3\n45–55  1 1.3  1.3\n475    1 1.3  1.3\n5–85   1 1.3  1.3\n50     1 1.3  1.3\n50–55  1 1.3  1.3\n55     1 1.3  1.3\n65     1 1.3  1.3\n70     1 1.3  1.3\n70–85  1 1.3  1.3\n75     1 1.3  1.3\n80     1 1.3  1.3\n85     1 1.3  1.3\n90     1 1.3  1.3\n90–110 1 1.3  1.3\n95     1 1.3  1.3\n\n\nShow the code\nquestionr::freq(unique(drink$`Trans fat(g)`))\n\n\n    n  % val%\n0   1 50   50\n0.5 1 50   50\n\n\nShow the code\nquestionr::freq(unique(drink$Size))\n\n\n            n    % val%\nGrande      1 12.5 14.3\nKids        1 12.5 14.3\nShort       1 12.5 14.3\nTall        1 12.5 14.3\nTrenta Iced 1 12.5 14.3\nVenti       1 12.5 14.3\nVenti Iced  1 12.5 14.3\nNA          1 12.5   NA\n\n\nShow the code\nquestionr::freq(unique(drink$Milk))\n\n\n                    n    % val%\n2% Milk             1 14.3 16.7\nAlmond              1 14.3 16.7\nCoconut             1 14.3 16.7\nNonfat milk         1 14.3 16.7\nSoy (United States) 1 14.3 16.7\nWhole Milk          1 14.3 16.7\nNA                  1 14.3   NA\n\n\nShow the code\nquestionr::freq(unique(drink$`Whipped Cream`))\n\n\n                 n  % val%\nNo Whipped Cream 1 20   25\nSweetened        1 20   25\nUnsweetened      1 20   25\nWhipped Cream    1 20   25\nNA               1 20   NA\n\n\n\n\nShow the code\nlength(drink$Name)\n\n\n[1] 2068\n\n\nShow the code\nquestionr::freq(drink$`Whipped Cream`)\n\n\n                   n    % val%\nNo Whipped Cream 539 26.1 42.9\nSweetened         90  4.4  7.2\nUnsweetened       92  4.4  7.3\nWhipped Cream    534 25.8 42.5\nNA               813 39.3   NA\n\n\nShow the code\nquestionr::freq(drink$Milk)\n\n\n                      n    % val%\n2% Milk             301 14.6 16.8\nAlmond              293 14.2 16.3\nCoconut             300 14.5 16.7\nNonfat milk         301 14.6 16.8\nSoy (United States) 301 14.6 16.8\nWhole Milk          301 14.6 16.8\nNA                  271 13.1   NA\n\n\nShow the code\nquestionr::freq(drink$Size)\n\n\n              n    % val%\nGrande      583 28.2 28.4\nKids         34  1.6  1.7\nShort       206 10.0 10.0\nTall        583 28.2 28.4\nTrenta Iced  73  3.5  3.6\nVenti       218 10.5 10.6\nVenti Iced  359 17.4 17.5\nNA           12  0.6   NA\n\n\n\n\nShow the code\ndrink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\n# A tibble: 242 × 19\n   Categ…¹ Name  Porti…² Calor…³ Calor…⁴ Total…⁵ Satur…⁶ Trans…⁷ Chole…⁸ Sodiu…⁹\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 iced-c… Cold…      12      50       0       0       0       0       0      25\n 2 iced-c… Cold…      12      50       0       0       0       0       0      25\n 3 iced-c… Cold…      16      80       0       0       0       0       0      30\n 4 iced-c… Cold…      16      80       0       0       0       0       0      30\n 5 iced-c… Cold…      24     100       0       0       0       0       0      40\n 6 iced-c… Cold…      24     100       0       0       0       0       0      40\n 7 iced-c… Cold…      30     130       0       0       0       0       0      45\n 8 iced-c… Cold…      30     130       0       0       0       0       0      45\n 9 iced-c… Iced…      12       0       0       0       0       0       0       0\n10 iced-c… Iced…      12       0       0       0       0       0       0       0\n# … with 232 more rows, 9 more variables: `Total Carbohydrate(g)` <dbl>,\n#   `Dietary Fiber(g)` <dbl>, `Sugars(g)` <dbl>, `Protein(g)` <dbl>,\n#   `Caffeine(mg)` <chr>, Size <chr>, Milk <chr>, `Whipped Cream` <chr>,\n#   dupe_count <int>, and abbreviated variable names ¹​Category,\n#   ²​`Portion(fl oz)`, ³​Calories, ⁴​`Calories from fat`, ⁵​`Total Fat(g)`,\n#   ⁶​`Saturated fat(g)`, ⁷​`Trans fat(g)`, ⁸​`Cholesterol(mg)`, ⁹​`Sodium(mg)`\n\n\nRemarks :\n\n“Caffein(mg)” variable consist of mixed values including absolute and values in range.\nThere are 121 rows of duplicated data.\nOut of 2,068 drinks, more than 10% of “Whipped Cream” and “Milk” are missing."
  },
  {
    "objectID": "pnote/test4.html#data-wrangling",
    "href": "pnote/test4.html#data-wrangling",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Edit “Caffeine(mg)” Variable\n\n\n\n\n\n\nFirst remove special character, then replace the range values with the maximum value.\n\n3.3.1.1 remove special character\nRemove special character from ‘40+’.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"][drink[\"Caffeine(mg)\"] == '40+'] <- '40'\n\n\n\n\n3.3.1.2 update with for-loop function\n\n\nShow the code\nfor (i in 1:nrow(drink)) {\n  drink[i, \"Caffeine(mg)\"] <- ifelse(\n    grepl(\"–\", \n          drink[i,\n                \"Caffeine(mg)\"]),\n    substr(drink[i, \n                 \"Caffeine(mg)\"],\n           nchar(\n             drink[i, \n                   \"Caffeine(mg)\"])-1,\n           nchar(\n             drink[i,\n                   \"Caffeine(mg)\"])),\n    drink[i, \n          \"Caffeine(mg)\"])\n  }\n\n\n\n\n3.3.1.3 convert variable type\nChange the variable to numeric data type.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"] <- as.numeric(unlist(drink[\"Caffeine(mg)\"]))\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:2, 15)],3))\n\n\n\n\n\nCategory\nName\nCaffeine(mg)\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\ntea\nIced Teavana® London Fog Tea Latte\n40\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\n\n\n\nRemarks :\n\n\n\n\n\n\n3.3.2 Remove Duplication\n\n\n\n\n\n\n3.3.2.1 filter duplicated data\n\n\n\n\n\nShow the code\nduplication <- drink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\nShow the code\nduplication <- duplication %>%\n  filter(duplicated(duplication) == TRUE)\n\n\n\n3.3.2.2 remove duplicated data\n\n\nShow the code\ndrink_clean <- drink[!duplicated(drink),]"
  },
  {
    "objectID": "pnote/test4.html#create-new-dataframe",
    "href": "pnote/test4.html#create-new-dataframe",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.4 Create New Dataframe",
    "text": "3.4 Create New Dataframe\n\n3.4.1 Create Dataframe by “Category” :: category_top4\n\n\n\n\n\n\nThis data frame will be used to compare differences in variables by “Category” via multiple correlogram under section xxx.\n\n\nShow the code\ntest <- drink %>%\n  group_by(`Category`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total))\n\n\n\n3.4.1.1 filter top 4 “Category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - base - to group the orders by name.\nsummarise( ) - dplyr - to count the number of drinks for each “Category” and assign under “Total”.\narrange(desc( ) - base - to sort data in descending order.\ntop_n( ) - base - to retain only the four (4) “Category” with the highest “Total”.\n\n\n\n\n\nShow the code\ncategory_top4 <- drink %>%\n  group_by(`Category`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(4) %>%\n  ungroup\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(category_top4)\n\n\n\n\n\nCategory\nTotal\n\n\n\n\nespresso\n728\n\n\nfrappuccino-blended-beverages\n504\n\n\nkids-drinks-and-other\n262\n\n\ntea\n237\n\n\n\n\n\n\n\n3.4.1.2 create vector list\n\n\nShow the code\ncategory_top4.list <- as.vector(category_top4$Category)\n\n\n\n\n3.4.1.3 filter attribute data with vector list\n\n\nShow the code\ncategory_filtered <- drink %>%\n  filter(Category %in% category_top4.list)\n\n\n\n\n3.4.1.4 inspect filtered output\n\n\nShow the code\nunique(category_filtered$Category)\n\n\n[1] \"espresso\"                      \"frappuccino-blended-beverages\"\n[3] \"kids-drinks-and-other\"         \"tea\"                          \n\n\n\n\n\n\n\n\n3.4.2 Create Dataframe by “Name” :: name_top3\n\n\n\n\n\n\nThis dataframe will be used to ??\n\n3.4.2.1 filter top 3 “Names”\n\n\nShow the code\nname_top3 <- drink %>%\n  group_by(`Name`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(3) %>%\n  ungroup\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(name_top3)\n\n\n\n\n\nName\nTotal\n\n\n\n\nIced Coffee with Milk\n94\n\n\nHot Chocolate\n60\n\n\nPumpkin Spice Crème\n60\n\n\n\n\n\n\n\n3.4.2.2 create vector list\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - base - to ???.\n\n\n\n\n\nShow the code\nname_top3.list <- as.vector(name_top3$Name)\n\n\n\n\n3.4.2.3 filter attribute data with vector list\n\n\nShow the code\nname_filtered <- drink %>%\n  filter(Name %in% name_top3.list)\n\n\n\n\n3.4.2.4 inspect filtered output\n\n\nShow the code\nunique(name_filtered$Name)\n\n\n[1] \"Iced Coffee with Milk\" \"Hot Chocolate\"         \"Pumpkin Spice Crème\"  \n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test4.html#data-normalisation",
    "href": "pnote/test4.html#data-normalisation",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.5 Data Normalisation",
    "text": "3.5 Data Normalisation\n\n3.5.1 Normalise category_filtered\n\n\n\n\n\n\nTo compare the category holistically, need to first group “Category”, “Name”, “Milk” and “Whipped Cream”. Then, normalise the drinks’ attributes by the volume, i.e. “Portion( fl oz)”.\n\n3.5.1.1 normalise nutritional-related variables\n\n\nShow the code\ncategory_norm <- category_filtered %>%\n  group_by(`Category`,\n           `Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Category', 'Name', 'Milk'. You can\noverride using the `.groups` argument.\n\n\n\n\n3.5.1.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\n\n\n\n\nUsage of the code chunk below :\npaste( ) - base - to update the drinks’ name.\n\n\n\n\n\nShow the code\ncategory_norm$Name_mw <- paste(\n  category_norm$Name, \n  category_norm$Milk, \n  category_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(category_norm[,c(1:3, 17)],3))\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nMilk\nName_mw\n\n\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\n2% Milk\nIced Starbucks® Blonde Caffè Latte 2% Milk NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nAlmond\nIced Starbucks® Blonde Caffè Latte Almond NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nCoconut\nIced Starbucks® Blonde Caffè Latte Coconut NA\n\n\n\n\n\n\n\n3.5.1.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_category <- category_norm %>%\n  select(c(1,5:16))\n\n\n\n\n3.5.1.4 replace row references with “Name_mw”\n\n\n\n\n\n\nUsage of the code chunk below :\nrow.names( ) - dplyr - to replace the row reference with the updated name.\n\n\n\n\n\nShow the code\nrow.names(corr_var_category) <- category_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.1.5 inspect output\n\n\nShow the code\nglimpse(corr_var_category, 70)\n\n\nRows: 498\nColumns: 13\n$ Category                   <chr> \"espresso\", \"espresso\", \"espresso…\n$ `Calories per oz)`         <dbl> 7.986111, 4.236111, 5.625000, 5.6…\n$ `Calories from fat per oz` <dbl> 2.638889, 2.256944, 2.986111, 0.0…\n$ `Total Fat(g/oz)`          <dbl> 0.2743056, 0.2500000, 0.3125000, …\n$ `Saturated fat(g/oz)`      <dbl> 0.149305556, 0.000000000, 0.31250…\n$ `Trans fat(g/oz)`          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `Cholesterol(mg/oz)`       <dbl> 1.1805556, 0.0000000, 0.0000000, …\n$ `Sodium(mg/oz)`            <dbl> 7.118056, 6.875000, 6.493056, 6.3…\n$ `Total Carbohydrate(g/oz)` <dbl> 0.7986111, 0.3888889, 0.5972222, …\n$ `Dietary Fiber(g/oz)`      <dbl> 0.00000000, 0.07638889, 0.0000000…\n$ `Sugars(g/oz)`             <dbl> 0.6875000, 0.2152778, 0.4861111, …\n$ `Protein(g/oz)`            <dbl> 0.50000000, 0.11111111, 0.0763888…\n$ `Caffeine(mg/oz)`          <dbl> 9.444444, 9.444444, 9.444444, 9.4…\n\n\n\n\n\n\n\n\n3.5.2 Normalise name_filtered\n\n\n\n\n\n\nIn order to study the nutritional value holistically, the toppings, i.e. milk and whipped cream will need to be normalised by the volume of drink.\n\n3.5.2.1 normalise nutritional-related variables\n\n\nShow the code\nname_norm <- name_filtered %>%\n  group_by(`Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Name', 'Milk'. You can override using the\n`.groups` argument.\n\n\n\n\n3.5.2.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\nShow the code\nname_norm$Name_mw <- paste(\n  name_norm$Name, \n  name_norm$Milk, \n  name_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(name_norm[,c(1:3, 16)],3))\n\n\n\n\n\n\n\n\n\n\n\nName\nMilk\nWhipped Cream\nName_mw\n\n\n\n\nHot Chocolate\n2% Milk\nNo Whipped Cream\nHot Chocolate 2% Milk No Whipped Cream\n\n\nHot Chocolate\n2% Milk\nWhipped Cream\nHot Chocolate 2% Milk Whipped Cream\n\n\nHot Chocolate\nAlmond\nNo Whipped Cream\nHot Chocolate Almond No Whipped Cream\n\n\n\n\n\nRemarks :\n!!!!! Should we introduce new variable “Name_mw” or stick to “Name” when the new value is combined between 3 vars’ value?\n\n\n3.5.2.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_name <- name_norm %>%\n  select(c(4:15))\n\n\n\n\n3.5.2.4 replace row references with “Name_mw”\n\n\nShow the code\nrow.names(corr_var_name) <- name_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.2.5 inspect output\n\n\nShow the code\nglimpse(corr_var_name, 70)\n\n\nRows: 36\nColumns: 12\n$ `Calories per oz)`         <dbl> 20.866667, 26.833333, 15.866667, …\n$ `Calories from fat per oz` <dbl> 5.0000000, 10.0750000, 4.3583333,…\n$ `Total Fat(g/oz)`          <dbl> 0.56416667, 1.10666667, 0.5000000…\n$ `Saturated fat(g/oz)`      <dbl> 0.37000000, 0.67833333, 0.1250000…\n$ `Trans fat(g/oz)`          <dbl> 0.00000, 0.00500, 0.00000, 0.0000…\n$ `Cholesterol(mg/oz)`       <dbl> 1.74583333, 3.53750000, 0.0000000…\n$ `Sodium(mg/oz)`            <dbl> 10.083333, 10.641667, 9.441667, 1…\n$ `Total Carbohydrate(g/oz)` <dbl> 3.12416667, 3.33500000, 2.5350000…\n$ `Dietary Fiber(g/oz)`      <dbl> 0.250000000, 0.250000000, 0.34916…\n$ `Sugars(g/oz)`             <dbl> 2.69583333, 2.87416667, 1.9958333…\n$ `Protein(g/oz)`            <dbl> 0.87833333, 0.88833333, 0.2891666…\n$ `Caffeine(mg/oz)`          <dbl> 1.745833, 1.745833, 1.745833, 1.7…"
  },
  {
    "objectID": "pnote/test4.html#plot-correlogram",
    "href": "pnote/test4.html#plot-correlogram",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.1 Plot Correlogram",
    "text": "4.1 Plot Correlogram\n\n4.1.1 Plot with R Base\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npanel.cor( ) - xcms - to create correlation coefficient panel for pairs function.\n\npar( ) - graphics - to set or query graphical parameters.\n\nusr = a vector of the form c(x1, x2, y1, y2) giving the extremes of the user coordinates of the plotting region.\n\npar(“usr”) = useful command for custom plot with fixed features1. It allows objects to be placed within the plot window.\n\n\non.exit( ) - base - to set execution when the function exits naturally or due to error2. Use together with usr.\ncor( ) - stats - to returns a correlation data frame rather a matrix.\n\ncomplete.obs= correlations will be computed from complete observations, with an error being raised if there are no complete cases.3\n\nstrwidth( ) - graphics - to compute the width and height of the given strings txt.4\n\n\n\n\n\n\nShow the code\npanel.cor <- function(x, y, \n                      digits = 3, \n                      prefix = \"\",\n                      cex.cor)\n  {\n  usr <- par(\"usr\" = c(0, 1, 0, 1))\n  on.exit(par(usr))\n  \n  r <- abs(\n    cor(x, y, use = \"complete.obs\"))\n  \n  txt <- format(\n    c(r, 0.123456789),\n    digits = digits)[1]\n  \n  txt <- paste(prefix, \n               txt, \n               sep = \"\")\n  \n  if(missing(cex.cor))\n    cex.cor <- 0.8/strwidth(txt)\n  \n  text(0.5, 0.5, \n       txt, \n       cex = cex.cor*(1+r)/2)\n  }\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npairs( ) - graphics - to produce matrix of scatterplots.\n\n\n\n\n\nShow the code\npairs(corr_var_name,\n      upper.panel = panel.cor,\n      label.pos = 0.5, \n      line.main = 2,\n      cex.labels = 0.5, \n      font.labels = 0.5,\n      gap = 0.2)\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nggcorrmat( ) - ggstatsplot - to visualise a correlation matrix.5\n\n\n\n\n\nShow the code\nggcorrmat(data = corr_var_name,\n  ggcorrplot.args = list(outline.color = \"white\", \n                         hc.order = TRUE,\n                         lab_col = \"black\",\n                         lab_size = 3,\n                         pch.col = \"red\",\n                         pch.cex = 6),\n  title = \"Nutrition Value for Top 3 Starbucks Drinks\",\n  ggplot.component = list(\n    theme_void(\n      base_size = 10),\n    theme(\n      plot.title = element_text(size = 12),\n      legend.text = element_text(size = 8),\n      axis.text.x = element_text(size = 8, \n                                 angle = 75, \n                                 hjust = 0.6),\n      axis.text.y = element_text(size = 8, \n                                 hjust = 1)\n      ))\n  )\n\n\n\n\n\nRemarks :\nAbove correlation plot is hc.ordered meaning using hierarchical function.\n“Trans fat(g/oz)” and “Dietary Fiber(g/oz)” has no significant at p < 0.05.\n\n\n\n\n\n4.1.3 Plot Multiple Correlogram with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngrouped_ggcorrmat( ) - ggstatsplot - a helper function to apply the function to visualise multiple correlation matrix.\n\n\n\n\n\nShow the code\ngrouped_ggcorrmat(\n    data = corr_var_category,\n    grouping.var = Category,\n    type = \"p\",\n    p.adjust.method = \"holm\",\n    plotgrid.args = list(ncol = 2),\n    ggcorrplot.args = list(outline.color = \"black\",\n                           lab_col = \"black\",\n                           lab_size = 1.5,\n                           pch.col = \"red\",\n                           pch.cex = 3),\n    annotation.args = list(\n      tag_levels = \"a\",\n      title = \"Correlation of Attributes for Starbucks Top 4 Drink Categories\",\n      subtitle = \"Top 4 categories : Espresso, Frapuccino blended beverages, Kids Drinks & Tea\"),\n    ggplot.component = list(\n      theme_void(base_size = 8),\n      theme(\n        plot.title = element_text(size = 8),\n        plot.subtitle = element_text(size = 6),\n        legend.text = element_text(size = 5),\n        axis.text.x = element_text(size = 7, \n                                   angle = 75, \n                                   hjust = 0.6),\n        axis.text.y = element_text(size = 7, \n                                   hjust = 1),\n        strip.text.x = element_text(size = 7),\n        legend.key.size = unit(3, 'mm')\n        ))\n    )\n\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n\n\n\n4.1.4 Plot with corrplot package\n\n\n\n\n\n\nThe figure below shows a corrgram using the corrplot combined with the significant test of 0.1. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total carbohydrate and sugar is statistically significant at significant level of 0.1 but not the pair between total caffeine and trans fat.\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncor.mtest( ) - corrplot - to generate p-values for “p” variable, and confidence intervals for each pair of input variables.\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\n\n\n\n\n\n\n\n\nShow the code\nname.sig = cor.mtest(corr_var_name, \n                     conf.level = .9)\n\n\n\n\nShow the code\ncorrplot.mixed((cor(corr_var_name)),\n               lower = \"number\",\n               upper = \"square\",\n               order = \"AOE\",\n               diag = \"l\",\n               tl.pos = \"lt\",\n               tl.col = \"black\",\n               tl.cex = .6,\n               tl.srt = 45,\n               pch.col = \"grey70\",\n               pch.cex = 1.5,\n               number.cex = .6,\n               cl.cex = .6,\n               lower.col = \"black\",\n               p.mat = name.sig$p, \n               sig.level = 0.1,\n               title = \"Attributes Pairs Correlation with significant level of 0.1\",\n               mar = c(0,0,1,0)\n               )\n\n\n\n\n\nRemarks :\n\n\n\n\n\n4.1.5 Plot with Hierarchical Clustering\n\n\n\n\n\n\nThe dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\ncv_name.matrix <- data.matrix(corr_var_name)\n\n\n\n\nShow the code\nname_d <- dist(normalize(cv_name.matrix, method = \"euclidean\"))\n\n\n\n\nShow the code\nname_hclust <- hclust(name_d, method = \"average\")\n\n\n\n\nShow the code\nname_num_k <- find_k(name_hclust)\n\nplot(name_num_k)\n\n\n\n\n\ns\n\n\nShow the code\nset.seed(12345)\n\nfactoextra::fviz_nbclust(cv_name.matrix,\n                         FUNcluster = hcut,\n                         nstart = 25,  \n                         method = \"gap_stat\", \n                         nboot = 50,\n                         linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Gap statistic method\")\n\n\n\n\n\nw\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"wss\",\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\na\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"silhouette\",\n             linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, the corrgram was plotted using corrplot() and hclust based on the results of hierarchical clustering.\n\n\nShow the code\ncorrplot((cor(corr_var_name)),\n         method = \"ellipse\",\n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3,\n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.cex = .6,\n         tl.srt = 45,\n         number.cex = .6,\n         cl.cex = .6,\n         title = \"Correlation with K-2 Hierarchical Clustering\",\n         mar = c(0,0,1,0))\n\n\n\n\n\n\n\n\n\n\n4.1.6 Conclusion\n\n\n\n\n\n\nIn general, the corrgram for all starbucks drinks show that caffeine is mostly negatively correlated with the other nutritional factors except protein, whereas the rest are positively correlated. The diagram also shows that following pairs of nutritional factors of starbucks drinks are highly correlated (r > 0.90):\n\nTotal Fat(g) – Calories from Fat (r = 1)\nTotal Fat(g) – Saturated Fat(g) (r = 0.94)\nCalories from fat – Saturated Fat (g) (r = 0.94)\nSugars (g) – Total Carbohydrate (g) (r = 0.99)\nSugars (g) – Calories (r = 0.92)\nTotal Carbohydrate (g) – Calories (r = 0.94)\n\nThe trans fat(g) and caffeine (mg) pair is not significant at p <0.05 and has a correlation parameter of only 0.01.\nFrom the multiple corrgram, an interesting finding is that the caffeine for kids drinks and tea is positively correlated to the other factors.\nThe starbucks drinks nutrition factors can be separated into 3 clusters:\n\nCaffeine (mg)\nTrans fat(g), Cholesterol(mg), Saturated fat(g), Calories from fat, Total Fat(g)\nSodium (mg), Calories, Total Carbohydrate(g), Sugars(g), Dietary Fiber(g), Protein(g)\n\nThe nutrition factors in each cluster are correlated with one another. Caffeine is standalone as it is not highly correlated with the others and generally has a negative correlation with the rest."
  },
  {
    "objectID": "pnote/test4.html#heatmap",
    "href": "pnote/test4.html#heatmap",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.2 Heatmap",
    "text": "4.2 Heatmap\n\n\n\n\n\n\nA heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.\nThe top drinks dataset where nutritional values have been normalised against the unit volume will be used for plotting the heat map.\nFirst, the dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\nname_matrix <- data.matrix(name_norm)\n\n\n\n\nShow the code\nname_matrix_d <- dist(normalize(name_matrix), method = \"euclidean\")\n\n\n\n\nShow the code\nname_clustHM <- hclust(name_matrix_d, method = \"average\")\n\n\n\n\nShow the code\nheatmap_k <- find_k(name_clustHM)\nplot(heatmap_k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, heatmaply package was used to plot the heatmap for Ice Coffee, Hot Chocolate and Pumpkin Spice Crème for different combinations of milk and whipped cream.\n\n\nShow the code\nheatmaply(percentize(name_matrix),\n          colors = Blues,\n          k_row = 6,\n          margins = c(0, 100, 30, 50), #btm, left, top, right\n          fontsize_row = 6,\n          fontsize_col = 6,\n          title= list(\n            text = \"Playing with Fonts\",\n            font = t1),\n          xlab = \"Nutrition\",\n          ylab = \"Drinks\",\n          main = \"Heatmap of Top 3 popular Starbucks Drinks\")\n\n\n\n\n\n\n\n\n\n\n4.2.1 Conclusion\n\n\n\n\n\n\nThe heatmap compares the nutritional value of hot chocolate, pumpkin spice crème and iced coffee, which are popular drinks in Starbucks. It shows that hot chocolate and pump spice crème are generally unhealthier, containing higher sodium, sugars, carbohydrates, and cholesterol levels than iced coffee. On the other hand, iced coffee contains higher caffeine levels than the hot chocolate and pump spice crème. The impact of milk, whipped cream, sweetener choices on the nutritional value of drinks were further analysed using hierarchical clustering. The drinks were separated into 4 clusters:\n\nHot Chocolate and Pumpkin Spice Crème with whipped cream or Pumpkin Spiced Crème with Whole/2% milk\nPumpkin Spice Crème without whipped cream with soy or nonfat milk\nHot Chocolate and Pumpkin Spice Crème without whipped cream\nIced Coffee with all milk and sweetener combinations\n\nFor Hot Chocolate and Pumpkin Spice Crème, the nutritional value was determined by whipped cream then milk type. In general, no whipped cream and plant-based milk milk choices are considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels. For Iced coffee, the nutritional value was determined by sweetener then milk type. Unsweetened iced coffee with plant-based milk is considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels."
  },
  {
    "objectID": "pnote/test4.html#parallel-coordinate-plot",
    "href": "pnote/test4.html#parallel-coordinate-plot",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.3 Parallel Coordinate Plot",
    "text": "4.3 Parallel Coordinate Plot\n\n\n\n\n\n\nParallel coordinates are a common way of visualizing and analyzing high-dimensional datasets. To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\nThe parallel coordinate was plotted using the parallelPlot package.\n\n\nShow the code\ndrink.pc <- corr_var_name\n\nhistoVisibility <- rep(TRUE, \n                       ncol(drink.pc))\n\nparallelPlot(drink.pc,\n             rotateTitle = TRUE,\n             continuousCS = 'YlGnBu',\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n\n\n4.3.1 Conclusion\n\n\n\n\n\n\nThe findings from the parallel coordinate plot are generally in line with the corrgram above. Drinks with high calories typically have high total carbohydrate, sugars, sodium and lower caffeine, vice versa. Some factors like trans fat, dietary fibre and cholesterol are generally not-well distributed with most drinks having a low nutritional value for those factors. They may not be a good indicator of the calorific content of the drinks."
  }
]