[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "VISUAL ANALYTICS & APPLICATIONS\nwith R Markdown, R Studio and Quarto\n\n\n\n\n\n\nContent Disclaimer\n\n\n\n\n\nThis micro-site is for academic purposes only. Any views or opinions, or comments represented in this site is personal and belongs solely to the site owner and do not represent those people, institutions or organisations that the owner may or may not be associated professionally or within a personal capacity unless explicitly stated.\nAll content on this site is for informational purposes only. This site’s owner makes no representation of the accuracy or completeness of any display information or any link on this site. The owner will not be liable for any errors, omissions or availability of any information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.\n\n\n\nmodule : ISSS608-AY2022-23Jan Visual Analytics and Applications\ninstructor : Dr. Kam Tin Seong, Associate Professor of Information Systems (Practice)\ninstitute : MITB-Analytics Track , Singapore Management University (SMU)\ntimeline : January 14, 2023 to March 25, 2023\n\n\n\n\ntopic\nlesson cover\ndate\n\n\n\n\n\nIntroduction to Visual Analytics\n\nHands-on Ex1\nJan 14, 2023\n\n\n\nDesigning Graphs to Enlighten\n\n\nJan 21, 2023\n\n\n\nInteractivity in Visual Analytics\n\n\nJan 28, 2023\n\n\n\nFundamentals of Visual Analytics\n\n\nFeb 4, 2023\n\n\n\nVisual Multivariate Analysis\n\n\nFeb 11, 2023\n\n\n\nIt’s About Time\n\n\nFeb 18, 2023\n\n\n\nGeoVisual Analytics\n\n\nFeb 25, 2023\n\n\n\nNetwork Data Visualisation and Analysis\n\n\nMar 11, 2023\n\n\n\nInformation Dashboard Design\n\n\nMar 18, 2023\n\n\n\nVisualising Financial Data\n\n\nMar 25, 2023"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise, we will explore the pros and cons of creating data visualisations using ggplot2 and Tableau. The two data visualisations included in this exercise are:\n\nA pareto chart showing the distribution of returns by a fictious superstore\nA population pyramid of Singapore by age cohort and gender\n\n\n\n\nThe raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using mutate() and then sorting via arrange().\nThe secondary axes in ggplot2 is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.\nAs ggplot2 produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using plotly package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using plotly tools.\nThe default visualization created with ggplot2 is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.\n\n\n\n\n\nIn R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.\nTableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic pareto plot can be created by stat_pareto() of ggQC, and a basic population pyramid can be plotted using nPyramid() of rCharts.\nVisualisations in Tableau are interactive, whereas ggplot2 in R is static. Extra effort is also required to customise the details of the visualisation in ggplot2. Interactivity and customisation can be included through ggplot and plotly. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.\n\n\n\n\nReference charts were already created using Tableau for in-class exercise 2, hence they will be used as the proposed sketch for the data visualisations for ggplot2.\n\n\n\n\n\nAs Tableau produces interactive charts and dashboards, we will use plotly to convert the ggplot2 plots to produce interactive graphs for a more objective comparison."
  },
  {
    "objectID": "Hands-on_Ex1.html#load-r-packages",
    "href": "Hands-on_Ex1.html#load-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "Hands-on_Ex1.html#acquire-data-source",
    "href": "Hands-on_Ex1.html#acquire-data-source",
    "title": "Take-home Exercise 1",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nTableau Fictatious Dataset\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”.\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "Hands-on_Ex1.html#import-data",
    "href": "Hands-on_Ex1.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\n\ncol_select( ) - readr - to include only the selected variables into wp_cood data frame.\n\nrename( ) - dplyr - to remove “#” from the variables.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0"
  },
  {
    "objectID": "Hands-on_Ex1.html#population-pyramid",
    "href": "Hands-on_Ex1.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html",
    "href": "pnote/test1.html",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "",
    "text": "In this take-home exercise, we will explore the pros and cons of creating data visualisation using ggplot2 and Tableau. The data visualisation for this exercise focus on the Pareto chart showing the distribution of returns by a fictitious superstore.\n\n\n\nThe raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using mutate() and then sorting via arrange().\nThe secondary axes in ggplot2 is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.\nAs ggplot2 produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using plotly package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using plotly tools.\nThe default visualization created with ggplot2 is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.\n\n\n\n\n\nIn R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.\nTableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic pareto plot can be created by stat_pareto() of ggQC, and a basic population pyramid can be plotted using nPyramid() of rCharts.\nVisualisations in Tableau are interactive, whereas ggplot2 in R is static. Extra effort is also required to customise the details of the visualisation in ggplot2. Interactivity and customisation can be included through ggplot and plotly. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.\n\nAs Tableau produces interactive charts and dashboards, we will use plotly to convert the ggplot2 plots to produce interactive graphs for a more objective comparison."
  },
  {
    "objectID": "pnote/test1.html#load-r-packages",
    "href": "pnote/test1.html#load-r-packages",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "pnote/test1.html#acquire-data-source",
    "href": "pnote/test1.html#acquire-data-source",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Tableau’s fictatious data set -\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”."
  },
  {
    "objectID": "pnote/test1.html#read-rds-file",
    "href": "pnote/test1.html#read-rds-file",
    "title": "Test & Explore",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test1.html#standardise-data",
    "href": "pnote/test1.html#standardise-data",
    "title": "Test & Explore",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test2.html",
    "href": "pnote/test2.html",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "",
    "text": "In this take-home exercise, we will explore the pros and cons of creating data visualisation using ggplot2 and Tableau. The data visualisation for this exercise focus on the population pyramid of Singapore by age cohort and gender.\n\n\n\nThe raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using mutate() and then sorting via arrange().\nThe secondary axes in ggplot2 is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.\nAs ggplot2 produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using plotly package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using plotly tools.\nThe default visualization created with ggplot2 is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.\n\n\n\n\n\nIn R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.\nTableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic Pareto plot can be created by stat_pareto() of ggQC, and a basic population pyramid can be plotted using nPyramid() of rCharts.\nVisualisations in Tableau are interactive, whereas ggplot2 in R is static. Extra effort is also required to customise the details of the visualisation in ggplot2. Interactivity and customisation can be included through ggplot and plotly. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.\n\nAs Tableau produces interactive charts and dashboards, we will use plotly to convert the ggplot2 plots to produce interactive graphs for a more objective comparison."
  },
  {
    "objectID": "pnote/test2.html#load-r-packages",
    "href": "pnote/test2.html#load-r-packages",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "pnote/test2.html#acquire-data-source",
    "href": "pnote/test2.html#acquire-data-source",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "pnote/test2.html#import-data",
    "href": "pnote/test2.html#import-data",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_sgp <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_sgp)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskim(pop_sgp)\n\n\n\nData summary\n\n\nName\npop_sgp\n\n\nNumber of rows\n75696\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nFA\n0\n1\n4\n13\n0\n6\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n53.89\n137.6\n0\n0\n0\n40\n2210\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.0\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - based on 2022 consensus data, ."
  },
  {
    "objectID": "pnote/test2.html#population-pyramid",
    "href": "pnote/test2.html#population-pyramid",
    "title": "Take-home Exercise 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test1.html#import-data",
    "href": "pnote/test1.html#import-data",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the Excel file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - between 2017 and 2020, 793 unique customers contributed to the sales volume of 5,009 orders for 1,862 products.\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0\n\n\n\n\n\n\n\nShow the code\nsummary(unique(returns$Returned))\n\n\n   Length     Class      Mode \n        1 character character \n\n\nShow the code\nsummary(unique(returns$`Order ID`))\n\n\n   Length     Class      Mode \n      296 character character \n\n\nRemark :\nPreliminary data interpretation - there were 296 out of 5,009 orders returned."
  },
  {
    "objectID": "pnote/test1.html#population-pyramid",
    "href": "pnote/test1.html#population-pyramid",
    "title": "Test & Exploration 1",
    "section": "3.2. Population Pyramid",
    "text": "3.2. Population Pyramid\nA population pyramid depicts the distribution of a population by age groups and sex. The pyramid can be used to visualize the age of a particular population. It is also used determine the overall age distribution of a population and an indication of the reproductive capabilities and likelihood of the continuation of a species.\n\n3.2.1 Import Dataset\nFor this task, the data entitled Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2021 should is used. The data set is available at Department of Statistics home page.\nData import was accomplished using read_csv() of readr package, which is useful for reading delimited files into a tibble.\n\n\nShow the code\npop <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nhead(pop)\n\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   FA              Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>         <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males <= 60             0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >60 to 80        10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >80 to 100       20  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >100 to 120      60  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males >120             10  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Not Available     0  2022\n\n\n\n\n** 3.2.2 Data Wrangling**\n\nCOMPUTE THE FREQUENCY COUNT BY AGE AND SEX\nFirst, we are going to compute the frequency count of the total population in Singapore by gender and age. In the code chunk below, group_by() of dplyr package is used to group the orders by age and gender. Then, summarise() of dplyr is used to count (i.e. n()) the number of residents.\n\n\nShow the code\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(freq_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <chr>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 10_to_14 Females  99450\n4 10_to_14 Males   103350\n5 15_to_19 Females 101340\n6 15_to_19 Males   105580\n\n\n\n\nSORT DATA TABLE\nBy default, the values of the tibble data frame is sorted according to the values of the first column. In this case, the values are sorted alphanumerically by the age group.\nHence, we will sort the data based on the categorical age-group assigned in the original dataset. This task is first performed by changing the order using mutate() and then sorting via arrange() of dplyr package.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n\nhead(sorted_pop)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n3.2.3 Plot Age-Sex Population Pyramid\n\nSTATIC AGE-SEX POPULATION PYRAMID\nA Age-Sex Population Pyramid was plotted using ggplot2 as follows:\n\ngeom_col() instead of geom_bar() was used to create the bar chart as we do not need to modify the data, and want the length of the bar to represent the actual population stats.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nscale_x_continuous() was used to modify the labels on the x-axis to provide better readability.\n\n\n\nShow the code\np <- ggplot(sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2021') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \"Females\" = \"lightpink\"))\np\n\n\n\n\n\n\n\nINTERACTIVE AGE-SEX POPULATION PYRAMID\nThe static pyramid was converted to an interactive chart by using ggplotly() of the plotly library. By hovering your mouse on the bars, you can view the population stats for each age group and gender.\n\n\nShow the code\nggplotly(p,session=\"knitr\")\n\n\n\n\n\n\n\n\nINSIGHTS FROM VISUALISATION\nFrom the plot, we can tell that Singapore has a constrictive population because there is a lower percentage of younger people. This indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller. It may also represent a higher life expectancy for the older population. As Singapore enters into a silver economy, government bodies can use such data to put fourth appropriate measures and policies to manage its ageing population in the future."
  },
  {
    "objectID": "pnote/test2.html#read-rds-file",
    "href": "pnote/test2.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test2.html#standardise-data",
    "href": "pnote/test2.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html#data-wrangling",
    "href": "pnote/test1.html#data-wrangling",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Join Data Frames\n\n\n\n\n\n\nCombine both data frames.\n\n3.3.1.1 join returns to orders\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to join the returns data frame to orders data frame by “Order ID” as the unique identifier.\n\n\n\n\n\nShow the code\nsummary(ss_ordersMgmt <- left_join(orders, \n                           returns,\n                        by = c('Order ID' = 'Order ID')\n                        ))\n\n\n     Row ID       Order ID           Order Date                    \n Min.   :   1   Length:12420       Min.   :2017-01-03 00:00:00.00  \n 1st Qu.:2466   Class :character   1st Qu.:2018-05-28 00:00:00.00  \n Median :5095   Mode  :character   Median :2019-07-18 00:00:00.00  \n Mean   :4983                      Mean   :2019-05-13 14:10:46.96  \n 3rd Qu.:7419                      3rd Qu.:2020-06-08 00:00:00.00  \n Max.   :9994                      Max.   :2020-12-30 00:00:00.00  \n                                                                   \n   Ship Date                       Ship Mode         Customer ID       \n Min.   :2017-01-07 00:00:00.00   Length:12420       Length:12420      \n 1st Qu.:2018-06-01 00:00:00.00   Class :character   Class :character  \n Median :2019-07-23 12:00:00.00   Mode  :character   Mode  :character  \n Mean   :2019-05-17 12:07:39.13                                        \n 3rd Qu.:2020-06-10 00:00:00.00                                        \n Max.   :2021-01-05 00:00:00.00                                        \n                                                                       \n Customer Name        Segment          Country/Region         City          \n Length:12420       Length:12420       Length:12420       Length:12420      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    State            Postal Code       Region           Product ID       \n Length:12420       Min.   : 1040   Length:12420       Length:12420      \n Class :character   1st Qu.:24153   Class :character   Class :character  \n Mode  :character   Median :60623   Mode  :character   Mode  :character  \n                    Mean   :57418                                        \n                    3rd Qu.:90045                                        \n                    Max.   :99301                                        \n                    NA's   :11                                           \n   Category         Sub-Category       Product Name           Sales          \n Length:12420       Length:12420       Length:12420       Min.   :    0.444  \n Class :character   Class :character   Class :character   1st Qu.:   17.904  \n Mode  :character   Mode  :character   Mode  :character   Median :   55.392  \n                                                          Mean   :  233.629  \n                                                          3rd Qu.:  212.680  \n                                                          Max.   :22638.480  \n                                                                             \n    Quantity         Discount          Profit            Returned        \n Min.   : 1.000   Min.   :0.0000   Min.   :-6599.978   Length:12420      \n 1st Qu.: 2.000   1st Qu.:0.0000   1st Qu.:    1.970   Class :character  \n Median : 3.000   Median :0.1500   Median :    9.072   Mode  :character  \n Mean   : 3.785   Mean   :0.1544   Mean   :   28.996                     \n 3rd Qu.: 5.000   3rd Qu.:0.2000   3rd Qu.:   29.372                     \n Max.   :14.000   Max.   :0.8000   Max.   : 8399.976                     \n                                                                         \n\n\nRemark :\nThere were 12,420 items sold, as indicated by the variable lengths.\n\n\n3.2.1.2 explore and inspect\n\n\nShow the code\nfreq(ss_ordersMgmt$Returned)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1 <NA>      9194      74.03           74.03\n2  Yes      3226      25.97          100.00\n\n\nRemark :\n3,226 out of ordered 12,420 items, approximately 25.97% of items returned.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nGroup items first before summarising the count of “Returned”.\n\n3.3.2.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group orders by specific param.\nsummarise( ) - dplyr - to count the number of returned orders.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nreturned_subCat <- ss_ordersMgmt %>%\n  group_by(`Sub-Category`) %>%\n  summarise(`Returned` = n()) %>%\n  arrange(desc(`Returned`)) %>%\n  ungroup()\n\nreturned_subCat\n\n\n# A tibble: 17 × 2\n   `Sub-Category` Returned\n   <chr>             <int>\n 1 Binders            1938\n 2 Paper              1734\n 3 Furnishings        1151\n 4 Phones             1121\n 5 Storage            1022\n 6 Accessories         965\n 7 Art                 926\n 8 Chairs              802\n 9 Appliances          603\n10 Labels              423\n11 Tables              405\n12 Fasteners           292\n13 Envelopes           291\n14 Bookcases           263\n15 Supplies            243\n16 Machines            157\n17 Copiers              84\n\n\n\n\n\n\n\n\n3.3.3 Compute Cumulative Frequency\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to compute new variables “cum_freq” and “cum”.\ncumsum( ) - base - to compute vector consists of cumulative sums elements.\n\n\n\n\n\nShow the code\ncf_subCat <- returned_subCat %>%\n  mutate(cum_freq = cumsum(Returned)) %>%\n  mutate(cum = cumsum(Returned)/sum(Returned))\n\ncf_subCat\n\n\n# A tibble: 17 × 4\n   `Sub-Category` Returned cum_freq   cum\n   <chr>             <int>    <int> <dbl>\n 1 Binders            1938     1938 0.156\n 2 Paper              1734     3672 0.296\n 3 Furnishings        1151     4823 0.388\n 4 Phones             1121     5944 0.479\n 5 Storage            1022     6966 0.561\n 6 Accessories         965     7931 0.639\n 7 Art                 926     8857 0.713\n 8 Chairs              802     9659 0.778\n 9 Appliances          603    10262 0.826\n10 Labels              423    10685 0.860\n11 Tables              405    11090 0.893\n12 Fasteners           292    11382 0.916\n13 Envelopes           291    11673 0.940\n14 Bookcases           263    11936 0.961\n15 Supplies            243    12179 0.981\n16 Machines            157    12336 0.993\n17 Copiers              84    12420 1"
  },
  {
    "objectID": "pnote/test1.html#pareto-chart",
    "href": "pnote/test1.html#pareto-chart",
    "title": "Exploration 1 :: Pareto Chart",
    "section": "4.1 Pareto Chart",
    "text": "4.1 Pareto Chart\nIt is crucial to narrow down the 20% factor contributing to the 80% increment or drop in sales orders to avoid unnecessary waste of time and resources during preliminary decision-making for business development.\nHence, the Pareto chart is used to identify the 20% crucial factors and eliminates the 80% less crucial ones.\n\n4.1.1 Plot Static Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart and set the height of the bar to represent the actual returns counts.\ngeom_line( ) & geom_point - ggplot2 - to plot the line and scatter plot for the cumulative frequency of returned counts. The scatter plot helps identify each product’s cumulative frequency in a static chart.\nscale_y_continuous( ) - ggplot2 - to adjust the interval between the grid lines and to add a secondary y-axis to illustrate each product’s cumulative percentage of returns.\nThe secondary y-axis is based on a one-to-one transformation of the primary axis..\ntheme( ) - ggplot2 - to improve visibility by adjusting the plot’s background colour and grid lines.\n\n\n\n\n\nShow the code\nggplot(data = cf_subCat,\n       aes(x = reorder(`Sub-Category`,\n                       -`Returned`))) +\n  geom_col(aes(y = `Returned`),\n           fill = 'salmon', \n           width = 0.8) +\n  geom_point(aes(y = `cum_freq`), \n             color = 'grey20', \n             size = 0.8) +\n  geom_line(\n    aes(y = `cum_freq`, \n        group = 1), \n    colour = 'grey20', \n    size = 0.4) +\n  labs(x = \"Sub-Category\", \n       title = \"Pareto Chart of returns by sub-category\") +\n  scale_y_continuous(name = 'Returns (absolute frequency)', \n                     breaks = seq(0, 3500, 300), \n                     minor_breaks = seq(0, 3500, 100),\n                     sec.axis = sec_axis(~.*1/sum(cf_subCat$Returned), \n                                         name = 'Cumulative Frequency', \n                                         breaks = seq(0, 1, \n                                                      by = 0.1), \n                                         labels = scales::percent)) +\n  geom_hline(yintercept = 0.8*sum(cf_subCat$Returned), \n             linetype = \"dashed\", \n             color = \"grey50\") +\n  geom_text(\n    aes(17,\n        0.8*sum(Returned),\n        label = \"80.0%\",\n        vjust = -0.5),\n    size = 2) +\n  theme(panel.background = element_rect(\n    fill = 'white', \n    colour = 'grey60',\n    size = 0.5,\n    linetype = 'solid'),\n    panel.grid.major = element_line(\n      size = 0.3, \n      linetype = 'solid', \n      colour = 'grey85'),\n    panel.grid.minor = element_line(\n      size = 0.2, \n      linetype = 'solid', \n      colour = 'grey90'),\n    text = element_text(\n      size = 5.5),\n    axis.ticks.x = element_blank()) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot Interactive Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to plot an interactive Pareto chart that allows to view corresponding cumulative percentage for each product when hover across the line or the bars .\n\n\n\n\n\nShow the code\nplot_ly(cf_subCat, \n        x = ~reorder(`Sub-Category`,\n                     -`Returned`), \n        y = ~`Returned`, \n        type = \"bar\", \n        name = \"Returned\") %>%\n  add_trace(x = ~reorder(`Sub-Category`,\n                         -`Returned`), \n            y = ~`cum`*100,\n            type = \"scatter\", \n            mode = \"lines\", \n            yaxis = \"y2\", \n            name = \"Cum. %\") %>%\n  layout(title = \"Pareto chart of returns by sub-category\",\n         xaxis = list(\n           title = \"Sub-Category\"),\n         yaxis = list(\n           title = \"Returned (Absolute Frequency)\", \n           showgrid = F),\n         yaxis2 = list(\n           overlaying = \"y\", \n           side = \"right\", \n           title = \"Cumulative Percentage (%)\", \n           range = list(0, 100)),\n         legend = list(orientation = \"h\", \n                       yanchor = \"bottom\", \n                       y = 0.9,\n                       xanchor = \"top\",\n                       x = 0.2)) \n\n\n\n\n\n\n\nRemark :\nInteractive chart makes the interpretation easier by showing the sub-categories that below 80%. -\nTherewith, eight (8) sub-categories, namely Binders, Paper, Furnishings, Phones, Storage, Accessories, Art, Chairs, are identified to account for 80% of the returned products."
  },
  {
    "objectID": "pnote/test2.html#data-wrangling",
    "href": "pnote/test2.html#data-wrangling",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Compute Frequency Count\n\n\n\n\n\n\nCompute the frequency count by “age” and “sex”.\n\n3.3.1.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_agSx <- pop_sgp %>%\n  group_by(`AG`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = order)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(pop_agSx)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350"
  },
  {
    "objectID": "pnote/test2.html#plot-pyramid-chart",
    "href": "pnote/test2.html#plot-pyramid-chart",
    "title": "Exploration 2 :: Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npyramid_agSx <- ggplot(pop_agSx, \n                       aes(x = ifelse(Sex == \"Males\",\n                                      yes = -Count,\n                                      no = Count),\n                           y = AG,\n                           fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npyramid_agSx\n\n\n\n\n\nRemark :\n\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n\n\n\n\n\n\nShow the code\nggplotly(pyramid_agSx, \n         session = \"knitr\")\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test3.html",
    "href": "pnote/test3.html",
    "title": "Test & Explore 2",
    "section": "",
    "text": "--"
  },
  {
    "objectID": "pnote/test3.html#load-r-packages",
    "href": "pnote/test3.html#load-r-packages",
    "title": "Test & Explore 2",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, sf, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork)\n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test3.html#acquire-data-source",
    "href": "pnote/test3.html#acquire-data-source",
    "title": "Test & Explore 2",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nDataset will be the water points from Nigeria"
  },
  {
    "objectID": "pnote/test3.html#read-rds-file",
    "href": "pnote/test3.html#read-rds-file",
    "title": "Test & Explore 2",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")\n\n\n\n\n\n3.7.2 Visualise Distribution of Cluster Variable\n\n\nShow the code\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)\n\n\n\n\nShow the code\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)\n\n\n\n\n\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test3.html#standardise-data",
    "href": "pnote/test3.html#standardise-data",
    "title": "Test & Explore 2",
    "section": "5.2 Standardise Data",
    "text": "5.2 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n5.2.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\n\n\n5.2.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 18  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n5.2.3 Compare Distribution For Standardisation Method\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  }
]