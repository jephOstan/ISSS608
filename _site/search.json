[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name : Tan Zexeong, Joseph\nResidency : Singapore Permanent Resident"
  },
  {
    "objectID": "about.html#working-experiences",
    "href": "about.html#working-experiences",
    "title": "Profile",
    "section": "WORKING EXPERIENCES",
    "text": "WORKING EXPERIENCES\n\nEnvironmental Consultancy\n\nenvironmental impact assessment (EIA) consultant\n\n\n\nFood & Beverages\n\noperational management, business-startup\n\n\n\nWall & Glass Decal & Retail\n\noperational management, designer, installer\n\n\n\nSoftware Solutions Consultancy\n\nproject management, quality assurance, ui/ux design, digital marketing, account supports, business development"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Profile",
    "section": "EDUCATION",
    "text": "EDUCATION\n\nAdvanced Degree\nInstitute : Singapore Management University - SMU\nCourse : Master of IT in Business, major in Analytics | Aug 2022 - Ongoing\nSome of the Modules Undertaken :\n\nApplied Geospatial Analytics\nData Analytics Lab with JMP Pro\nSpreadsheets Modeling for Decision Making\nPython Programming & Data Analysis\nApplied Statistical Analysis with R\n\n\n\nBachelor’s Degree\nInstitute : University Malaysia Sabah - UMS\nCourse : Bachelor of Science with Honours, major in Environmental Science | July 2006 - Oct 2009\nSome of the Modules Undertaken :\n\nPhysics & Environmental Remote Sensing\nGeographical Information System & Environmental Modelling\nEnvironmental Statistics\nEnvironmental Monitoring & Assessment\nSoil Science\nEcology & Microbiology\nEnvironmental Chemistry & Chemodynamics\nAir Quality Analysis and Noise\nHydrology & Water Quality Analysis\nPollution Control Technology\nEnvironmental Health & Toxicology\nSolid & Toxic Waste Management\nNatural Resources & Environmental Management\nMacro and Micro Economy\nPrinciples of Entrepreneurship\nFrench"
  },
  {
    "objectID": "handsOn_ex1.html",
    "href": "handsOn_ex1.html",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "",
    "text": "This study explores data visualisation using Tidyverse package."
  },
  {
    "objectID": "handsOn_ex1.html#load-r-packages",
    "href": "handsOn_ex1.html#load-r-packages",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\n\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "handsOn_ex1.html#acquire-data-source",
    "href": "handsOn_ex1.html#acquire-data-source",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "handsOn_ex1.html#import-data",
    "href": "handsOn_ex1.html#import-data",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data\n\n\n\n\n\n\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Missing Value\n\n\n\n\n\n\n\n\nShow the code\nskimr::skim(exam_data)\n\n\n\nData summary\n\n\nName\nexam_data\n\n\nNumber of rows\n322\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nID\n0\n1\n10\n10\n0\n322\n0\n\n\nCLASS\n0\n1\n2\n2\n0\n9\n0\n\n\nGENDER\n0\n1\n4\n6\n0\n2\n0\n\n\nRACE\n0\n1\n5\n7\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nENGLISH\n0\n1\n67.18\n14.69\n21\n59.00\n70\n78.00\n96\n▁▂▅▇▃\n\n\nMATHS\n0\n1\n69.33\n19.98\n9\n58.00\n74\n85.00\n99\n▁▂▃▇▇\n\n\nSCIENCE\n0\n1\n61.16\n18.18\n15\n49.25\n65\n74.75\n96\n▂▃▆▇▃\n\n\n\n\n\nRemarks :\nNo missing data."
  },
  {
    "objectID": "handsOn_ex1.html#compare-charts-between-r-graphics-and-ggplot2",
    "href": "handsOn_ex1.html#compare-charts-between-r-graphics-and-ggplot2",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4.1 Compare Charts between R Graphics and ggplot2",
    "text": "4.1 Compare Charts between R Graphics and ggplot2\n\n\n\n\n\n\nCompare histogram by R Graphics and ggplot2 -\n\n4.1.1 Plot with R Graphics\n\n\n\n\n\n\nUsage of the code chunk below :\nhist( ) - graphics - to compute a histogram.\n\n\n\n\n\nShow the code\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n4.1.2 Plot with ggplot2\n\n\n\n\n\n\nUsage of the code chunk below :\nggplot( ) - ggplot2 - to initialise a ggplot object.\n\ngeom_histogram( )\nggtitle( )\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100,\n                 color = \"black\", \n                 fill = \"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nRemarks :\nggplot2 allows to customise axis labels, title, grid lines."
  },
  {
    "objectID": "handsOn_ex1.html#explore-functions-in-ggplot2",
    "href": "handsOn_ex1.html#explore-functions-in-ggplot2",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4.2 Explore Functions in ggplot2",
    "text": "4.2 Explore Functions in ggplot2\n\n4.2.1 Create Base for a ggplot Object\n\n\n\n\n\n\ntext\n\n-- initialise a ggplot Object\n\nggplot(data = exam_data)\n\n\n\n\n\n\n-- introduce aesthetic mappings\n\n\n\n\n\n\nUsage of the code chunk below :\naes( ) - ggplot2 - to visualise the attributes of the data.\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\n\n\n\n\n4.2.2 Add Geometric Objects\n\n\n\n\n\n\ntext\n\n4.2.2.1 plot bar chart\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_bar( ) - ggplot2 - to makes the height of the bar proportional to the number of “MaTHS”.\n\n\n\n\n\n\nuse geom_col( ) if the bars need to represent values in the data.\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n4.2.2.2 plot dot chart\nThe width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm).\n\ndots are stacked.\neach dot representing one observation.\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nRemarks :\nThe y-scale can be misleading. Hence, below dot chart, the y-axis will be turned off with scale-y-continuous( ) function.\n\n\n\n\n\n\nUsage of the code chunk below :\nbindwidth( ) - ggplot2 - to change the bin width to 2.5.\nscale_y_continuous( ) - ggplot2 - to turn off the y-axis.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n4.2.2.3 plot histogram\nNote that the default bin is 30.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n-- modify colour and bin\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"light blue\")  \n\n\n\n\n\n\n\n-- add subgroup to each bar\n\n\n\n\n\n\nUsage of the code chunk below :\nfill( ) - ggplot2 - to change colour to reflect the sub-group.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\")\n\n\n\n\n\n\n\n4.2.2.4 plot density chart\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_density( ) - ggplot2 - to computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\nIt is useful for continuous data that comes from an underlying smooth distribution.\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n-- plot two (2) kernel density lines with colour arguments under aes( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n-- plot two (2) kernel density with fill arguments under aes( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n4.2.2.5 plot box plot\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_boxplot( ) - ggplot2 - to display summary statistics (median, two hinges and two whiskers) and outliers.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n-- add notches to box plot\n\n\n\n\n\n\nUsage of the code chunk below :\nnotch( ) - ggplot2 - to make it easier to visually notice the distribution of median.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n4.2.2.6 mix plot\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n4.2.2.7 plot violin chart\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_violin( ) - ggplot2 - to plot violins that allow to compare multiple data distributions.\n\nWith ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other.\nWith a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n-- combine violin chart with box plot\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin(fill = \"light blue\") +\n  geom_boxplot(alpha = 0.5)           \n\n\n\n\n\n\n\n4.2.2.8 plot point / scatterplot chart\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\n4.2.3 Add Statistical Functions\n\n\n\n\n\n\nThere are two ways to use these functions :\n\nadd a stat_() function and override the default geom\nadd a geom_() function and override the default stat.\n\n\n4.2.3.1 add mean values on the boxplot\n\n\n\n\n\n\nUsage of the code chunk below :\nstat_summary( ) - ? - to override the default geom.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\",        \n               size = 4)  \n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nstat( ) - ? - to override the default stat.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"red\",          \n             size = 4)          \n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\n\n4.2.4 Add Best Fit Curve on Scatterplot\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_smooth( ) - ggplot2 - to make it easier to interpret the scatterplot by adding fit curve.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(size = 0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n-- override default smoothing method\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n4.2.5 Plot Trellis Plot\n\n\n\n\n\n\nFacets Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables.\nggplot2 supports two (2) types of factes : facet_wrap( ) facet_grid( )\n\n4.2.5.1 plot with face_wrap( ) function\n\n\n\n\n\n\nUsage of the code chunk below :\nfacet_wrap( ) - ggplot2 - to wraps a 1d sequence of panels into 2d.\nThis is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n4.2.5.2 plot with face_grid( ) function\n\n\n\n\n\n\nUsage of the code chunk below :\nfacet_wrap( ) - ggplot2 - to forms a matrix of panels defined by row and column faceting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "handsOn_ex1.html#coordinates",
    "href": "handsOn_ex1.html#coordinates",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "4.3 Coordinates",
    "text": "4.3 Coordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\n\n\n\nThere are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n4.3.1. Working with Coordinate\n\n\n\n\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n4.3.2 Change range for y- and x-axis\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "handsOn_ex1.html#set-theme",
    "href": "handsOn_ex1.html#set-theme",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "5.1 Set Theme",
    "text": "5.1 Set Theme\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nfacet_wrap( ) - ggplot2 - to forms a matrix of panels defined by row and column faceting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\n\n\n5.1.1 Plot Horizontal Bar Chart with theme_gray( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n5.1.2 Plot Horizontal Bar Chart with theme_classic( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n5.1.3 Plot Horizontal Bar Chart with theme_minimal( )\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "handsOn_ex1.html#chart-for-frequency-analysis",
    "href": "handsOn_ex1.html#chart-for-frequency-analysis",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.1 Chart for Frequency Analysis",
    "text": "6.1 Chart for Frequency Analysis\n\n\n\n\n\n\nA simple vertical bar chart for frequency analysis.\n\n6.1.1 Evaluate Original Bar Chart\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\nLecturer’s input :\n\nY-axis label is not clear (i.e. count).\nTo support effective comparison, the bars should be sorted by their respective frequencies.\nThis is a static graph. So, the frequency value is needed to provide more context.\n\n\n\n\n6.1.2 Enhance Bar Chart\n\n6.1.2.1 derive descriptive statistic\nFirst understand the variable.\n\n\nShow the code\nquestionr::freq(exam_data$RACE)\n\n\n          n    % val%\nChinese 193 59.9 59.9\nIndian   12  3.7  3.7\nMalay   108 33.5 33.5\nOthers    9  2.8  2.8\n\n\n\n\n6.1.2.2 plot bar chart\n\n\n-- attempt 1\n\nexam_data %>%\n  group_by(RACE) %>%\n  summarise(count = n()) %>%\n  rename(race = RACE) %>%\n  mutate(pct = scales::percent(count/sum(count)),\n         res = str_c(count, \", \", pct)) %>%\n  ggplot(aes(x = reorder(race, -count),\n             y = count)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Race\",\n       y = \"No. of\\nPupils\",\n       title = \"Primary 3 Students By Race\",\n       subtitle = \"Students from a local school\") +\n  theme(axis.title.y = element_text(angle = 0, \n                                    size = 10),\n        axis.title.x = element_text(size = 10),\n        axis.text.x = element_text(size = 10),\n        axis.text.y = element_text(size = 10)) +\n  geom_text(aes(label = res),\n            vjust = -0.9) + \n  scale_y_continuous(limits = c(0,210))\n\n\n\n\n\n\n-- attempt 2 with recommended function - fct_infreq( )\n\n\n\n\n\n\nUsage of the code chunk below :\nfct_infreq( ) - forcats - to arrange factors according to count data.\n\n\n\n\nexam_data %>%\n  group_by(RACE) %>%\n  summarise(count = n()) %>%\n  rename(race = RACE) %>%\n  mutate(pct = scales::percent(count/sum(count)),\n         res = str_c(count, \", \", pct)) %>%\n  ggplot(aes(fct_infreq(race),\n             y = count)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Race\",\n       y = \"No. of\\nPupils\",\n       title = \"Primary 3 Students By Race\",\n       subtitle = \"Students from a local school\") +\n  theme(axis.title.y = element_text(angle = 0, \n                                    size = 10),\n        axis.title.x = element_text(size = 10),\n        axis.text.x = element_text(size = 10),\n        axis.text.y = element_text(size = 10)) +\n  geom_text(aes(label = res),\n            vjust = -0.9) + \n  scale_y_continuous(limits = c(0,210))\n\n\n\n\nCredit: Iearned this lesson which sourced from Getting things into the right order of Prof. Claus O. Wilke, the author of Fundamentals of Data Visualization\n\n\n-- attempt 3 with fct_reorder( )\n\n\n\n\n\n\nUsage of the code chunk below :\nfct_reorder( ) - forcats - to reorder data.\n\n\n\n\nexam_data %>%\n  group_by(RACE) %>%\n  summarise(count = n()) %>%\n  rename(race = RACE) %>%\n  mutate(pct = scales::percent(count/sum(count)),\n         res = str_c(count, \", \", pct)) %>%\n  ggplot(aes(fct_reorder(race, -count),\n             y = count)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Race\",\n       y = \"No. of\\nPupils\",\n       title = \"Primary 3 Students By Race\",\n       subtitle = \"Students from a local school\") +\n  theme(axis.title.y = element_text(angle = 0, \n                                    size = 10),\n        axis.title.x = element_text(size = 10),\n        axis.text.x = element_text(size = 10),\n        axis.text.y = element_text(size = 10)) +\n  geom_text(aes(label = res),\n            vjust = -0.9) + \n  scale_y_continuous(limits = c(0,210))\n\n\n\n\nRemarks :\n\nBelow is the sample answer provided for this lesson.\nPlot above added title and subtitle to set the main context for this plot.\n\n\nBelow are two (2) code chunk with different approach provided by the lesson :\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE,\n                function(x)-length(x))))+\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "handsOn_ex1.html#histogram",
    "href": "handsOn_ex1.html#histogram",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.2 Histogram",
    "text": "6.2 Histogram\n\n\n\n\n\n\ntext\n\n6.2.1 Evaluate Original Histogram\n\nLecturer’s input :\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\n\n\n6.2.2 Enhance Histogram\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"light blue\") +\n  geom_vline(xintercept = mean(exam_data$MATHS),\n             col = \"red\",\n             lwd = 1,\n             linetype = \"dashed\") +\n  geom_vline(xintercept = median(exam_data$MATHS),\n             col = \"black\",\n             lwd = 1,\n             linetype = \"dashed\") +  \n  annotate(\"text\",\n           x = mean(exam_data$MATHS)*0.84,\n           y = mean(exam_data$MATHS)*0.78,\n           label = paste(\"Mean =\", round(mean(exam_data$MATHS),2)),\n           col = \"red\",\n           size = 5) +\n  annotate(\"text\",\n           x = median(exam_data$MATHS)*0.8,\n           y = median(exam_data$MATHS)*0.8,\n           label = paste(\"Median =\", round(median(exam_data$MATHS),2)),\n           col = \"black\",\n           size = 5)\n\n\n\n\nRemarks :\nBelow is the sample answer provided for this lesson.\n\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS,\n                                 na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS,\n                                  na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)"
  },
  {
    "objectID": "handsOn_ex1.html#trellis-plot-for-histogram",
    "href": "handsOn_ex1.html#trellis-plot-for-histogram",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.3 Trellis Plot for Histogram",
    "text": "6.3 Trellis Plot for Histogram\n\n\n\n\n\n\ntext\n\n6.3.1 Evaluate Original Trellis Plot for Histogram\n\nLecturer’s input :\nThe histograms above are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\nCreate a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.\n\n\n6.3.2 Enhance Trellis Plot for Histogram\n\ngendEngl <- exam_data[,-3]\n\nggplot(exam_data,\n       aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = gendEngl, fill = \"grey\", alpha = .5) +\n  geom_histogram(color = \"black\") +\n  facet_wrap(~ GENDER) +\n  theme(axis.title.y = element_text(size = 5),\n        axis.title.x = element_text(size = 5),\n        axis.text.x = element_text(size = 5),\n        axis.text.y = element_text(size = 5),\n        panel.grid.major = element_line(colour = \"steelblue\", \n                                        size = rel(0.5)),\n        panel.grid.minor = element_blank()) +\n  scale_y_continuous(limits = c(0,30)) +\n  guides(fill = FALSE) +\n  theme_bw()\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemarks :\n\nBelow is the sample answer provided for this lesson.\n\n\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()"
  },
  {
    "objectID": "handsOn_ex1.html#scatterplot",
    "href": "handsOn_ex1.html#scatterplot",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.4 Scatterplot",
    "text": "6.4 Scatterplot\n\n\n\n\n\n\ntext\n\n6.4.1 Evaluate Original Scatterplot\n\nA within group scatterplot with reference lines.\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme(axis.title.y = element_text(size = 8),\n        axis.title.x = element_text(size = 8),\n        axis.text.x = element_text(size = 6),\n        axis.text.y = element_text(size = 6)) +\n  geom_hline(yintercept = 50,\n             linetype = \"dashed\",\n             colour = \"grey60\",\n             size = 1) + \n  geom_vline(xintercept = 50, \n             linetype = \"dashed\",\n             colour = \"grey60\",\n             size = 1)\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "handsOn_ex1.html#trellis-boxplot",
    "href": "handsOn_ex1.html#trellis-boxplot",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.5 Trellis Boxplot",
    "text": "6.5 Trellis Boxplot\n\n\n\n\n\n\nThis section consits of three different trellis plots. ### 6.5.1 Plot 2 Columns - 2 Characters and 1 Continuous Variable\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = CLASS)) +    \n  geom_boxplot() +\n  facet_grid(~ GENDER) +\n  theme(axis.title.y = element_text(size = 7.5),\n        axis.title.x = element_text(size = 7.5),\n        axis.text.x = element_text(size = 7),\n        axis.text.y = element_text(size = 7))\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= CLASS)) +\n  geom_boxplot() +\n  facet_grid(~ GENDER)\n\n\n6.5.2 Plot 1 Column, 2 Rows - 2 Characters and 1 Continuous Variables\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = CLASS)) +    \n  geom_boxplot() +\n  facet_grid(GENDER ~ CLASS, scales = \"free\") +\n  theme(axis.title.y = element_text(size = 7.5),\n        axis.title.x = element_text(size = 7.5),\n        axis.text.x = element_text(size = 7),\n        axis.text.y = element_text(size = 7),\n        strip.text.x = element_blank(),\n        strip.text.y = element_text(size = 7),\n        panel.spacing.y = unit(1, \"mm\"),\n        panel.spacing.x = unit(0, \"mm\")\n        )\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= CLASS)) +\n  geom_boxplot() +\n  facet_grid(GENDER ~.)\n\n\n\n6.5.3 Plot 1 Column, 2 Rows - 2 Characters and 1 Continuous Variables\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot() +\n  facet_grid(GENDER ~ CLASS, scales = \"free\") +\n  theme(axis.title.y = element_text(size = 7.5),\n        axis.title.x = element_text(size = 7.5),\n        axis.text.x = element_text(size = 6.5),\n        axis.text.y = element_text(size = 6.5),\n        strip.text.y = element_text(size = 7),\n        strip.text.x = element_text(size = 7),\n        panel.spacing.y = unit(1, \"mm\"),\n        panel.spacing.x = unit(1, \"mm\")\n        )\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n    facet_grid(GENDER ~ CLASS)"
  },
  {
    "objectID": "handsOn_ex1.html#change-theme",
    "href": "handsOn_ex1.html#change-theme",
    "title": "Hands-on 1 - DataVis with ggplot2",
    "section": "6.6 Change Theme",
    "text": "6.6 Change Theme\n\n\n\n\n\n\n\n\n\n\n\nInstruction :\nChange the colour of plot panel background of theme_minimal() to light blue and the colour of grid lines to white.\n\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\",\n                                    colour = \"lightblue\"),\n    panel.grid.major = element_line(size = 0.5,\n                                    linetype = \"solid\",\n                                    colour = \"white\"),\n    axis.title.y = element_text(size = 7.5),\n    axis.title.x = element_text(size = 7.5),\n    axis.text.x = element_text(size = 6.5),\n    axis.text.y = element_text(size = 6.5)\n    )\n\n\n\n\nBelow is the code chunk provided by the lesson :\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(panel.background = element_rect(\n    fill = \"lightblue\",\n    colour = \"lightblue\",\n    size = 0.5,\n    linetype = \"solid\"),\n    panel.grid.major = element_line(\n      size = 0.5,\n      linetype = 'solid',\n      colour = \"white\"), \n    panel.grid.minor = element_line(\n      size = 0.25,\n      linetype = 'solid',\n      colour = \"white\"))"
  },
  {
    "objectID": "handsOn_ex2.html",
    "href": "handsOn_ex2.html",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "",
    "text": "This study explores data visualisation using Tidyverse package."
  },
  {
    "objectID": "handsOn_ex2.html#load-r-packages",
    "href": "handsOn_ex2.html#load-r-packages",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\n\n\npacman::p_load(tidyverse, patchwork, ggthemes, hrbrthemes, ggrepel)"
  },
  {
    "objectID": "handsOn_ex2.html#acquire-data-source",
    "href": "handsOn_ex2.html#acquire-data-source",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "handsOn_ex2.html#import-data",
    "href": "handsOn_ex2.html#import-data",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data\n\n\n\n\n\n\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Missing Value\n\n\n\n\n\n\n\n\nShow the code\nskimr::skim(exam_data)\n\n\n\nData summary\n\n\nName\nexam_data\n\n\nNumber of rows\n322\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nID\n0\n1\n10\n10\n0\n322\n0\n\n\nCLASS\n0\n1\n2\n2\n0\n9\n0\n\n\nGENDER\n0\n1\n4\n6\n0\n2\n0\n\n\nRACE\n0\n1\n5\n7\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nENGLISH\n0\n1\n67.18\n14.69\n21\n59.00\n70\n78.00\n96\n▁▂▅▇▃\n\n\nMATHS\n0\n1\n69.33\n19.98\n9\n58.00\n74\n85.00\n99\n▁▂▃▇▇\n\n\nSCIENCE\n0\n1\n61.16\n18.18\n15\n49.25\n65\n74.75\n96\n▂▃▆▇▃\n\n\n\n\n\nRemarks :\nNo missing data."
  },
  {
    "objectID": "handsOn_ex2.html#plot-with-label-annotation",
    "href": "handsOn_ex2.html#plot-with-label-annotation",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "4.1 Plot with Label & Annotation",
    "text": "4.1 Plot with Label & Annotation\n\n\n\n\n\n\ntext\n\n4.1.1 Overlapping Issue\n\n\n\n\n\n\nUsage of the code chunk below :\nxxx( ) - xxx - to compute.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n4.1.2 Solve with ggplot2 :: ggrepel\n\n\n\n\n\n\nUsage of the code chunk below :\nxxx( ) - xxx - to compute.\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nRemarks :\nggrepel: 318 unlabeled data points (too many overlaps). Consider increasing max.overlaps"
  },
  {
    "objectID": "handsOn_ex2.html#theme-options",
    "href": "handsOn_ex2.html#theme-options",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "4.2 Theme Options",
    "text": "4.2 Theme Options\nThis exercise explore 3 themes packages, namely :\n\nggplot2 package\nggthemes\npatchwork package\n\n\n4.2.1 Themes by ggplot2\n\n\n\n\n\n\nThere are 8 built-in themes for ggplot2 :\n\ntheme_gray(),\ntheme_bw(),\ntheme_classic(),\ntheme_dark(),\ntheme_light(),\ntheme_linedraw(),\ntheme_minimal(),\ntheme_void()\n\n\n4.2.1.1 theme_gray( )\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n4.2.1.2 theme_bw( )\n\n\n\n\n\n\nUsage of the code chunk below :\nxxx( ) - xxx - to compute.\n\n\n\n\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_bw() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n4.2.2 Themes by ggplot2 :: ggthemes\n\n\n\n\n\n\nggthemes provides extension to replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\n\n\n\n\n\nUsage of the code chunk below :\nxxx( ) - xxx - to compute.\n\n\n\n\n\n\nuse geom_col( ) if the bars need to represent values in the data.\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n4.2.3 Themes by ggplot2 :: hrbrthemes\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\n\nShow the code\nggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\nWhat can we learn from the code chunk below?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "handsOn_ex2.html#section-1",
    "href": "handsOn_ex2.html#section-1",
    "title": "Hands-on 2 - DataVis with Advanced ggplot2",
    "section": "",
    "text": "4.3 Composite Plot with Facet Option\nCreating Composite Graphics: pathwork methods\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, I am going to shared with you patchwork.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign \\\ncreate composite plot by combining multiple graphs. First, let us create three statistical graphics.\\\n\n\nShow the code\np1 <- ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nShow the code\np2 <- ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nShow the code\np3 <- ggplot(data = exam_data, \n             aes(x = MATHS, \n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nShow the code\np1 + p2 / p3\n\n\n\n\n\n| will place the plots beside each other, while / will stack them.\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\nPlot assembly - https://patchwork.data-imaginist.com/articles/guides/assembly.html\n\nWorking with patchwork\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text:\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nShow the code\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\nWorking with patchwork\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "handsOn_ex3.1.html",
    "href": "handsOn_ex3.1.html",
    "title": "Programming Interactive Visualisation",
    "section": "",
    "text": "This study explores various approaches to make data visualisation interactive.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 3 main focuses :\n\nInteractive visualisation by using ggiraph and plotlyr packages,\nAnimation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\n\nAdditional learning points are :\n\nReshape data by using tidyr package.\nProcess, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "handsOn_ex3.1.html#load-r-packages",
    "href": "handsOn_ex3.1.html#load-r-packages",
    "title": "Programming Interactive Visualisation",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggiraph, plotly, DT, tidyverse, patchwork, rPackedBar) \n\n\n\n\n\n\n\nUsage of R Packages :\n\n\n\n\n\n\nggiraph for making ‘ggplot’ graphics interactive.\n\nggiraph is an html widget and ggplot2 extension to make the plot interactive.\ngirafe graphics are responsive. They resize according to their container.\n\nplotly, R library for plotting interactive statistical graphs.\nDT a wrapper of the JavaScript Library DataTables.\n\nData objects in R can be rendered as interactive HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots.\nCrosstalk is an add-on to the html widgets package. It extends html widgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering)."
  },
  {
    "objectID": "handsOn_ex3.1.html#acquire-data-source",
    "href": "handsOn_ex3.1.html#acquire-data-source",
    "title": "Programming Interactive Visualisation",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson."
  },
  {
    "objectID": "handsOn_ex3.1.html#import-data",
    "href": "handsOn_ex3.1.html#import-data",
    "title": "Programming Interactive Visualisation",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "handsOn_ex3.1.html#ggiraph-package",
    "href": "handsOn_ex3.1.html#ggiraph-package",
    "title": "Programming Interactive Visualisation",
    "section": "4.1 ggiraph package",
    "text": "4.1 ggiraph package\nWith reference to the arguments listed in ggplot geometries, display a specified set of information when a reader interact with the charts via :\n\nTooltip : display details when the cursor hovers above the element.\nOnclick : display details when the element is clicked.\nData_id : a column of data sets containing an id associated with the element.\n\n\n\n\n\n\n\n⇳ Note for Shiny Application\n\n\n\n\n\nFor shiny application, elements associated with an id (data_id) can be selected and manipulated on tne client and server sides.\nRefer to this article for a more detailed explanation.\n\n\n\n\n4.1.1 Include Tooltip\nThere are 2 main steps involved :\n\nInitiate object.\nSave the object as an interactive Scalable Vector Graphics (SVG) file.\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ngeom_dotplot_interactive( ) - ggplot2 - to plot interactive dot chart.\nArguments :\n\ntooltip - display the student ID that associated with the dot.\nmethod - “histodot” to fix bin widths. Else, dot-density binning. “dotdensity” will be the default.\n\ndot-density binning : bin positions subject to the data and binwidth (max width of each bin).\nhistodot binning : fixed positions and fixed widths.\n\nBin width defaults to 1/30 of the range of the data.\n\n\ndotsize - diameter of the dots relative to binwidth, 1 (default).\n\ngirafe( ) - ggiraph - to create an interactive gg object for web browser display.\nArguments :\n\nwidth_svg : default size is 6 inches.\nheight_svg : default size is 5 inches.\n\n\n\n\n\n\n\nCode chunkNo Tooltip :: histodotNo Tooltip :: dotdensity\n\n\n\nstep 1 - Create ggplot object\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (tooltip = ID),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             dotsize = 1,\n                             method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\nstep 2 - create interactive SVG Object\n\ngirafe(ggobj = p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(aes\n               (stackgroups = TRUE,\n                 binwidth = 1,\n                 dotsize = 1,\n                 method = \"histodot\")) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(aes\n               (stackgroups = TRUE,\n                 binwidth = 2,\n                 dotsize = 1,\n                 method = \"dotdensity\")) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\n\n\n\n\n\n\nRemarks :\nThe first 2 tabs share similar code chunks except for the interactive function, while 3rd tab, with a different method, regardless of which methods are applied, noticed the one with the tooltip is more informative and friendly to interpret the chart.\nY-axis is hidden. It became meaningless when binning along X-axis and stacking by Y-axis.\n\n\n\n\n4.1.2 Customise tooltip\n\n4.1.2.1 Display additional details\n\nexam_data$tooltip <- c(paste0(\"Name = \", exam_data$ID,\n                              \"\\n Class = \", exam_data$CLASS)\n                       )\n\np <- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (tooltip = tooltip),\n                            stackgroups = TRUE,\n                            binwidth = 1,\n                            method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618\n       )\n\n\n\n\n\n\n\n4.1.2.2 Include statistics\nThere are 2 parts to this approach :\n\nFirst part is to set a function to compute a 90% Confidence Interval of the mean.\nSecond part is to include the derived statistics in the tooltip.\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstat_summary( ) - ggplot2 - to summarise y values at unique x.\nArguments :\n\ngeom - geometric object to use for displaying data. There are 2 ways to input value, either input :\n\n“GeomInteractiveCol”, a ggproto classes for ggiraph.\n“errorbar” without “geom_” prefix.\n\n\n\n\n\n\ntooltip <- function(y, \n                    ymax, \n                    accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n  }\n\ngg_point <- ggplot(data = exam_data, \n                   aes(x = RACE)) +\n  stat_summary(aes\n               (y = MATHS,\n                 tooltip = after_stat(\n                   tooltip(y, \n                           ymax)\n                   )),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes\n               (y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\",\n                width = 0.2,\n                size = 0.2\n               )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\nRemarks :\nWill have the error below if include ” ” for “GeomInteractiveCol”.\nError in `stat_summary()`:\n! Can't find geom called \"GeomInteractiveCol\"\nError bars can be used to visually compare 2 quantities when other conditions hold. It indicates :\n\nwhether the differences are statistically significant.\ngoodness of fit of a given function to describes the data.\n\nAdding error bars to communicate more information visually how certain the specific values are presenting.\n\n\n4.1.2.3 Customise appearance\n\ntooltip_css <- \"background-color: white; \n                font-style: bold; \n                color: black;\"\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (tooltip = ID),\n                            stackgroups = TRUE,                  \n                            binwidth = 1,                        \n                            method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p,\n       width_svg = 6,                         \n       height_svg = 6*0.618,\n       options = list(\n       opts_tooltip(\n       css = tooltip_css))\n       )        \n\n\n\n\n\nRemarks :\nThe tooltip’s background colour changed from black to white colour, and the text colour is now white and bold.\n\n\n\n4.1.3 Highlight associated data\n\n4.1.3.1 Highlight with data_id aesthetic\nHighlight other elements that share the same data_id value for “CLASS”.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ndata_id( ) - ggiraph - to highlight other elements that share the same data_id value for “CLASS”.\n\nDefault value for hover_css is ” fill:orange;”\n\n\n\n\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (data_id = CLASS),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p,\n       width_svg = 6,                         \n       height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n4.1.3.2 Styling hover effect\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (data_id = CLASS),\n                           stackgroups = TRUE,                  \n                           binwidth = 1,                        \n                           method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p,\n       width_svg = 6,                         \n       height_svg = 6*0.618,\n       options = list(\n       opts_hover(css = \"fill: #202020;\"),\n       opts_hover_inv(css = \"opacity:0.2;\")\n       ))                                        \n\n\n\n\n\n\n\n\n4.1.4 Combine tooltip and hover effect\n\np <- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (tooltip = CLASS,\n                             data_id = CLASS),\n                           stackgroups = TRUE,                  \n                           binwidth = 1,                        \n                           method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )                                        \n\n\n\n\n\n\n\n4.1.5 Click effect with onclick\nThere are 2 parts in this approach :\n\nSet the student ID a vector that direct users to the link’s site.\nPlot with “onclick” function.\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nsprintf( ) - base - to wrap the C function that returns a character vector containing a formatted combination of text and variable values.\nonclick( ) - shinyjs - to run R code when an element is clicked.\n\nArguments references for Shiny.\n\n\n\n\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (onclick = onclick),\n                           stackgroups = TRUE,\n                           binwidth = 1,                        \n                           method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618)                                        \n\n\n\n\n\nRemarks :\nEnsure the string column contains valid javascript instructions.\n\n\n4.1.6 Coordinated multiple views\nWhen a data point is selected, the data point with the corresponding ID in another chart is highlighted too.\nThere are 2 steps involved in creating such coordination :\n\nCreate 2 or more objects with ggiraph interactive functions.\nAdd patchwork function of patchwork package to create the interactive coordinated multiple views.\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncoord_cartesian( ) - ggplot2 - to set the limits on the coordinate system for the plot, so that the underlying data won’t be changed.\nopts_hover( ) - ggiraph - to set the hover effect.\nArgument :\n\n2 input for css : either a scalar character or “girafe_css” to control CSS for different element types.\n\nNote :\nopts_hover for interactive geometrices in panels.\nopts_hover_key for interactive scales / guides.\nopts_hover_theme for itneractie theme elements.\nopts_hover_inv for the effect on the rest of the geometries, while one is hovered.\n\n\n\n\np1 <- ggplot(data = exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(aes\n                           (data_id = ID),\n                           stackgroups = TRUE,                  \n                           binwidth = 1,                        \n                           method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n\np2 <- ggplot(data = exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(aes\n                           (data_id = ID),\n                           stackgroups = TRUE,                  \n                           binwidth = 1,                        \n                           method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2),\n       width_svg = 6,\n       height_svg = 10,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nRemarks :\n!!!!! When time permits, need to explore how to add tooltip."
  },
  {
    "objectID": "handsOn_ex3.1.html#plotly-package",
    "href": "handsOn_ex3.1.html#plotly-package",
    "title": "Programming Interactive Visualisation",
    "section": "4.2 plotly package",
    "text": "4.2 plotly package\nThere are 2 approaches to create interactive graph with this package :\n\nwith plot_ly( )\nwith ggplotly( )\n\n\n4.2.1 With plot_ly( ) function\n\n4.2.1.1 Initiate scatter plot\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nplot_ly( ) - plotly - to initiate an interactive scatter plot.\nArgument :\n\ncolor to map values to relevant “fill-color” attribute(s).\ncolors can be colorbrewer2.org palette name (“YlOrRd” or “Blues”), hexadecimal “#RRGGBB” or color interpolation function.\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n4.2.1.2 Visualise different values\n\ncolor = ~“RACE”color = ~“RACE”color = “RACE”\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~\"RACE\")\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = \"RACE\")\n\n\n\n\n\n\n\n\nRemarks :\nCannot only use ` ` , else will have error “object `RACE` not found”.\n\n\n4.2.1.3 Change colour palette\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\n\n4.2.1.4 Customise colour scheme\n\npal <- c(\"red\", \"purple\", \"blue\", \"green\")\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal)\n\n\n\n\n\n\n\n4.2.1.5 Customise tooltip\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,\n                      \"<br>Class:\", CLASS),\n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\n\n4.2.1.6 Customise layout\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = \"English Score versus Maths Score\",\n         xaxis = list(range = c(0, 100)),\n         yaxis = list(range = c(0, 100)))\n\n\n\n\n\n\n\n\n4.2.2 With ggplotly( ) function\n\n4.2.2.1 Create single scatter plot\n\np <- ggplot(data = exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\n4.2.2.2 Coordinated multiple views\nThere are 2 steps involved :\n\ncreate multiple plots with subplot function.\nset coordinated multiple views.\n\n\n\nCreate multiple plots\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nsubplot( ) - plotly - to view multiple plots in a single view.\nggplotly( ) - plotly - to convert ggplot2 to plotly.\n\n\n\n\np1 <- ggplot(data = exam_data, \n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np2 <- ggplot(data = exam_data,\n             aes(x = MATHS,\n                 y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\nSet coordination view\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nhighlight_key( ) - plotly - to create an object of crosstalk:: sharedData class to highlight data based on primary key.\n\n\n\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data = d,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\np2 <- ggplot(data = d, \n             aes(x = MATHS,\n                 y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "handsOn_ex3.1.html#dt-package",
    "href": "handsOn_ex3.1.html#dt-package",
    "title": "Programming Interactive Visualisation",
    "section": "4.3 DT package",
    "text": "4.3 DT package\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ndatatable( ) - DT - to create an interactive HTML table.\nArgument :\n\nclass set with “compact”, also a default value, is to reduce the amount of white-space and increase the information density on screen.\n\ncan mixed with other values like “compact cell-border stripe”\n\n\n\n\n\n\nDefault :: compact“compact cell-border stripe”“display”\n\n\n\ndatatable(exam_data,\n          class= \"compact\")\n\n\n\n\n\n\n\n\n\ndatatable(exam_data,\n          class= \"compact cell-border stripe\")\n\n\n\n\n\n\n\n\nA short-hand for “stripe”, “hover”, “row-border” and “order-column” classes.\n\ndatatable(exam_data,\n          class= \"display\")"
  },
  {
    "objectID": "handsOn_ex3.1.html#crosstalk-package",
    "href": "handsOn_ex3.1.html#crosstalk-package",
    "title": "Programming Interactive Visualisation",
    "section": "4.4 crosstalk package",
    "text": "4.4 crosstalk package\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nbscols( ) - crosstalk - to arrange HTML table with other elements side by side.\nArgument :\n\ndevice set with “sm” so that can collapse to single column when screen size smaller than 768px.\n\n“xs” = never collapse\n“md” = collapse when screen smaller than 992px\n“lg” = collapse when screen smaller than 1200px\n\n\n\n\n\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 6,\n                  device = \"sm\")"
  },
  {
    "objectID": "handsOn_ex3.2.html",
    "href": "handsOn_ex3.2.html",
    "title": "Programming Animation",
    "section": "",
    "text": "This study explores various approaches to make data visualisation interactive.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 2 main focuses :\n\nAnimation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\n\nAdditional learning points are :\n\nReshape data by using tidyr package.\nProcess, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "handsOn_ex3.2.html#load-r-packages",
    "href": "handsOn_ex3.2.html#load-r-packages",
    "title": "Programming Animation",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggiraph, plotly, gganimate, gifski, gapminder, DT, patchwork, rPackedBar, tidyverse) \n\n\n\n\n\n\n\nUsage of R Packages :\n\n\n\n\n\n\ngganimate, an ggplot extension for creating animated statistical graphs. The package provides a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme."
  },
  {
    "objectID": "handsOn_ex3.2.html#acquire-data-source",
    "href": "handsOn_ex3.2.html#acquire-data-source",
    "title": "Programming Animation",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on the Data worksheet from GlobalPopulation Excel workbook."
  },
  {
    "objectID": "handsOn_ex3.2.html#import-data",
    "href": "handsOn_ex3.2.html#import-data",
    "title": "Programming Animation",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\ncol <- c(\"Country\", \"Continent\")\n\nglobalPop <- readxl::read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %>%\n  mutate_each_(funs\n               (factor(.)), col) %>%\n  mutate(Year = as.integer\n         (Year))\n\nproblems(globalPop)"
  },
  {
    "objectID": "handsOn_ex3.2.html#gganimate-package",
    "href": "handsOn_ex3.2.html#gganimate-package",
    "title": "Programming Animation",
    "section": "4.1 gganimate package",
    "text": "4.1 gganimate package\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ntransition_time( ) - gganimate - to create transition through distinct states by “Year”.\nease_aes( ) - gganimate - to control easing of aesthetics. “linear” is the default value.\n\nOther easing functions are :\n\nquadratic Models a power-of-2 function\ncubic Models a power-of-3 function\nquartic Models a power-of-4 function\nquintic Models a power-of-5 function\nsine Models a sine function\ncircular Models a pi/2 circle arc\nexponential Models an exponential function\nelastic Models an elastic release of energy\nback Models a pullback and relase\nbounce Models the bouncing of a ball\n\n\n\n\n\n\nAnimated “linear”Static Bubble Plot\n\n\nwith ggplot2 functions.\n\nggplot(globalPop, \n       aes(x = Old, \n           y = Young,\n           size = Population,\n           colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')\n\n\n\n\n\n\n\nggplot(globalPop, \n       aes(x = Old,\n           y = Young,\n           size = Population,\n           colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "handsOn_ex3.3.html",
    "href": "handsOn_ex3.3.html",
    "title": "Visualise Large Data Interactively",
    "section": "",
    "text": "This study explores various approaches to make data visualisation interactive.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 2 main focuses :\n\nAnimation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\n\nAdditional learning points are :\n\nReshape data by using tidyr package.\nProcess, wrangle and transform data by using dplyr package.\n\nIntroducing packed bar method\n\npacked bar is a relatively new data visualisation method introduced by Xan Gregg from JMP.\nIt aims to support the need of visualising skewed data over hundreds of categories.\nThe idea is to support the Focus+Context data visualization principle.\nVisit this JMP Blog to learn more about the design principles of packed bar."
  },
  {
    "objectID": "handsOn_ex3.3.html#load-r-packages",
    "href": "handsOn_ex3.3.html#load-r-packages",
    "title": "Visualise Large Data Interactively",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggiraph, plotly, gganimate, gifski, gapminder, DT, patchwork, rPackedBar, tidyverse) \n\n\n\n\n\n\n\nUsage of R Packages :\n\n\n\n\n\n\nrPackedBar: Packed Bar Charts with ‘plotly’\n\nVisualizing Twitter Data with a Packed Barchart"
  },
  {
    "objectID": "handsOn_ex3.3.html#acquire-data-source",
    "href": "handsOn_ex3.3.html#acquire-data-source",
    "title": "Visualise Large Data Interactively",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on :\n\nGDP.csv provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from World Development Indicators Database of World Bank.\nWorldCountry.csv provides a list of country names and the continent they belong to extracted from Statistics Times."
  },
  {
    "objectID": "handsOn_ex3.3.html#import-data",
    "href": "handsOn_ex3.3.html#import-data",
    "title": "Visualise Large Data Interactively",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\nShow the code\nGDP <- read_csv(\"data/GDP.csv\")\n\nproblems(GDP)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\nShow the code\nWorldCountry <- read_csv(\"data/WorldCountry.csv\")\n\nproblems(WorldCountry)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "handsOn_ex3.3.html#wrangle-data",
    "href": "handsOn_ex3.3.html#wrangle-data",
    "title": "Visualise Large Data Interactively",
    "section": "3.3 Wrangle Data",
    "text": "3.3 Wrangle Data\n\n3.3.1 Reshape data frame\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nmutate( ) - dplyr - to convert all values in the 202 field into numeric data type.\nselect( ) - dplyr - to extract column 1 to 3 and Values field.\npivot_wider( ) - tidyr - to split the values in Series Name field into columns.\nleft_join( ) - dplyr - to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.\n\n\n\n\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, \n         Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y = WorldCountry, \n            by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n\n\n\n3.3.2 Filter data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nna.omit( ) - dplyr - to exclude rows with missing values as the rPackedBar package does not support missing values.\n\n\n\n\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()"
  },
  {
    "objectID": "handsOn_ex3.3.html#create-packed-bars-chart",
    "href": "handsOn_ex3.3.html#create-packed-bars-chart",
    "title": "Visualise Large Data Interactively",
    "section": "4.1 Create Packed Bars Chart",
    "text": "4.1 Create Packed Bars Chart\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nplotly_packed_bar( ) - rPackedBar - to create an interactive “plotly” packed bar chart.\nconfig( ) - plotly - to set the default configuration for plotly. The modebar in a plotly graph can lead to poor user-experience on small displays.\n\ndisplayModeBar when FALSE will remove the entire modebar.\n\n\n\n\n\np = plotly_packed_bar(input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)"
  },
  {
    "objectID": "handsOn_ex4.1.html",
    "href": "handsOn_ex4.1.html",
    "title": "Visual Statistical Analysis",
    "section": "",
    "text": "This study explores visual statistical analysis with :\n\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters."
  },
  {
    "objectID": "handsOn_ex4.1.html#load-r-packages",
    "href": "handsOn_ex4.1.html#load-r-packages",
    "title": "Visual Statistical Analysis",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggstatsplot, tidyverse) \n\n\n\n\n\n\n\n⇳ Highlights of the R Packages :\n\n\n\n\n\nggstatsplot is an extension of ggplot2 package.\nThis package will create a plot filled with statistical test details.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting.\n\nThe default statistical reporting in the plots follows the APA gold standard."
  },
  {
    "objectID": "handsOn_ex4.1.html#acquire-data-source",
    "href": "handsOn_ex4.1.html#acquire-data-source",
    "title": "Visual Statistical Analysis",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson."
  },
  {
    "objectID": "handsOn_ex4.1.html#import-data",
    "href": "handsOn_ex4.1.html#import-data",
    "title": "Visual Statistical Analysis",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attribute data\nInvolved two (2) steps : import and inspect imported data set.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Identify variables’ type\n\n\nShow the code\nglimpse(exam_data, 70)\n\n\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student22…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\"…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", …\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Ma…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, …\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 3…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, …\n\n\nRemarks :\nThose dbl type variables remain status-quo instead of converting to an integer type."
  },
  {
    "objectID": "handsOn_ex4.1.html#explore-data",
    "href": "handsOn_ex4.1.html#explore-data",
    "title": "Visual Statistical Analysis",
    "section": "3.3 Explore Data",
    "text": "3.3 Explore Data\n\n3.3.1 Identify distribution by “GENDER”\n\n\nShow the code\nfunModeling::freq(exam_data$GENDER)\n\n\n\n\n\n     var frequency percentage cumulative_perc\n1 Female       170       52.8            52.8\n2   Male       152       47.2           100.0"
  },
  {
    "objectID": "handsOn_ex4.1.html#one-sample-test-with-gghistostats-function",
    "href": "handsOn_ex4.1.html#one-sample-test-with-gghistostats-function",
    "title": "Visual Statistical Analysis",
    "section": "4.1 One-sample test with gghistostats( ) function",
    "text": "4.1 One-sample test with gghistostats( ) function\nThe context of this histogram plot with a dual y-axis is to : !!!!!\n\nTo find out how many students for each “ENGLISH” score?\nTo get the proportion of students for particular score range?\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ngghistostats( ) - ggstatsplot - to plot histogram with statistical details included as a subtitle for this one-sample test.\n\n\n\n\nset.seed(1234)\n\ngghistostats(data = exam_data,\n             x = ENGLISH,\n             type = \"bayes\",\n             test.value = 60,\n             xlab = \"English scores\")\n\n\n\n\nRemarks :\nThe default information consists :\n\nBayes Factor\n$ logee(BF01) = -31.45 $\n\nBayes factor is the ratio of the likelihood of one hypothesis to the likelihood of another.\n\nor interpreted as an evidence weight/strength measurement among two competing theories.\n\n\n\n\n\n\n\n⇳ more about Bayes Factor\n\n\n\n\n\n\nBF10 is the factor’s notation indicate H1 favour over H0, BF01 indicates otherwise.\n\nLarge value of BF10 means higher likelihood of H1.\nFor BF10, define the factor mathematically as\n\\[\nLikelihood of Data given H1, P (D | H1) / Likelihood of Data given H0, P (D | H0)\n\\]\n\nThe Schwarz criterion, an index used in Bayesian statistics, is one of the easiest ways to compute the approximation of the Bayes Factor.\n\nThe lowest BIC is the best model.\nWhen Δ BIC, a notation for the difference between models, is less than 1, the argument can be insignificant to none for the best model.1\nWhen Δ BIC is between 1 and 3, anecdotal evidence for the best model.\nWhen Δ BIC is between 3 and 10, there is moderate to strong evidence against the weaker model.\nWhen Δ BIC is between 6 and 10, the evidence against the weaker model is strong.\nWhen Δ BIC is greater than 10, the evidence favouring the best model against the other model is very strong.\n\n\nExample to calculate Δ BIC2 :\n\nGiven a 50 observation points data set.\nModel 1 estimates 3 parameters.\nModel 2 estimates 4 parameters.\nLog of maximum likelihood for model 1 is a, and for model 2 it is 2a.\nUsing the formula k log(n)- 2log(L(θ)):\nModel 1 : 3log(50) – 2a = 5.1 – 2a\nModel 2 : 4log(50) – 4a = 6.8 – 4a\nThus, ΔBIC is 1.7 – 2a.\nHence, it will only be ‘worth mentioning’ if 1.7 – 2a > 2, and only can claim conclusive results if a < -0.15.\n\n\n\n\n\nPosterior Probability is the probability of an event occurring after taking into consideration another occurred event.\n\\(δ{posterior \\choose difference} = 7.16\\)\nConfidence Equal-Tailed Interval (ETI)’s probability that displayed below this interval is equal to the probability displayed above.\n\n\\[\nCI{ETI \\choose 95%}[5.54, 8.75]\n\\]\n\nJeffreys-Zellener-Siow Cauchy distribution summary.\n\\[\nr{JZS \\choose Cauchy} = 0.71\n\\]\nSample sizes"
  },
  {
    "objectID": "handsOn_ex4.1.html#samples-mean-test",
    "href": "handsOn_ex4.1.html#samples-mean-test",
    "title": "Visual Statistical Analysis",
    "section": "4.2 Samples’ Mean Test",
    "text": "4.2 Samples’ Mean Test\nA one sample test of means compares the mean of a sample to a pre-specified value and tests for a deviation from that value. For example we might know that the average birth weight for white babies in the US is 3,410 grams and wish to compare the average birth weight of a sample of black babies to this value.3\n\n4.2.1 Two-sample mean test with ggbetweenstats( ) function\nThe context of the violin plot below is to : !!!!!\n\nTo learn “MATHS” performance between ALL males and females students.\n\nrequire continuous variable for y-axis, and character variable for x-axis.\n\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nggbetweenstats( ) - ggstatsplot - to build a visual for 2-sample mean test of MATHS scores by GENDER.\n\ntype = “np” == “nonparametric”. Other values “parametric”, “robust”, “bayes”.\npairwise.display = “s” == “significant. Other values”non-significant” / “ns”, “all”.\nthe default arguments are :\n== TRUE\n\nresults.subtitle. To show plot subtitle, need to set this value to “FALSE”.\ncentrality.type == type == for median. Else, parametric for mean, robus for trimmed mean and bayes for MAP estimator.\n\n== FALSE\n\noutlier.tagging.\n\nothers\n\noutlier.color = “black”\n\n\n\n\n\n\nggbetweenstats(data = exam_data,\n               x = GENDER, \n               y = MATHS,\n               type = \"np\",\n               messages = FALSE,\n               pairwise.display = \"s\",\n               outlier.tagging = TRUE)\n\n\n\n\nRemarks :\nThe display info is subject to the “type” argument.\n“Default information: - statistical details - Bayes Factor - sample sizes - distribution summary”\n!!!!! to clarify the lecture note above with details when time permits.\n\n\n4.2.2 One-way ANOVA Test with ggbetweenstats( ) function\nOne-way ANalysis Of VAriance (ANOVA) is used to find the statistical differences among the means of 2 or more variables that consists at least 1 independent variable and 1 dependent variable.\nContext for the plot below is to visualise One-way ANOVA test on “MATHS” score by race.\n\nggbetweenstats(data = exam_data,\n               x = RACE, \n               y = MATHS,\n               type = \"p\",\n               mean.ci = TRUE, \n               pairwise.comparisons = TRUE, \n               pairwise.display = \"s\",\n               p.adjust.method = \"fdr\",\n               messages = FALSE,\n               outlier.tagging = TRUE)\n\n\n\n\nRemarks :\nThe input value for “pairwise.display” argument are :\n\n“ns” = only non-significant\n“s” = only significant\n“all” = everything\n\n\n4.2.3 Summary of Statistical Tests for ggbetweenstats ( ) function\nTables below summarised the type of test carried out based on the “type” argument and variables."
  },
  {
    "objectID": "handsOn_ex4.1.html#correlation-test",
    "href": "handsOn_ex4.1.html#correlation-test",
    "title": "Visual Statistical Analysis",
    "section": "4.3 Correlation Test",
    "text": "4.3 Correlation Test\n\n4.3.1 Significant Test of Correlation with ggscatterstats( ) function\nContext for the plot below is to visualise the Significant Test of Correlation between “MATHS” scores and “ENGLISH” scores.\n\n2 continuous variables.\n\n\nggscatterstats(data = exam_data,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = FALSE)"
  },
  {
    "objectID": "handsOn_ex4.1.html#association-test",
    "href": "handsOn_ex4.1.html#association-test",
    "title": "Visual Statistical Analysis",
    "section": "4.4 Association Test",
    "text": "4.4 Association Test\n\n4.4.1 Significant Test of Association (Dependence) with ggbarstats( ) function\nThere are 2 steps involved to visualise the Significant Test of Association for “MATHS” scores by “GENDER”.\n\n4.4.1.1 Bin “MATHS” value\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncut( ) - base - to divides “MATHS” value into 4 intervals and assigned them into 60, 75, 85, 100.\n\n\n\n\n\nShow the code\nexam1 <- exam_data %>% \n  mutate(MATHS_bins = cut(MATHS,\n                          breaks = c(0,60,75,85,100)))\n\n\n\n\n4.4.1.2 Visualise Association Strength\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nggbarstats( ) - ggstatsplot - to plot a categorical type (“GENDER”) bar chart with statistical details for “MATHS” value.\n\n\n\n\n\nShow the code\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "handsOn_ex4.2.html",
    "href": "handsOn_ex4.2.html",
    "title": "Visualising Models",
    "section": "",
    "text": "This study explores approaches to visualise model diagnostic and model parameters by using parameters package to :\n\nBuild a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "handsOn_ex4.2.html#load-r-packages",
    "href": "handsOn_ex4.2.html#load-r-packages",
    "title": "Visualising Models",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(readxl, performance, parameters, see, readr, ggstatsplot, tidyverse) \n\n\n\n\n\n\n\n⇳ Highlights of the R Packages :\n\n\n\n\n\nThere are 6 packages involved :\n\nbase\nstats\nperformance\nparameters\nsee\n\nseepackage is one of the collection of packages under easystats (an R framework for easy statistical modeling, visualisation and reporting) which is an extension of ggplot2 package.\nFor more see’s arguments and functions, click here.\n\nggstatsplot"
  },
  {
    "objectID": "handsOn_ex4.2.html#acquire-data-source",
    "href": "handsOn_ex4.2.html#acquire-data-source",
    "title": "Visualising Models",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Toyota Corolla dataset."
  },
  {
    "objectID": "handsOn_ex4.2.html#import-data",
    "href": "handsOn_ex4.2.html#import-data",
    "title": "Visualising Models",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attribute data\n\n\nShow the code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\",\n                      \"data\")\n\nproblems(car_resale)\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\n3.2.2 Identify variables’ type\n\n\nShow the code\nglimpse(car_resale, 70)\n\n\nRows: 1,436\nColumns: 38\n$ Id               <dbl> 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47,…\n$ Model            <chr> \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOY…\n$ Price            <dbl> 18950, 13500, 13750, 13950, 14950, 13750, 1…\n$ Age_08_04        <dbl> 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22,…\n$ Mfg_Month        <dbl> 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, …\n$ Mfg_Year         <dbl> 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2…\n$ KM               <dbl> 20019, 46986, 72937, 41711, 48000, 38500, 6…\n$ Quarterly_Tax    <dbl> 100, 210, 210, 210, 210, 210, 210, 210, 210…\n$ Weight           <dbl> 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1…\n$ Guarantee_Period <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ HP_Bin           <chr> \"100-120\", \"< 100\", \"< 100\", \"< 100\", \"< 10…\n$ CC_bin           <chr> \"1600\", \">1600\", \">1600\", \">1600\", \">1600\",…\n$ Doors            <dbl> 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5…\n$ Gears            <dbl> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ Cylinders        <dbl> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4…\n$ Fuel_Type        <chr> \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            <chr> \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", …\n$ Met_Color        <dbl> 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1…\n$ Automatic        <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Mfr_Guarantee    <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1…\n$ BOVAG_Guarantee  <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ ABS              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Airbag_1         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Airbag_2         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Airco            <dbl> 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Automatic_airco  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ Boardcomputer    <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ CD_Player        <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1…\n$ Central_Lock     <dbl> 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Powered_Windows  <dbl> 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Power_Steering   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Radio            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Mistlamps        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Sport_Model      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1…\n$ Backseat_Divider <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Metallic_Rim     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Radio_cassette   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Tow_Bar          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nRemarks :\nThe type of key variables ( Price, Age_08_04, Mfg_Year, KM, Weight, Guarantee_Period ) are dbl type."
  },
  {
    "objectID": "handsOn_ex4.2.html#calibrate-multiple-regression-model-with-lm-function",
    "href": "handsOn_ex4.2.html#calibrate-multiple-regression-model-with-lm-function",
    "title": "Visualising Models",
    "section": "4.1 Calibrate Multiple Regression Model with lm( ) function",
    "text": "4.1 Calibrate Multiple Regression Model with lm( ) function\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nlm( ) - stats - to calibrate a multiple linear regression model.\n\nResponse variable, i.e. “Price” as the value for “formula” argument.\nPredictor variables consists of Age_08_04, Mfg_Year, KM, Weight, Guarantee_Period.\n\n\n\n\n\nmodel <- lm(Price ~ Age_08_04 + \n              Mfg_Year + \n              KM + \n              Weight + \n              Guarantee_Period, \n            data = car_resale)\n\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\nRemarks :\nFrom the output below, noticed the amount of details revealed with the summary() function is more comprehensible than the output above.\nResiduals are the difference between the actual observed prices and the prices the model predicted. Based on the 5 summary points, the distribution of residuals is not strongly symmetrical. This can be interpreted as certain points predicted by this model being off from the actual observed points.1 Further visual plots will be required to verify the normal distribution.\nCoefficient represents the intercept and slope for a linear model.\nThe Estimate column consists of intercept (first row) and the rest as the factors. The intercept value -$2.637e+06 is the expected price considering the average of each predictor. For example, for every KM increase, the price will drop further at the rate of -$2.323e-02. However, the Standard Error indicates that the price reduction rate can vary up to $1.163e-03. This Standard Error value can also use to compute the Confidence Intervals and Statistical Test when hypotheses the relationship between “KM” and “Price”.\nThe T value, a measurement of how many standard deviations away from 0, suggests whether the null hypothesis should be rejected. KM with T value of -$19.969, which is greater than the standard error, and 0 means a relationship exists between KM and Price, and the null hypothesis can be rejected. This rejection can be further justified by the small Pr(>|t|) value and the 3 asterisks next to the p-value.\nResidual Standard Error measures the quality of a linear regression fit. It is an average value that the price can deviate from the true regression line. For example, given the mean price based on the predictors involved is -$2.637e+06 and the Residual Standard Error is $1,366, the percentage error based on 1,430 degrees of freedom is -0.0518%.\n1,430 degrees of freedom refers to 1430 data points that went into estimating the parameters used. Meaning removed 6 parameters (5 variables and an intercept) from the 1436 observation points.\nR-squared statistic measures how well the model fits with actual data. Given the Multiple R-squared is 0.8586, that means 85.86% of the price variance can be explained by the predictor variables. However, this value will increase when more predictor variables are added to the model. Hence, the adjusted R-squared value will be considered instead.\nF-statistic, an indicator of the relationship between predictors and response variables, is 1,737 on 5, which is greater than 1,430 degrees of freedom. Hence, this is sufficient to reject the null hypothesis (H0 : There is no relationship between price and predictor).\n\nF-statistic should ideally befurther from 1.\nHow much larger F-statistics depend on the number of data points and predictors. Generally, for large datasets, it is sufficient to reject so long the F-statistics > 1.\n\n\nsummary(model)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10426.3   -737.3     -6.4    739.1   6591.4 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      -2.637e+06  2.618e+05 -10.072   <2e-16 ***\nAge_08_04        -1.409e+01  1.081e+01  -1.304   0.1924    \nMfg_Year          1.315e+03  1.307e+02  10.064   <2e-16 ***\nKM               -2.323e-02  1.163e-03 -19.969   <2e-16 ***\nWeight            1.903e+01  8.129e-01  23.405   <2e-16 ***\nGuarantee_Period  2.770e+01  1.219e+01   2.272   0.0232 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1366 on 1430 degrees of freedom\nMultiple R-squared:  0.8586,    Adjusted R-squared:  0.8581 \nF-statistic:  1737 on 5 and 1430 DF,  p-value: < 2.2e-16\n\n\nRemarks :\nTo optimise a model, can try with the following code chunk -\nmodel2 <- lm( log(price) ~ c(predictors), data = car_resale)"
  },
  {
    "objectID": "handsOn_ex4.2.html#model-diagnostic",
    "href": "handsOn_ex4.2.html#model-diagnostic",
    "title": "Visualising Models",
    "section": "4.2 Model Diagnostic",
    "text": "4.2 Model Diagnostic\n\n4.2.1 Check Multicollinearity\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncheck_collinearity( ) - performance - to checks regression model for multicollinearity based on the variance inflation factor (VIF).\n\n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\n\n4.2.2 Visualise VIF Distribution\n\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n\n\n\n\n\n\n4.2.3 Check Normality Assumption\nThere are 3 steps involved to visualise the normality assumption check.\n\n4.2.3.1 Trim model\n“Mfg_Year” variable is removed from this new model due to its high VIF value.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n             data = car_resale)\n\n\n\n4.2.3.2 Check Normality Assumption\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncheck_normality( ) - performance - to checks regression model for normality of residuals.\n\n\n\n\ncheck_n <- check_normality(model1)\n\n\n\n4.2.3.3 Visualise the Assumption Check\n\nplot(check_n)\n\n\n\n\n\n\n\n4.2.4 Check Homogeneity of Variances\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncheck_heteroscedasticity( ) - performance - to check for the residual constant variance of the regression model.\n\n\n\n\ncheck_h <- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n4.2.5 Model Diagnostic at One Go\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncheck_model( ) - performance - to visual check of model various assumptions (normality of residuals, multicollinearity, normality of random effects, heteroscedasticity, homogeneity of variance).\n\n\n\n\ncheck_model(model1, \n            panel = TRUE,\n            check = \"all\")"
  },
  {
    "objectID": "handsOn_ex4.2.html#visualise-with-see-parameters-packages",
    "href": "handsOn_ex4.2.html#visualise-with-see-parameters-packages",
    "title": "Visualising Models",
    "section": "5.1 Visualise with see & parameters packages",
    "text": "5.1 Visualise with see & parameters packages\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nparameters( ) - parameters - to converts summaries of regression model object into data frames.\nplot( ) - see - to create dot-and-whisker plot when passed with parameters class object, model1.\n\n\n\n\n\nShow the code\nplot(parameters(model1))"
  },
  {
    "objectID": "handsOn_ex4.2.html#visualise-with-ggcoefstats-function",
    "href": "handsOn_ex4.2.html#visualise-with-ggcoefstats-function",
    "title": "Visualising Models",
    "section": "5.2 Visualise with ggcoefstats( ) function",
    "text": "5.2 Visualise with ggcoefstats( ) function\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nggcoefstats( ) - ggstatsplot - to visualise the parameters coefficient of the regression model with model summary as a caption.\n\n\n\n\n\nShow the code\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "handsOn_ex4.3.html",
    "href": "handsOn_ex4.3.html",
    "title": "Visualising Uncertainty",
    "section": "",
    "text": "This study explores approaches to visualise uncertainty of point estimates.\n\na point estimates is a reference point that can be defined by mean or other statistical parameter.\nuncertainty is expressed as standard error, confidence interval or credible interval."
  },
  {
    "objectID": "handsOn_ex4.3.html#load-r-packages",
    "href": "handsOn_ex4.3.html#load-r-packages",
    "title": "Visualising Uncertainty",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate, knitr, kableExtra, infer) \n\n\n\n\n\n\n\n⇳ Highlights of the R Packages :\n\n\n\n\n\n\ncrosstalk\nDT\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\n\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(\"freq-uncertainty-vis\"));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\ngganimate\nplotly"
  },
  {
    "objectID": "handsOn_ex4.3.html#acquire-data-source",
    "href": "handsOn_ex4.3.html#acquire-data-source",
    "title": "Visualising Uncertainty",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Toyota Corolla dataset."
  },
  {
    "objectID": "handsOn_ex4.3.html#import-data",
    "href": "handsOn_ex4.3.html#import-data",
    "title": "Visualising Uncertainty",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attribute data\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Identify variables’ type\n\n\nShow the code\nglimpse(exam_data, 70)\n\n\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student22…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\"…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", …\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Ma…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, …\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 3…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, …"
  },
  {
    "objectID": "handsOn_ex4.3.html#visualise-with-ggplot2-package",
    "href": "handsOn_ex4.3.html#visualise-with-ggplot2-package",
    "title": "Visualising Uncertainty",
    "section": "4.1 Visualise with ggplot2 package",
    "text": "4.1 Visualise with ggplot2 package\nThere are 2 steps involved.\n\n4.1.1 Compute statistical variables\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ngroup_by( ) - dplyr - to group “RACE”.\nsummarise( ) - dplyr - to compute the count of observations (n), mean, standard deviation (sd).\nmutate( ) - dplyr - to derive standard error (se) based on the variables computed in the summarise step.\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(n = n(),\n            mean = mean(MATHS),\n            sd = sd(MATHS)) %>%\n  mutate(se = sd/sqrt(n-1))\n\nglimpse(my_sum)\n\nRows: 4\nColumns: 5\n$ RACE <chr> \"Chinese\", \"Indian\", \"Malay\", \"Others\"\n$ n    <int> 193, 12, 108, 9\n$ mean <dbl> 76.50777, 60.66667, 57.44444, 69.66667\n$ sd   <dbl> 15.69040, 23.35237, 21.13478, 10.72381\n$ se   <dbl> 1.132357, 7.041005, 2.043177, 3.791438\n\n\nRemarks :\nTabulate the tibble data table with functions from knitr and kableExtra packages.\n\nkable(head(my_sum),\n      format = 'html') %>%\n  kable_styling(font_size = 12,\n                full_width = FALSE,\n                position = \"left\") %>%\n  column_spec(1, border_right = T)\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\n\n4.1.2 Visualise Standard Error of Mean\n\nggplot(my_sum) +\n  geom_errorbar(aes(x = RACE,\n                    ymin = mean - se, \n                    ymax = mean + se),\n                width = 0.2, \n                colour = \"black\", \n                alpha = 0.9, \n                size = 0.5) +\n  geom_point(aes(x = RACE,\n                 y = mean),\n             stat = \"identity\", \n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\ned_groupRace <- exam_data %>%\n  group_by(RACE) \n\ned <- Rmisc::summarySE(ed_groupRace, measurevar = \"MATHS\", groupvars = \"RACE\" ) %>%\n  mutate(mean = mean(MATHS)) \n\nglimpse(ed)\n\nRows: 4\nColumns: 7\n$ RACE  <chr> \"Chinese\", \"Indian\", \"Malay\", \"Others\"\n$ N     <dbl> 193, 12, 108, 9\n$ MATHS <dbl> 76.50777, 60.66667, 57.44444, 69.66667\n$ sd    <dbl> 15.69040, 23.35237, 21.13478, 10.72381\n$ se    <dbl> 1.129420, 6.741249, 2.033696, 3.574602\n$ ci    <dbl> 2.227664, 14.837390, 4.031564, 8.243046\n$ mean  <dbl> 66.07139, 66.07139, 66.07139, 66.07139\n\n\nRemarks :\nThe stats values that derived are different.\n\n4.1.2.1 Compute Lower and Upper CI\n\ned <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(n = n(),\n            mean = mean(MATHS),\n            sd = sd(MATHS)) %>%\n  mutate(se = sd/sqrt(n-1),\n         low_ci = mean - qt(1 - (0.05 / 2), n-1)*se,\n         upp_ci = mean + qt(1 - (0.05 / 2), n-1)*se)\n\nglimpse(ed)\n\nRows: 4\nColumns: 7\n$ RACE   <chr> \"Chinese\", \"Indian\", \"Malay\", \"Others\"\n$ n      <int> 193, 12, 108, 9\n$ mean   <dbl> 76.50777, 60.66667, 57.44444, 69.66667\n$ sd     <dbl> 15.69040, 23.35237, 21.13478, 10.72381\n$ se     <dbl> 1.132357, 7.041005, 2.043177, 3.791438\n$ low_ci <dbl> 74.27431, 45.16952, 53.39408, 60.92360\n$ upp_ci <dbl> 78.74123, 76.16382, 61.49480, 78.40974\n\n\n\n\n4.1.2.2 Plot with Mean in Descending Order\n\ned$race_seq = with(ed, reorder(RACE, desc(mean))) \n\nggplot(ed) +\n  geom_errorbar(aes(x = race_seq,\n                    ymin = low_ci, \n                    ymax = upp_ci),\n                width = 0.2, \n                colour = \"black\", \n                alpha = 0.9, \n                size = 0.5) +\n  geom_point(aes(x = race_seq,\n                 y = mean),\n             stat = \"identity\", \n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  ggtitle(\"Standard error of mean maths score by rac\") + \n  ylim (45, 80)\n\n\n\n\n\n\n\n4.1.3 Visualise Distribution of Confidence Intervals\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstat_pointinterval( ) - ggdist - to visualise the distribution of maths score by race.\n\n\n\n\n\nShow the code\nexam_data %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(title = \"Visualising confidence intervals of mean math score\",\n       subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\nRemarks :\n!!!!! from Prof - Gentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n!!!!! How to makeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\nShow the code\nexam_data %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n                     .point = median,\n                     .interval = qi) +\n  labs(title = \"Visualising confidence intervals of mean math score\",\n       subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\nShow the code\nexam_data %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(show.legend = FALSE) +   \n  labs(title = \"Visualising confidence intervals of mean math score\",\n       subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n4.1.3.1 Add gradient to the plot\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstat_pointinterval( ) - ggdist - to visualise the distribution of maths score by race.\n\n\n\n\n\nShow the code\nexam_data %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n4.1.4 Visualise Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n4.1.4.1 Install ungeviz package\n\n\nShow the code\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\nShow the code\nlibrary(ungeviz)\n\n\n\n\n4.1.4.2 Plot VCHOPs\n\n\nShow the code\nggplot(data = exam_data,\n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(height = 0.3, \n                                        width = 0.05),\n             size = 0.4, \n             color = \"#0072B2\", \n             alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "handsOn_ex4.4.html",
    "href": "handsOn_ex4.4.html",
    "title": "Build Funnel Plot",
    "section": "",
    "text": "This study explores approaches to visualise funnel plot.\n\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "handsOn_ex4.4.html#load-r-packages",
    "href": "handsOn_ex4.4.html#load-r-packages",
    "title": "Build Funnel Plot",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "handsOn_ex4.4.html#acquire-data-source",
    "href": "handsOn_ex4.4.html#acquire-data-source",
    "title": "Build Funnel Plot",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Toyota Corolla dataset."
  },
  {
    "objectID": "handsOn_ex4.4.html#import-data",
    "href": "handsOn_ex4.4.html#import-data",
    "title": "Build Funnel Plot",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attribute data\n\n\nShow the code\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>%\n  mutate_if(is.character, \n            as.factor)\n\nproblems(covid19)\n\n\n\n\n3.2.2 Identify variables’ type\n\n\nShow the code\nglimpse(covid19, 70)\n\n\nRows: 267\nColumns: 7\n$ `Sub-district ID` <dbl> 3172051003, 3173041007, 3175041005, 317503…\n$ City              <fct> JAKARTA UTARA, JAKARTA BARAT, JAKARTA TIMU…\n$ District          <fct> PADEMANGAN, TAMBORA, KRAMAT JATI, JATINEGA…\n$ `Sub-district`    <fct> ANCOL, ANGKE, BALE KAMBANG, BALI MESTER, B…\n$ Positive          <dbl> 1776, 1783, 2049, 827, 2866, 1828, 2541, 3…\n$ Recovered         <dbl> 1691, 1720, 1964, 797, 2792, 1757, 2433, 3…\n$ Death             <dbl> 26, 29, 31, 13, 27, 26, 37, 68, 38, 52, 72…"
  },
  {
    "objectID": "handsOn_ex4.4.html#funnelplotr-methods",
    "href": "handsOn_ex4.4.html#funnelplotr-methods",
    "title": "Build Funnel Plot",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nFunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is \"SR\".\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\nFunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #<<\n  xrange = c(0, 6500),  #<<\n  yrange = c(0, 0.05)   #<<\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default \"SR\" to \"PR\" (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\nFunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #<<           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #<<\n  y_label = \"Cumulative Fatality Rate\"  #<<\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "handsOn_ex4.4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "handsOn_ex4.4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Build Funnel Plot",
    "section": "Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\nComputing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\n\nShow the code\ndf <- covid19 %>%\n  mutate(rate = Death / Positive) %>%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%\n  filter(rate > 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\n\nShow the code\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nShow the code\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, number.ul999, number.seq, fit.mean)\n\n\nPlotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nShow the code\np <- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\nInteractive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nShow the code\nfp_ggplotly <- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "handsOn_ex4.4.html#references",
    "href": "handsOn_ex4.4.html#references",
    "title": "Build Funnel Plot",
    "section": "References",
    "text": "References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "handsOn_ex5.1.html",
    "href": "handsOn_ex5.1.html",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "",
    "text": "This study explores various approaches to building ternary plots programmatically using R for visualising and analysing population structure of Singapore.\nTernary plot1, also known as a ternary graph, triangle plot, simplex plot, Gibbs triangle, de Finetti diagram, is a way to display or analyse the distribution of compositional data in a 3-dimensional case.\nEach side is scaled from 0 to 1, representing one of the three components. A point is plotted based on the intersection between the perpendicular lines from the sides.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 3 main focuses :\n\nDerive three new measures using mutate( ) function of dplyr package.\nBuild a static ternary plot using ggtern( ) function of ggtern package.\nBuild an interactive ternary plot using plot-ly( ) function of plotly package."
  },
  {
    "objectID": "handsOn_ex5.1.html#load-r-packages",
    "href": "handsOn_ex5.1.html#load-r-packages",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggtern, plotly, tidyverse)\n\n\n\n\n\n\n\nR packages highlights :\n\n\n\n\n\n\nggtern, a ggplot extension package specially designed to plot ternary diagrams.\nplotly, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js ."
  },
  {
    "objectID": "handsOn_ex5.1.html#acquire-data-source",
    "href": "handsOn_ex5.1.html#acquire-data-source",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018.\n\nThe name of this data set in CSV format is respopagsex2000to2018_tidy.csv/"
  },
  {
    "objectID": "handsOn_ex5.1.html#import-data",
    "href": "handsOn_ex5.1.html#import-data",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nproblems(pop_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "handsOn_ex5.1.html#create-static-ternary-diagram",
    "href": "handsOn_ex5.1.html#create-static-ternary-diagram",
    "title": "Building Ternary Plot with R",
    "section": "4.1 Create static ternary diagram",
    "text": "4.1 Create static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n\nShow the code\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point()\n\n\n\n\n\n\n\nShow the code\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\nRemarks :\nggtern is an extension.\nplot_ly( ) is not able to port ggtern chart into ggplot2. A native function will be required to do so."
  },
  {
    "objectID": "handsOn_ex5.1.html#plotting-an-interative-ternary-diagram",
    "href": "handsOn_ex5.1.html#plotting-an-interative-ternary-diagram",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "Plotting an interative ternary diagram",
    "text": "Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n\nShow the code\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "handsOn_ex5.2.html",
    "href": "handsOn_ex5.2.html",
    "title": "Visualising Correlation Matrices",
    "section": "",
    "text": "This study explores various approaches to visualise correlation matrices with large dataset.\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 4 main focuses :"
  },
  {
    "objectID": "handsOn_ex5.2.html#load-r-packages",
    "href": "handsOn_ex5.2.html#load-r-packages",
    "title": "Visualising Correlation Matrices",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(corrplot, tidyverse, ggstatsplot)\n\n\n\n\n\n\n\nUsage of R Packages :"
  },
  {
    "objectID": "handsOn_ex5.2.html#acquire-data-source",
    "href": "handsOn_ex5.2.html#acquire-data-source",
    "title": "Visualising Correlation Matrices",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Wine Quality Data Set of UCI Machine Learning Repository.\n\nThe data set consists of 13 variables and 6497 observations.\nThe red wine and white wine data are combined into one data file, named wine_quality."
  },
  {
    "objectID": "handsOn_ex5.2.html#import-data",
    "href": "handsOn_ex5.2.html#import-data",
    "title": "Visualising Correlation Matrices",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nproblems(wine)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\nShow the code\nglimpse(wine, 70)\n\n\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        <dbl> 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7…\n$ `volatile acidity`     <dbl> 0.700, 0.880, 0.760, 0.280, 0.700, 0.…\n$ `citric acid`          <dbl> 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0…\n$ `residual sugar`       <dbl> 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.…\n$ chlorides              <dbl> 0.076, 0.098, 0.092, 0.075, 0.076, 0.…\n$ `free sulfur dioxide`  <dbl> 11, 25, 15, 17, 11, 13, 15, 15, 9, 17…\n$ `total sulfur dioxide` <dbl> 34, 67, 54, 60, 34, 40, 59, 21, 18, 1…\n$ density                <dbl> 0.9978, 0.9968, 0.9970, 0.9980, 0.997…\n$ pH                     <dbl> 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3…\n$ sulphates              <dbl> 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0…\n$ alcohol                <dbl> 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10…\n$ quality                <dbl> 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5…\n$ type                   <chr> \"red\", \"red\", \"red\", \"red\", \"red\", \"r…\n\n\nRemarks :\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "handsOn_ex5.2.html#with-pairs-method",
    "href": "handsOn_ex5.2.html#with-pairs-method",
    "title": "Visualising Correlation Matrices",
    "section": "4.1 with pairs( ) method",
    "text": "4.1 with pairs( ) method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction."
  },
  {
    "objectID": "handsOn_ex5.2.html#building-a-basic-correlation-matrix",
    "href": "handsOn_ex5.2.html#building-a-basic-correlation-matrix",
    "title": "Visualising Correlation Matrices",
    "section": "Building a basic correlation matrix",
    "text": "Building a basic correlation matrix\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\npairs( ) - graphics - to read CSV file into a tibble.\n\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\nShow the code\npairs(wine[,1:11])\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npairs(wine[,2:12])\n\n\n\n\n\nDrawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\nShow the code\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\nShow the code\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\nIncluding with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\n\nShow the code\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "handsOn_ex5.2.html#the-basic-plot",
    "href": "handsOn_ex5.2.html#the-basic-plot",
    "title": "Visualising Correlation Matrices",
    "section": "The basic plot",
    "text": "The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\nShow the code\nggcorrmat(data = wine,\n          cor.vars = 1:11)\n\n\n\n\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\nShow the code\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "handsOn_ex5.2.html#building-multiple-plots",
    "href": "handsOn_ex5.2.html#building-multiple-plots",
    "title": "Visualising Correlation Matrices",
    "section": "Building multiple plots",
    "text": "Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\n\nShow the code\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "handsOn_ex5.2.html#getting-started-with-corrplot",
    "href": "handsOn_ex5.2.html#getting-started-with-corrplot",
    "title": "Visualising Correlation Matrices",
    "section": "Getting started with corrplot",
    "text": "Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\n\nShow the code\nwine.cor <- cor(wine[, 1:11])\n\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor)\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "handsOn_ex5.2.html#working-with-visual-geometrics",
    "href": "handsOn_ex5.2.html#working-with-visual-geometrics",
    "title": "Visualising Correlation Matrices",
    "section": "Working with visual geometrics",
    "text": "Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics."
  },
  {
    "objectID": "handsOn_ex5.2.html#working-with-layout",
    "href": "handsOn_ex5.2.html#working-with-layout",
    "title": "Visualising Correlation Matrices",
    "section": "Working with layout",
    "text": "Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them."
  },
  {
    "objectID": "handsOn_ex5.2.html#working-with-mixed-layout",
    "href": "handsOn_ex5.2.html#working-with-mixed-layout",
    "title": "Visualising Correlation Matrices",
    "section": "Working with mixed layout",
    "text": "Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "handsOn_ex5.2.html#combining-corrgram-with-the-significant-test",
    "href": "handsOn_ex5.2.html#combining-corrgram-with-the-significant-test",
    "title": "Visualising Correlation Matrices",
    "section": "Combining corrgram with the significant test",
    "text": "Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\n\nShow the code\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nShow the code\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "handsOn_ex5.2.html#reorder-a-corrgram",
    "href": "handsOn_ex5.2.html#reorder-a-corrgram",
    "title": "Visualising Correlation Matrices",
    "section": "Reorder a corrgram",
    "text": "Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nShow the code\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\nReordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\nShow the code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "handsOn_ex5.2.html#r-packages",
    "href": "handsOn_ex5.2.html#r-packages",
    "title": "Visualising Correlation Matrices",
    "section": "R packages",
    "text": "R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "handsOn_ex5.3.html",
    "href": "handsOn_ex5.3.html",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "",
    "text": "This study explores various approaches to make data visualisation interactive.\nHeatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 4 main focuses :"
  },
  {
    "objectID": "handsOn_ex5.3.html#load-r-packages",
    "href": "handsOn_ex5.3.html#load-r-packages",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n\n\n\n\nUsage of R Packages :"
  },
  {
    "objectID": "handsOn_ex5.3.html#acquire-data-source",
    "href": "handsOn_ex5.3.html#acquire-data-source",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv."
  },
  {
    "objectID": "handsOn_ex5.3.html#import-data",
    "href": "handsOn_ex5.3.html#import-data",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRemarks :\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\n\n\nShow the code\nrow.names(wh) <- wh$Country\n\n\nNotice that the row number has been replaced into the country name."
  },
  {
    "objectID": "handsOn_ex5.3.html#transforming-the-data-frame-into-a-matrix",
    "href": "handsOn_ex5.3.html#transforming-the-data-frame-into-a-matrix",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "Transforming the data frame into a matrix",
    "text": "Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\n\nShow the code\nwh1 <- dplyr::select(wh, \n                     c(3, 7:12))\n\nwh_matrix <- data.matrix(wh)\n\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "handsOn_ex5.3.html#heatmap-of-r-stats",
    "href": "handsOn_ex5.3.html#heatmap-of-r-stats",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "heatmap() of R Stats",
    "text": "heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv = NA, \n                      Colv = NA)\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix)\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "handsOn_ex5.3.html#working-with-heatmaply",
    "href": "handsOn_ex5.3.html#working-with-heatmaply",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "Working with heatmaply",
    "text": "Working with heatmaply\n\n\nShow the code\nheatmaply(mtcars)\n\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "handsOn_ex5.3.html#data-trasformation",
    "href": "handsOn_ex5.3.html#data-trasformation",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "Data trasformation",
    "text": "Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nShow the code\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "handsOn_ex5.3.html#clustering-algorithm",
    "href": "handsOn_ex5.3.html#clustering-algorithm",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "Clustering algorithm",
    "text": "Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nStatistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nShow the code\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nShow the code\nwh_clust <- hclust(wh_d, method = \"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "handsOn_ex5.3.html#seriation",
    "href": "handsOn_ex5.3.html#seriation",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "5.4 Seriation",
    "text": "5.4 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "handsOn_ex5.3.html#working-with-colour-palettes",
    "href": "handsOn_ex5.3.html#working-with-colour-palettes",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "Working with colour palettes",
    "text": "Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "handsOn_ex5.3.html#the-finishing-touch",
    "href": "handsOn_ex5.3.html#the-finishing-touch",
    "title": "Building Heatmap to Visually Analyse Multivariate Data",
    "section": "The finishing touch",
    "text": "The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "handsOn_ex5.4.html",
    "href": "handsOn_ex5.4.html",
    "title": "Create Parallel Coordinates Plot",
    "section": "",
    "text": "This study explores various approaches to make data visualisation interactive.\nParallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\n\n\n\n\n\n\n⇳ Scope of this study :\n\n\n\n\n\nFollowing are the 3 main focuses :\n\nCreate statistic parallel coordinates plots with ggparcoord( ) of GGally package.\nCreate interactive parallel coordinates plots with parcoords package.\nCreate interactive parallel coordinates plots with parallelPlot package."
  },
  {
    "objectID": "handsOn_ex5.4.html#load-r-packages",
    "href": "handsOn_ex5.4.html#load-r-packages",
    "title": "Create Parallel Coordinates Plot",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\n\n\n\nUsage of R Packages :"
  },
  {
    "objectID": "handsOn_ex5.4.html#acquire-data-source",
    "href": "handsOn_ex5.4.html#acquire-data-source",
    "title": "Create Parallel Coordinates Plot",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv."
  },
  {
    "objectID": "handsOn_ex5.4.html#import-data",
    "href": "handsOn_ex5.4.html#import-data",
    "title": "Create Parallel Coordinates Plot",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attribute Data\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read CSV file name WHData-2018.csv into a tibble data frame object called wh.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "handsOn_ex5.4.html#plotting-a-simple-parallel-coordinates",
    "href": "handsOn_ex5.4.html#plotting-a-simple-parallel-coordinates",
    "title": "Create Parallel Coordinates Plot",
    "section": "Plotting a simple parallel coordinates",
    "text": "Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "handsOn_ex5.4.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "handsOn_ex5.4.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Create Parallel Coordinates Plot",
    "section": "Plotting a parallel coordinates with boxplot",
    "text": "Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "handsOn_ex5.4.html#parallel-coordinates-with-facet",
    "href": "handsOn_ex5.4.html#parallel-coordinates-with-facet",
    "title": "Create Parallel Coordinates Plot",
    "section": "Parallel coordinates with facet",
    "text": "Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "handsOn_ex5.4.html#rotating-x-axis-text-label",
    "href": "handsOn_ex5.4.html#rotating-x-axis-text-label",
    "title": "Create Parallel Coordinates Plot",
    "section": "Rotating x-axis text label",
    "text": "Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "handsOn_ex5.4.html#adjusting-the-rotated-x-axis-text-label",
    "href": "handsOn_ex5.4.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Create Parallel Coordinates Plot",
    "section": "Adjusting the rotated x-axis text label",
    "text": "Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "handsOn_ex5.4.html#the-basic-plot",
    "href": "handsOn_ex5.4.html#the-basic-plot",
    "title": "Create Parallel Coordinates Plot",
    "section": "The basic plot",
    "text": "The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\n\nShow the code\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step."
  },
  {
    "objectID": "handsOn_ex5.4.html#rotate-axis-label",
    "href": "handsOn_ex5.4.html#rotate-axis-label",
    "title": "Create Parallel Coordinates Plot",
    "section": "Rotate axis label",
    "text": "Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "handsOn_ex5.4.html#changing-the-colour-scheme",
    "href": "handsOn_ex5.4.html#changing-the-colour-scheme",
    "title": "Create Parallel Coordinates Plot",
    "section": "Changing the colour scheme",
    "text": "Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\n\nShow the code\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "handsOn_ex5.4.html#parallel-coordinates-plot-with-histogram",
    "href": "handsOn_ex5.4.html#parallel-coordinates-plot-with-histogram",
    "title": "Create Parallel Coordinates Plot",
    "section": "Parallel coordinates plot with histogram",
    "text": "Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\n\nShow the code\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "inClass/inClass_ex03/inClass_ex3.html",
    "href": "inClass/inClass_ex03/inClass_ex3.html",
    "title": "Ex[3] - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this exercise, learn how to create :\n\ninteractive data visualisation by using ggiraph and plotlyr packages,\nanimated data visualisation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\nreshape data by using tidyr package.\nprocess, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "inClass/inClass_ex03/inClass_ex3.html#load-r-packages",
    "href": "inClass/inClass_ex03/inClass_ex3.html#load-r-packages",
    "title": "Ex[3] - Programming Interactive Data Visualisation with R",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\n\n\npacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork, gapminder, rPackedBar) \n\n\n\n\n\n\n\n\n\n\nUsage of R Packages :\n\n\n\n\n\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots."
  },
  {
    "objectID": "inClass/inClass_ex03/inClass_ex3.html#acquire-data-source",
    "href": "inClass/inClass_ex03/inClass_ex3.html#acquire-data-source",
    "title": "Ex[3] - Programming Interactive Data Visualisation with R",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson."
  },
  {
    "objectID": "inClass/inClass_ex03/inClass_ex3.html#import-data",
    "href": "inClass/inClass_ex03/inClass_ex3.html#import-data",
    "title": "Ex[3] - Programming Interactive Data Visualisation with R",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data\n\n\n\n\n\n\nInvolved two (2) steps : import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "inClass/inClass_ex03/inClass_ex3.html#tooltip",
    "href": "inClass/inClass_ex03/inClass_ex3.html#tooltip",
    "title": "Ex[3] - Programming Interactive Data Visualisation with R",
    "section": "4.1 Tooltip",
    "text": "4.1 Tooltip\n\n\n\n\n\n\n4.1.1 Create ggplot Object\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_dotplot_interactive( ) - ggplot2 - to plot interactive dot chart.\n\n\n\n\n\nShow the code\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(aes(tooltip = ID),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n4.1.2 create interactive svg Object\n\n\nShow the code\ngirafe(ggobj = p,\n       width_svg = 6,\n       height_svg = 6*0.618)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#load-r-packages",
    "href": "inClass/inClass_ex04/inClass_ex4.html#load-r-packages",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.2.1 Load R Packages",
    "text": "1.2.1 Load R Packages\n\npacman::p_load(plotly, crosstalk, DT, patchwork, tidyverse, ggstatsplot, ggdist)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#acquire-data-source",
    "href": "inClass/inClass_ex04/inClass_ex4.html#acquire-data-source",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.3.1 Acquire Data Source",
    "text": "1.3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson."
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#import-data",
    "href": "inClass/inClass_ex04/inClass_ex4.html#import-data",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.3.2 Import Data",
    "text": "1.3.2 Import Data\nInvolved two (2) steps : import and inspect imported data set.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#create-with-plotly-function",
    "href": "inClass/inClass_ex04/inClass_ex4.html#create-with-plotly-function",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.4.1 Create with plotly( ) function",
    "text": "1.4.1 Create with plotly( ) function\n\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE) %>%\n  layout(title = \"Exam result for English and Maths\", \n         plot_bgcolor = \"#e5ecf6\",\n         xaxis = list(title = \"English Exam Result\"),\n         yaxis = list(title = \"Maths Exam Result\"),\n         legend = list(title = list(text = \"<b>Students' Race </b>\")))"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#create-with-ggplot-function",
    "href": "inClass/inClass_ex04/inClass_ex4.html#create-with-ggplot-function",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.4.2 Create with ggplot( ) function",
    "text": "1.4.2 Create with ggplot( ) function\n\n\nShow the code\np <- ggplot(exam_data, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\nRemarks :\nTo have more control of aesthetic interactive aspects, plot in plotly , compare to using ggplotly as the wrapper.\n\n\nShow the code\nggplot(exam_data, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#include-stats-into-violins-chart",
    "href": "inClass/inClass_ex04/inClass_ex4.html#include-stats-into-violins-chart",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "1.5.1 Include Stats into Violins Chart",
    "text": "1.5.1 Include Stats into Violins Chart\n\nggbetweenstats(data = exam_data,\n               x = GENDER, \n               y = MATHS,\n               type = \"p\",\n               messages = FALSE,\n               pairwise.display = \"s\",\n               outlier.tagging = TRUE)\n\n\n\n\nRemarks :\np = Welsch Test, include Bayesian stats\nnp = WMann-Whitney Test, does not include Bayesian stats.\n\nggscatterstats(data = exam_data,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = TRUE)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#load-r-packages-1",
    "href": "inClass/inClass_ex04/inClass_ex4.html#load-r-packages-1",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.2.1 Load R Packages",
    "text": "2.2.1 Load R Packages\n\npacman::p_load(readxl, performance, parameters, see, readr, ggstatsplot)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#acquire-data-source-1",
    "href": "inClass/inClass_ex04/inClass_ex4.html#acquire-data-source-1",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.3.1 Acquire Data Source",
    "text": "2.3.1 Acquire Data Source\nThis study will be based on ToyotaCorlla data set provided with this lesson."
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#import-data-1",
    "href": "inClass/inClass_ex04/inClass_ex4.html#import-data-1",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.3.2 Import Data",
    "text": "2.3.2 Import Data\nInvolved two (2) steps : import and inspect imported data set.\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\",\n                      \"data\")\n\nproblems(car_resale)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#create-with-plotly-function-1",
    "href": "inClass/inClass_ex04/inClass_ex4.html#create-with-plotly-function-1",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.4.1 Create with plotly( ) function",
    "text": "2.4.1 Create with plotly( ) function\n\n\nShow the code\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#check-multicollinearity",
    "href": "inClass/inClass_ex04/inClass_ex4.html#check-multicollinearity",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.4.2 Check multicollinearity",
    "text": "2.4.2 Check multicollinearity\n\n\nShow the code\ncheck_c <- check_collinearity(model)\n\nplot(check_c)"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#trim-away-high-correlation-variable",
    "href": "inClass/inClass_ex04/inClass_ex4.html#trim-away-high-correlation-variable",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.4.3 Trim Away High Correlation Variable",
    "text": "2.4.3 Trim Away High Correlation Variable\n\n\nShow the code\nmodel1 <- lm(Price ~ \n               Age_08_04 + \n               KM + \n               Weight + \n               Guarantee_Period, \n            data = car_resale)\n\n\n\n\nShow the code\ngtsummary::tbl_regression(model1, \n               intercept = TRUE)\n\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n<0.001\n    KM\n-0.02\n-0.03, -0.02\n<0.001\n    Weight\n20\n18, 21\n<0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n  \n    \n      1 CI = Confidence Interval"
  },
  {
    "objectID": "inClass/inClass_ex04/inClass_ex4.html#check-normality-assumption",
    "href": "inClass/inClass_ex04/inClass_ex4.html#check-normality-assumption",
    "title": "Programming Interactive & Visual Statistical Analysis",
    "section": "2.4.4 Check Normality Assumption",
    "text": "2.4.4 Check Normality Assumption\n\n\nShow the code\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\nShow the code\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html",
    "href": "inClass/inClass_ex05/inClass_ex5.html",
    "title": "Visualise Correlation Matrices",
    "section": "",
    "text": "This study explores visual statistical analysis with :"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#load-r-packages",
    "href": "inClass/inClass_ex05/inClass_ex5.html#load-r-packages",
    "title": "Visualise Correlation Matrices",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(corrplot, ggstatsplot, seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#import-data",
    "href": "inClass/inClass_ex05/inClass_ex5.html#import-data",
    "title": "Visualise Correlation Matrices",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attribute data\nInvolved two (2) steps : import and inspect imported data set.\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nproblems(wine)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Identify variables’ type\n\n\nShow the code\nglimpse(wine, 70)\n\n\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        <dbl> 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7…\n$ `volatile acidity`     <dbl> 0.700, 0.880, 0.760, 0.280, 0.700, 0.…\n$ `citric acid`          <dbl> 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0…\n$ `residual sugar`       <dbl> 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.…\n$ chlorides              <dbl> 0.076, 0.098, 0.092, 0.075, 0.076, 0.…\n$ `free sulfur dioxide`  <dbl> 11, 25, 15, 17, 11, 13, 15, 15, 9, 17…\n$ `total sulfur dioxide` <dbl> 34, 67, 54, 60, 34, 40, 59, 21, 18, 1…\n$ density                <dbl> 0.9978, 0.9968, 0.9970, 0.9980, 0.997…\n$ pH                     <dbl> 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3…\n$ sulphates              <dbl> 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0…\n$ alcohol                <dbl> 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10…\n$ quality                <dbl> 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5…\n$ type                   <chr> \"red\", \"red\", \"red\", \"red\", \"red\", \"r…"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#with-pairs-method",
    "href": "inClass/inClass_ex05/inClass_ex5.html#with-pairs-method",
    "title": "Visualise Correlation Matrices",
    "section": "4.1 With pairs( ) method",
    "text": "4.1 With pairs( ) method\n\n\nShow the code\npairs(wine[,1:11])\n\n\n\n\n\nShould not put categorical data into the correlation matrix.\n\n\nShow the code\nggcorrmat(data = wine,\n          cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\n\n\n\nShow the code\nwine.cor <- cor(wine[, 1:11])\n\ncorrplot(wine.cor, \n         method = \"ellipse\",\n         order = \"hclust\",\n         type = \"upper\")"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#import-data-1",
    "href": "inClass/inClass_ex05/inClass_ex5.html#import-data-1",
    "title": "Visualise Correlation Matrices",
    "section": "5.1 Import Data",
    "text": "5.1 Import Data\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nproblems(pop_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#wrangle-data",
    "href": "inClass/inClass_ex05/inClass_ex5.html#wrangle-data",
    "title": "Visualise Correlation Matrices",
    "section": "5.2 Wrangle Data",
    "text": "5.2 Wrangle Data\n\n\nShow the code\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year)) %>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8])) %>%\n  mutate(ACTIVE = rowSums(.[9:16])) %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018) %>%\n  filter(TOTAL > 0)"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#plot-ternary-chart",
    "href": "inClass/inClass_ex05/inClass_ex5.html#plot-ternary-chart",
    "title": "Visualise Correlation Matrices",
    "section": "5.3 Plot Ternary Chart",
    "text": "5.3 Plot Ternary Chart\n\n\nShow the code\nggtern::ggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point()"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#upload-data",
    "href": "inClass/inClass_ex05/inClass_ex5.html#upload-data",
    "title": "Visualise Correlation Matrices",
    "section": "6.1 Upload data",
    "text": "6.1 Upload data\n\nwh <- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#wrangle-data-1",
    "href": "inClass/inClass_ex05/inClass_ex5.html#wrangle-data-1",
    "title": "Visualise Correlation Matrices",
    "section": "6.2 Wrangle Data",
    "text": "6.2 Wrangle Data\n\n\nShow the code\nrow.names(wh) <- wh$Country\n\n\n\n\nShow the code\nwh1 <- select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)"
  },
  {
    "objectID": "inClass/inClass_ex05/inClass_ex5.html#create-heatmap",
    "href": "inClass/inClass_ex05/inClass_ex5.html#create-heatmap",
    "title": "Visualise Correlation Matrices",
    "section": "6.3 Create Heatmap",
    "text": "6.3 Create Heatmap\n\n6.3.1 Plot with heatmap( )\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv = NA, \n                      Colv = NA)\n\n\n\n\n\n\n\n6.3.2 Plot with heatmaply( )\n\n\nShow the code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VISUAL ANALYTICS & APPLICATIONS",
    "section": "",
    "text": "Content Disclaimer\n\n\n\n\n\nThis micro-site is for academic purposes only. Any views or opinions, or comments represented in this site is personal and belongs solely to the site owner and do not represent those people, institutions or organisations that the owner may or may not be associated professionally or within a personal capacity unless explicitly stated.\nAll content on this site is for informational purposes only. This site’s owner makes no representation of the accuracy or completeness of any display information or any link on this site. The owner will not be liable for any errors, omissions or availability of any information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.\n\n\n\nmodule : ISSS608-AY2022-23Jan Visual Analytics and Applications\ninstructor : Dr. Kam Tin Seong, Associate Professor of Information Systems (Practice)\ninstitute : MITB-Analytics Track , Singapore Management University (SMU)\ntimeline : January 14, 2023 to March 25, 2023\n\n\n\n\ntopic\nlesson cover\ndate\n\n\n\n\n\nIntroduction to Visual Analytics\n\nHands-on Ex1\nIn-Class Ex1\nJan 14, 2023\n\n\n\nDesigning Graphs to Enlighten\n\n\nJan 21, 2023\n\n\n\nInteractivity in Visual Analytics\n\n\nJan 28, 2023\n\n\n\nFundamentals of Visual Analytics\n\n\nFeb 4, 2023\n\n\n\nVisual Multivariate Analysis\n\n\nFeb 11, 2023\n\n\n\nIt’s About Time\n\n\nFeb 18, 2023\n\n\n\nGeoVisual Analytics\n\n\nFeb 25, 2023\n\n\n\nNetwork Data Visualisation and Analysis\n\n\nMar 11, 2023\n\n\n\nInformation Dashboard Design\n\n\nMar 18, 2023\n\n\n\nVisualising Financial Data\n\n\nMar 25, 2023"
  },
  {
    "objectID": "pnote/bsw_3.html",
    "href": "pnote/bsw_3.html",
    "title": "BSW : Programming Statistical Graphics",
    "section": "",
    "text": "An overview of explanatory model"
  },
  {
    "objectID": "pnote/bsw_3.html#load-r-packages",
    "href": "pnote/bsw_3.html#load-r-packages",
    "title": "BSW : Programming Statistical Graphics",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\n\n\nShow the code\npacman::p_load(tidyverse, esquisse, ggstatsplot, officer, rvg)"
  },
  {
    "objectID": "pnote/bsw_3.html#acquire-data-source",
    "href": "pnote/bsw_3.html#acquire-data-source",
    "title": "BSW : Programming Statistical Graphics",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "pnote/bsw_3.html#import-data",
    "href": "pnote/bsw_3.html#import-data",
    "title": "BSW : Programming Statistical Graphics",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data\n\n\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproblems(exam_data)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Explore Data\n\n\nShow the code\nglimpse(exam_data, 70)\n\n\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student22…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\"…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", …\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Ma…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, …\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 3…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, …\n\n\nStep 1 - View exam_data.\nStep 2 - Type “esquisse::esquisser(viewer =”browser”) at the R Console.\n\nTwo-sample Comparison Test\nusing mean\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"p\",\n  messages = FALSE)\n\n\n\n\n\nChange to non-parametric, “np”, will be plotted using median.\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  messages = FALSE)\n\n\n\n\n\nANOVA Test\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = MATHS,\n  type = \"p\",\n  messages = FALSE)\n\n\n\n\n\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = ENGLISH,\n  type = \"np\",\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE)\n\n\n\n\n\nCompare 3C and 3D Classes\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = CLASS,\n  y = MATHS,\n  type = \"np\",\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  messages = FALSE)\n\n\nWarning: Number of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\nRemarks :\nResult shows that 3C and 3D are not statistically significant."
  },
  {
    "objectID": "pnote/bsw_4.html",
    "href": "pnote/bsw_4.html",
    "title": "BSW : Building Better Explanatory Models",
    "section": "",
    "text": "An overview of explanatory model"
  },
  {
    "objectID": "pnote/bsw_4.html#load-r-packages",
    "href": "pnote/bsw_4.html#load-r-packages",
    "title": "BSW : Building Better Explanatory Models",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\nShow the code\npacman::p_load(tidyverse, readxl, report, performance, funModeling, parameters, gtsummary)"
  },
  {
    "objectID": "pnote/bsw_4.html#acquire-data-source",
    "href": "pnote/bsw_4.html#acquire-data-source",
    "title": "BSW : Building Better Explanatory Models",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nx"
  },
  {
    "objectID": "pnote/bsw_4.html#import-data",
    "href": "pnote/bsw_4.html#import-data",
    "title": "BSW : Building Better Explanatory Models",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Read Data into R\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\",\n                       \"data\")\n\nproblems(car_resale)\n\n\n\n3.2.2 Inspect Data\n\n3.2.2.1 identify variable type\n\n\nShow the code\nglimpse(car_resale,60)\n\n\nRows: 1,436\nColumns: 38\n$ Id               <dbl> 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 4…\n$ Model            <chr> \"TOYOTA Corolla 1.6 5drs 1 4/5-Do…\n$ Price            <dbl> 18950, 13500, 13750, 13950, 14950…\n$ Age_08_04        <dbl> 25, 23, 23, 24, 26, 30, 32, 27, 3…\n$ Mfg_Month        <dbl> 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 1…\n$ Mfg_Year         <dbl> 2002, 2002, 2002, 2002, 2002, 200…\n$ KM               <dbl> 20019, 46986, 72937, 41711, 48000…\n$ Quarterly_Tax    <dbl> 100, 210, 210, 210, 210, 210, 210…\n$ Weight           <dbl> 1180, 1165, 1165, 1165, 1165, 117…\n$ Guarantee_Period <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ HP_Bin           <chr> \"100-120\", \"< 100\", \"< 100\", \"< 1…\n$ CC_bin           <chr> \"1600\", \">1600\", \">1600\", \">1600\"…\n$ Doors            <dbl> 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, …\n$ Gears            <dbl> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n$ Cylinders        <dbl> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, …\n$ Fuel_Type        <chr> \"Petrol\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            <chr> \"Blue\", \"Blue\", \"Silver\", \"Blue\",…\n$ Met_Color        <dbl> 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, …\n$ Automatic        <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Mfr_Guarantee    <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, …\n$ BOVAG_Guarantee  <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ ABS              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Airbag_1         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Airbag_2         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Airco            <dbl> 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, …\n$ Automatic_airco  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Boardcomputer    <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ CD_Player        <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, …\n$ Central_Lock     <dbl> 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, …\n$ Powered_Windows  <dbl> 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, …\n$ Power_Steering   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Radio            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Mistlamps        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, …\n$ Sport_Model      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, …\n$ Backseat_Divider <dbl> 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Metallic_Rim     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Radio_cassette   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Tow_Bar          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n\n\n\n\n3.2.2.2 check for missing data\n\n\nShow the code\nskimr::skim(car_resale)\n\n\n\nData summary\n\n\nName\ncar_resale\n\n\nNumber of rows\n1436\n\n\nNumber of columns\n38\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n33\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nModel\n0\n1\n14\n75\n0\n372\n0\n\n\nHP_Bin\n0\n1\n5\n7\n0\n3\n0\n\n\nCC_bin\n0\n1\n4\n5\n0\n3\n0\n\n\nFuel_Type\n0\n1\n3\n6\n0\n3\n0\n\n\nColor\n0\n1\n3\n6\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nId\n0\n1\n721.56\n416.48\n1\n361.75\n721.5\n1081.25\n1442\n▇▇▇▇▇\n\n\nPrice\n0\n1\n10730.82\n3626.96\n4350\n8450.00\n9900.0\n11950.00\n32500\n▇▅▁▁▁\n\n\nAge_08_04\n0\n1\n55.95\n18.60\n1\n44.00\n61.0\n70.00\n80\n▁▂▃▆▇\n\n\nMfg_Month\n0\n1\n5.55\n3.35\n1\n3.00\n5.0\n8.00\n12\n▇▅▅▃▅\n\n\nMfg_Year\n0\n1\n1999.63\n1.54\n1998\n1998.00\n1999.0\n2001.00\n2004\n▇▂▂▁▁\n\n\nKM\n0\n1\n68533.26\n37506.45\n1\n43000.00\n63389.5\n87020.75\n243000\n▅▇▂▁▁\n\n\nQuarterly_Tax\n0\n1\n87.12\n41.13\n19\n69.00\n85.0\n85.00\n283\n▇▇▁▂▁\n\n\nWeight\n0\n1\n1072.46\n52.64\n1000\n1040.00\n1070.0\n1085.00\n1615\n▇▁▁▁▁\n\n\nGuarantee_Period\n0\n1\n3.82\n3.01\n3\n3.00\n3.0\n3.00\n36\n▇▁▁▁▁\n\n\nDoors\n0\n1\n4.03\n0.95\n2\n3.00\n4.0\n5.00\n5\n▁▇▁▂▇\n\n\nGears\n0\n1\n5.03\n0.19\n3\n5.00\n5.0\n5.00\n6\n▁▁▁▇▁\n\n\nCylinders\n0\n1\n4.00\n0.00\n4\n4.00\n4.0\n4.00\n4\n▁▁▇▁▁\n\n\nMet_Color\n0\n1\n0.67\n0.47\n0\n0.00\n1.0\n1.00\n1\n▃▁▁▁▇\n\n\nAutomatic\n0\n1\n0.06\n0.23\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▁\n\n\nMfr_Guarantee\n0\n1\n0.41\n0.49\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▆\n\n\nBOVAG_Guarantee\n0\n1\n0.90\n0.31\n0\n1.00\n1.0\n1.00\n1\n▁▁▁▁▇\n\n\nABS\n0\n1\n0.81\n0.39\n0\n1.00\n1.0\n1.00\n1\n▂▁▁▁▇\n\n\nAirbag_1\n0\n1\n0.97\n0.17\n0\n1.00\n1.0\n1.00\n1\n▁▁▁▁▇\n\n\nAirbag_2\n0\n1\n0.72\n0.45\n0\n0.00\n1.0\n1.00\n1\n▃▁▁▁▇\n\n\nAirco\n0\n1\n0.51\n0.50\n0\n0.00\n1.0\n1.00\n1\n▇▁▁▁▇\n\n\nAutomatic_airco\n0\n1\n0.06\n0.23\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▁\n\n\nBoardcomputer\n0\n1\n0.29\n0.46\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▃\n\n\nCD_Player\n0\n1\n0.22\n0.41\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▂\n\n\nCentral_Lock\n0\n1\n0.58\n0.49\n0\n0.00\n1.0\n1.00\n1\n▆▁▁▁▇\n\n\nPowered_Windows\n0\n1\n0.56\n0.50\n0\n0.00\n1.0\n1.00\n1\n▆▁▁▁▇\n\n\nPower_Steering\n0\n1\n0.98\n0.15\n0\n1.00\n1.0\n1.00\n1\n▁▁▁▁▇\n\n\nRadio\n0\n1\n0.15\n0.35\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▂\n\n\nMistlamps\n0\n1\n0.26\n0.44\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▃\n\n\nSport_Model\n0\n1\n0.30\n0.46\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▃\n\n\nBackseat_Divider\n0\n1\n0.77\n0.42\n0\n1.00\n1.0\n1.00\n1\n▂▁▁▁▇\n\n\nMetallic_Rim\n0\n1\n0.20\n0.40\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▂\n\n\nRadio_cassette\n0\n1\n0.15\n0.35\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▂\n\n\nTow_Bar\n0\n1\n0.28\n0.45\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▃\n\n\n\n\n\n\n\n3.2.2.3 reveal unique value\nWhen use funModeling function, turn the “tbl_df” into “data.frame”.\n\n\nShow the code\n#status <- df_status(car_resale) << alternate way to code\n\ncar_resale %>% \n  df_status()\n\n\n           variable q_zeros p_zeros q_na p_na q_inf p_inf      type unique\n1                Id       0    0.00    0    0     0     0   numeric   1436\n2             Model       0    0.00    0    0     0     0 character    372\n3             Price       0    0.00    0    0     0     0   numeric    236\n4         Age_08_04       0    0.00    0    0     0     0   numeric     77\n5         Mfg_Month       0    0.00    0    0     0     0   numeric     12\n6          Mfg_Year       0    0.00    0    0     0     0   numeric      7\n7                KM       0    0.00    0    0     0     0   numeric   1263\n8     Quarterly_Tax       0    0.00    0    0     0     0   numeric     13\n9            Weight       0    0.00    0    0     0     0   numeric     59\n10 Guarantee_Period       0    0.00    0    0     0     0   numeric      9\n11           HP_Bin       0    0.00    0    0     0     0 character      3\n12           CC_bin       0    0.00    0    0     0     0 character      3\n13            Doors       0    0.00    0    0     0     0   numeric      4\n14            Gears       0    0.00    0    0     0     0   numeric      4\n15        Cylinders       0    0.00    0    0     0     0   numeric      1\n16        Fuel_Type       0    0.00    0    0     0     0 character      3\n17            Color       0    0.00    0    0     0     0 character     10\n18        Met_Color     467   32.52    0    0     0     0   numeric      2\n19        Automatic    1356   94.43    0    0     0     0   numeric      2\n20    Mfr_Guarantee     848   59.05    0    0     0     0   numeric      2\n21  BOVAG_Guarantee     150   10.45    0    0     0     0   numeric      2\n22              ABS     268   18.66    0    0     0     0   numeric      2\n23         Airbag_1      42    2.92    0    0     0     0   numeric      2\n24         Airbag_2     398   27.72    0    0     0     0   numeric      2\n25            Airco     706   49.16    0    0     0     0   numeric      2\n26  Automatic_airco    1355   94.36    0    0     0     0   numeric      2\n27    Boardcomputer    1013   70.54    0    0     0     0   numeric      2\n28        CD_Player    1122   78.13    0    0     0     0   numeric      2\n29     Central_Lock     603   41.99    0    0     0     0   numeric      2\n30  Powered_Windows     629   43.80    0    0     0     0   numeric      2\n31   Power_Steering      32    2.23    0    0     0     0   numeric      2\n32            Radio    1226   85.38    0    0     0     0   numeric      2\n33        Mistlamps    1067   74.30    0    0     0     0   numeric      2\n34      Sport_Model    1005   69.99    0    0     0     0   numeric      2\n35 Backseat_Divider     330   22.98    0    0     0     0   numeric      2\n36     Metallic_Rim    1142   79.53    0    0     0     0   numeric      2\n37   Radio_cassette    1227   85.45    0    0     0     0   numeric      2\n38          Tow_Bar    1037   72.21    0    0     0     0   numeric      2"
  },
  {
    "objectID": "pnote/bsw_4.html#data-wrangling",
    "href": "pnote/bsw_4.html#data-wrangling",
    "title": "BSW : Building Better Explanatory Models",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Convert Variable Type\n\n\nShow the code\ncols <- c(\"Mfg_Month\", \"HP_Bin\", \"CC_bin\", \"Doors\", \"Gears\", \"Cylinders\", \"Fuel_Type\", \"Color\", \"Met_Color\", \"Automatic\", \"Mfr_Guarantee\", \"BOVAG_Guarantee\", \"ABS\", \"Airbag_1\", \"Airbag_2\", \"Airco\", \"Automatic_airco\", \"Boardcomputer\", \"CD_Player\", \"Central_Lock\", \"Powered_Windows\", \"Power_Steering\", \"Radio\", \"Mistlamps\", \"Sport_Model\", \"Backseat_Divider\", \"Metallic_Rim\", \"Radio_cassette\", \"Tow_Bar\")\n\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       sheet = \"data\") %>%\n  mutate(Id = as.character(Id)) %>%\n  mutate_each_(funs(factor(.)),\n               cols)\n\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\n3.3.1.1 inspect output\n\n\nShow the code\nprofiling_num(car_resale)\n\n\n          variable        mean      std_dev variation_coef   p_01     p_05\n1            Price 10730.82451  3626.964585   0.3379949584 5917.5  6900.00\n2        Age_08_04    55.94708    18.599988   0.3324568491    8.0    19.00\n3         Mfg_Year  1999.62535     1.540722   0.0007705053 1998.0  1998.00\n4               KM 68533.25975 37506.448872   0.5472736743 4350.0 17047.75\n5    Quarterly_Tax    87.12256    41.128611   0.4720776117   19.0    34.75\n6           Weight  1072.45961    52.641120   0.0490844783 1000.0  1015.00\n7 Guarantee_Period     3.81546     3.011025   0.7891643405    3.0     3.00\n   p_25    p_50     p_75     p_95      p_99   skewness  kurtosis      iqr\n1  8450  9900.0 11950.00  18950.0  22250.00  1.7021046  6.720604  3500.00\n2    44    61.0    70.00     79.0     80.00 -0.8258381  2.919459    26.00\n3  1998  1999.0  2001.00   2003.0   2004.00  0.9103514  3.066152     3.00\n4 43000 63389.5 87020.75 138420.5 191368.00  1.0148507  4.675020 44020.75\n5    69    85.0    85.00    185.0    234.00  1.9917506  7.279218    16.00\n6  1040  1070.0  1085.00   1150.0   1263.25  3.1053913 22.291372    45.00\n7     3     3.0     3.00     12.0     12.00  5.8323346 48.731612     0.00\n         range_98            range_80\n1 [5917.5, 22250]       [7450, 15950]\n2         [8, 80]            [27, 77]\n3    [1998, 2004]        [1998, 2002]\n4  [4350, 191368] [26241.5, 117087.5]\n5       [19, 234]           [69, 185]\n6 [1000, 1263.25]        [1020, 1130]\n7         [3, 12]              [3, 6]\n\n\n\n\n3.3.1.2 EDA for Continuous Variables\n\n\nShow the code\nplot_num(car_resale)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n\n\n3.3.1.3 EDA for Character Variables\n\n\nShow the code\nfreq(car_resale[3:38])\n\n\n\n\n\n   Mfg_Month frequency percentage cumulative_perc\n1          1       207      14.42           14.42\n2          4       154      10.72           25.14\n3          3       138       9.61           34.75\n4          2       134       9.33           44.08\n5          7       133       9.26           53.34\n6          6       120       8.36           61.70\n7          5       118       8.22           69.92\n8          8       115       8.01           77.93\n9         10       101       7.03           84.96\n10         9        76       5.29           90.25\n11        11        72       5.01           95.26\n12        12        68       4.74          100.00\n\n\n\n\n\n   HP_Bin frequency percentage cumulative_perc\n1 100-120       865      60.24           60.24\n2   < 100       560      39.00           99.24\n3   > 120        11       0.77          100.00\n\n\n\n\n\n  CC_bin frequency percentage cumulative_perc\n1   1600       854      59.47           59.47\n2  <1600       416      28.97           88.44\n3  >1600       166      11.56          100.00\n\n\n\n\n\n  Doors frequency percentage cumulative_perc\n1     5       674      46.94           46.94\n2     3       622      43.31           90.25\n3     4       138       9.61           99.86\n4     2         2       0.14          100.00\n\n\n\n\n\n  Gears frequency percentage cumulative_perc\n1     5      1390      96.80           96.80\n2     6        43       2.99           99.79\n3     3         2       0.14           99.93\n4     4         1       0.07          100.00\n\n\n\n\n\n  Cylinders frequency percentage cumulative_perc\n1         4      1436        100             100\n\n\n\n\n\n  Fuel_Type frequency percentage cumulative_perc\n1    Petrol      1264      88.02           88.02\n2    Diesel       155      10.79           98.81\n3       CNG        17       1.18          100.00\n\n\n\n\n\n    Color frequency percentage cumulative_perc\n1    Grey       301      20.96           20.96\n2    Blue       283      19.71           40.67\n3     Red       278      19.36           60.03\n4   Green       220      15.32           75.35\n5   Black       191      13.30           88.65\n6  Silver       122       8.50           97.15\n7   White        31       2.16           99.31\n8  Violet         4       0.28           99.59\n9   Beige         3       0.21           99.80\n10 Yellow         3       0.21          100.00\n\n\n\n\n\n  Met_Color frequency percentage cumulative_perc\n1         1       969      67.48           67.48\n2         0       467      32.52          100.00\n\n\n\n\n\n  Automatic frequency percentage cumulative_perc\n1         0      1356      94.43           94.43\n2         1        80       5.57          100.00\n\n\n\n\n\n  Mfr_Guarantee frequency percentage cumulative_perc\n1             0       848      59.05           59.05\n2             1       588      40.95          100.00\n\n\n\n\n\n  BOVAG_Guarantee frequency percentage cumulative_perc\n1               1      1286      89.55           89.55\n2               0       150      10.45          100.00\n\n\n\n\n\n  ABS frequency percentage cumulative_perc\n1   1      1168      81.34           81.34\n2   0       268      18.66          100.00\n\n\n\n\n\n  Airbag_1 frequency percentage cumulative_perc\n1        1      1394      97.08           97.08\n2        0        42       2.92          100.00\n\n\n\n\n\n  Airbag_2 frequency percentage cumulative_perc\n1        1      1038      72.28           72.28\n2        0       398      27.72          100.00\n\n\n\n\n\n  Airco frequency percentage cumulative_perc\n1     1       730      50.84           50.84\n2     0       706      49.16          100.00\n\n\n\n\n\n  Automatic_airco frequency percentage cumulative_perc\n1               0      1355      94.36           94.36\n2               1        81       5.64          100.00\n\n\n\n\n\n  Boardcomputer frequency percentage cumulative_perc\n1             0      1013      70.54           70.54\n2             1       423      29.46          100.00\n\n\n\n\n\n  CD_Player frequency percentage cumulative_perc\n1         0      1122      78.13           78.13\n2         1       314      21.87          100.00\n\n\n\n\n\n  Central_Lock frequency percentage cumulative_perc\n1            1       833      58.01           58.01\n2            0       603      41.99          100.00\n\n\n\n\n\n  Powered_Windows frequency percentage cumulative_perc\n1               1       807       56.2            56.2\n2               0       629       43.8           100.0\n\n\n\n\n\n  Power_Steering frequency percentage cumulative_perc\n1              1      1404      97.77           97.77\n2              0        32       2.23          100.00\n\n\n\n\n\n  Radio frequency percentage cumulative_perc\n1     0      1226      85.38           85.38\n2     1       210      14.62          100.00\n\n\n\n\n\n  Mistlamps frequency percentage cumulative_perc\n1         0      1067       74.3            74.3\n2         1       369       25.7           100.0\n\n\n\n\n\n  Sport_Model frequency percentage cumulative_perc\n1           0      1005      69.99           69.99\n2           1       431      30.01          100.00\n\n\n\n\n\n  Backseat_Divider frequency percentage cumulative_perc\n1                1      1106      77.02           77.02\n2                0       330      22.98          100.00\n\n\n\n\n\n  Metallic_Rim frequency percentage cumulative_perc\n1            0      1142      79.53           79.53\n2            1       294      20.47          100.00\n\n\n\n\n\n  Radio_cassette frequency percentage cumulative_perc\n1              0      1227      85.45           85.45\n2              1       209      14.55          100.00\n\n\n\n\n\n  Tow_Bar frequency percentage cumulative_perc\n1       0      1037      72.21           72.21\n2       1       399      27.79          100.00\n\n\n[1] \"Variables processed: Mfg_Month, HP_Bin, CC_bin, Doors, Gears, Cylinders, Fuel_Type, Color, Met_Color, Automatic, Mfr_Guarantee, BOVAG_Guarantee, ABS, Airbag_1, Airbag_2, Airco, Automatic_airco, Boardcomputer, CD_Player, Central_Lock, Powered_Windows, Power_Steering, Radio, Mistlamps, Sport_Model, Backseat_Divider, Metallic_Rim, Radio_cassette, Tow_Bar\""
  },
  {
    "objectID": "pnote/bsw_4.html#create-model",
    "href": "pnote/bsw_4.html#create-model",
    "title": "BSW : Building Better Explanatory Models",
    "section": "4.1 Create Model",
    "text": "4.1 Create Model\n\n\nShow the code\nmodel <- lm(Price ~ Age_08_04 + \n              Mfg_Year + \n              KM + \n              Weight + \n              Guarantee_Period, \n            data = car_resale)\n\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "pnote/bsw_4.html#diagnose-models-multicollinearity",
    "href": "pnote/bsw_4.html#diagnose-models-multicollinearity",
    "title": "BSW : Building Better Explanatory Models",
    "section": "4.2 Diagnose Model’s Multicollinearity",
    "text": "4.2 Diagnose Model’s Multicollinearity\n\n4.2.1 Check Multicollinearity\n\n\nShow the code\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\nhttps://easystats.github.io/easystats/\n\n\n4.2.2 EDA for Multicollinearity\n\n\nShow the code\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n\n\nVariable `Component` is not in your data frame :/"
  },
  {
    "objectID": "pnote/bsw_4.html#normality-analysis",
    "href": "pnote/bsw_4.html#normality-analysis",
    "title": "BSW : Building Better Explanatory Models",
    "section": "4.3 Normality Analysis",
    "text": "4.3 Normality Analysis\n\n4.3.1 Create Model for Normality Analysis\n\n\nShow the code\nmodel1 <- lm(Price ~ Age_08_04 +\n               KM + \n               Weight + \n               Guarantee_Period, \n             data = car_resale)\n\ncheck_normality(model1)\n\n\nWarning: Non-normality of residuals detected (p < .001).\n\n\n\n\n4.3.2 EDA Model\n\n\nShow the code\ncheck_n <- check_normality(model1) \nplot(check_n)"
  },
  {
    "objectID": "pnote/bsw_4.html#model-inspection-on-homogeneity-of-variances",
    "href": "pnote/bsw_4.html#model-inspection-on-homogeneity-of-variances",
    "title": "BSW : Building Better Explanatory Models",
    "section": "4.4 Model Inspection on Homogeneity of Variances",
    "text": "4.4 Model Inspection on Homogeneity of Variances\n\n4.4.1 Overview\n\n\nShow the code\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n4.4.2 Complete Inspection\n\n\nShow the code\ncheck_model(model1)\n\n\nVariable `Component` is not in your data frame :/"
  },
  {
    "objectID": "pnote/bsw_4.html#summarise-with-summary",
    "href": "pnote/bsw_4.html#summarise-with-summary",
    "title": "BSW : Building Better Explanatory Models",
    "section": "5.1 Summarise with summary( )",
    "text": "5.1 Summarise with summary( )\n\n\nShow the code\nsummary(model1)\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   <2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   <2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   <2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: < 2.2e-16"
  },
  {
    "objectID": "pnote/bsw_4.html#summaries-with-gtsummary-tbl_regression",
    "href": "pnote/bsw_4.html#summaries-with-gtsummary-tbl_regression",
    "title": "BSW : Building Better Explanatory Models",
    "section": "5.2 Summaries with gtsummary:: tbl_regression()",
    "text": "5.2 Summaries with gtsummary:: tbl_regression()\n\n5.2.1 Summaries Model1\n\n\nShow the code\ntbl_regression(model1,\n               intercept = TRUE)\n\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n<0.001\n    KM\n-0.02\n-0.03, -0.02\n<0.001\n    Weight\n20\n18, 21\n<0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n5.2.2 Include Additional Parameters\n\n\nShow the code\ntbl_regression(model1,\n               intercept = TRUE) %>%\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, \n                adj.r.squared,\n                AIC, \n                statistic,\n                p.value, \n                sigma))\n\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n<0.001\n    KM\n-0.02\n-0.03, -0.02\n<0.001\n    Weight\n20\n18, 21\n<0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = <0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval"
  },
  {
    "objectID": "pnote/bsw_4.html#create-report-for-model1",
    "href": "pnote/bsw_4.html#create-report-for-model1",
    "title": "BSW : Building Better Explanatory Models",
    "section": "5.3 Create Report for Model1",
    "text": "5.3 Create Report for Model1\n\n\n\nWe fitted a linear model (estimated using OLS) to predict Price with Age_08_04 (formula: Price ~\nAge_08_04 + KM + Weight + Guarantee_Period). The model explains a statistically significant and\nsubstantial proportion of variance (R2 = 0.85, F(4, 1431) = 2004.93, p < .001, adj. R2 = 0.85). The\nmodel’s intercept, corresponding to Age_08_04 = 0, is at -2185.52 (95% CI [-4092.59, -278.45], t(1431)\n= -2.25, p = 0.025). Within this model:\n\nThe effect of Age 08 04 is statistically significant and negative (beta = -119.49, 95% CI [-124.91,\n\n-114.08], t(1431) = -43.29, p < .001; Std. beta = -0.61, 95% CI [-0.64, -0.59])\n\nThe effect of KM is statistically significant and negative (beta = -0.02, 95% CI [-0.03, -0.02],\n\nt(1431) = -20.04, p < .001; Std. beta = -0.25, 95% CI [-0.27, -0.22])\n\nThe effect of Weight is statistically significant and positive (beta = 19.72, 95% CI [18.08, 21.36],\n\nt(1431) = 23.53, p < .001; Std. beta = 0.29, 95% CI [0.26, 0.31])\n\nThe effect of Guarantee Period is statistically significant and positive (beta = 26.82, 95% CI\n\n[2.08, 51.56], t(1431) = 2.13, p = 0.034; Std. beta = 0.02, 95% CI [1.73e-03, 0.04])\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n95% Confidence Intervals (CIs) and p-values were computed using a Wald t-distribution approximation.,\nWe fitted a linear model (estimated using OLS) to predict Price with KM (formula: Price ~ Age_08_04 +\nKM + Weight + Guarantee_Period). The model explains a statistically significant and substantial\nproportion of variance (R2 = 0.85, F(4, 1431) = 2004.93, p < .001, adj. R2 = 0.85). The model’s\nintercept, corresponding to KM = 0, is at -2185.52 (95% CI [-4092.59, -278.45], t(1431) = -2.25, p =\n0.025). Within this model:\n\nThe effect of Age 08 04 is statistically significant and negative (beta = -119.49, 95% CI [-124.91,\n\n-114.08], t(1431) = -43.29, p < .001; Std. beta = -0.61, 95% CI [-0.64, -0.59])\n\nThe effect of KM is statistically significant and negative (beta = -0.02, 95% CI [-0.03, -0.02],\n\nt(1431) = -20.04, p < .001; Std. beta = -0.25, 95% CI [-0.27, -0.22])\n\nThe effect of Weight is statistically significant and positive (beta = 19.72, 95% CI [18.08, 21.36],\n\nt(1431) = 23.53, p < .001; Std. beta = 0.29, 95% CI [0.26, 0.31])\n\nThe effect of Guarantee Period is statistically significant and positive (beta = 26.82, 95% CI\n\n[2.08, 51.56], t(1431) = 2.13, p = 0.034; Std. beta = 0.02, 95% CI [1.73e-03, 0.04])\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n95% Confidence Intervals (CIs) and p-values were computed using a Wald t-distribution approximation.,\nWe fitted a linear model (estimated using OLS) to predict Price with Weight (formula: Price ~\nAge_08_04 + KM + Weight + Guarantee_Period). The model explains a statistically significant and\nsubstantial proportion of variance (R2 = 0.85, F(4, 1431) = 2004.93, p < .001, adj. R2 = 0.85). The\nmodel’s intercept, corresponding to Weight = 0, is at -2185.52 (95% CI [-4092.59, -278.45], t(1431) =\n-2.25, p = 0.025). Within this model:\n\nThe effect of Age 08 04 is statistically significant and negative (beta = -119.49, 95% CI [-124.91,\n\n-114.08], t(1431) = -43.29, p < .001; Std. beta = -0.61, 95% CI [-0.64, -0.59])\n\nThe effect of KM is statistically significant and negative (beta = -0.02, 95% CI [-0.03, -0.02],\n\nt(1431) = -20.04, p < .001; Std. beta = -0.25, 95% CI [-0.27, -0.22])\n\nThe effect of Weight is statistically significant and positive (beta = 19.72, 95% CI [18.08, 21.36],\n\nt(1431) = 23.53, p < .001; Std. beta = 0.29, 95% CI [0.26, 0.31])\n\nThe effect of Guarantee Period is statistically significant and positive (beta = 26.82, 95% CI\n\n[2.08, 51.56], t(1431) = 2.13, p = 0.034; Std. beta = 0.02, 95% CI [1.73e-03, 0.04])\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n95% Confidence Intervals (CIs) and p-values were computed using a Wald t-distribution approximation.\nand We fitted a linear model (estimated using OLS) to predict Price with Guarantee_Period (formula:\nPrice ~ Age_08_04 + KM + Weight + Guarantee_Period). The model explains a statistically significant\nand substantial proportion of variance (R2 = 0.85, F(4, 1431) = 2004.93, p < .001, adj. R2 = 0.85).\nThe model’s intercept, corresponding to Guarantee_Period = 0, is at -2185.52 (95% CI [-4092.59,\n-278.45], t(1431) = -2.25, p = 0.025). Within this model:\n\nThe effect of Age 08 04 is statistically significant and negative (beta = -119.49, 95% CI [-124.91,\n\n-114.08], t(1431) = -43.29, p < .001; Std. beta = -0.61, 95% CI [-0.64, -0.59])\n\nThe effect of KM is statistically significant and negative (beta = -0.02, 95% CI [-0.03, -0.02],\n\nt(1431) = -20.04, p < .001; Std. beta = -0.25, 95% CI [-0.27, -0.22])\n\nThe effect of Weight is statistically significant and positive (beta = 19.72, 95% CI [18.08, 21.36],\n\nt(1431) = 23.53, p < .001; Std. beta = 0.29, 95% CI [0.26, 0.31])\n\nThe effect of Guarantee Period is statistically significant and positive (beta = 26.82, 95% CI\n\n[2.08, 51.56], t(1431) = 2.13, p = 0.034; Std. beta = 0.02, 95% CI [1.73e-03, 0.04])\nStandardized parameters were obtained by fitting the model on a standardized version of the dataset.\n95% Confidence Intervals (CIs) and p-values were computed using a Wald t-distribution approximation."
  },
  {
    "objectID": "pnote/bsw_5.html",
    "href": "pnote/bsw_5.html",
    "title": "BSW : Predictive Models with Tidymodels Approach",
    "section": "",
    "text": "An overview of predictive model based on Diamond data set includes in ggplot2 package.\n\n\n\n\n\n\nReminder : Predictive Modelling Process\n\n\n\n\n\n\nbusiness problem\n\nanalytical data mart\n\ndata preparation\ndata exploration\ndata sampling\nmodel fitting\nmodel evaluation\nmodel assessment\nmodel comparison"
  },
  {
    "objectID": "pnote/bsw_5.html#load-r-packages",
    "href": "pnote/bsw_5.html#load-r-packages",
    "title": "BSW : Predictive Models with Tidymodels Approach",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\nShow the code\npacman::p_load(tidymodels, tidyverse)"
  },
  {
    "objectID": "pnote/bsw_5.html#acquire-data-source",
    "href": "pnote/bsw_5.html#acquire-data-source",
    "title": "BSW : Predictive Models with Tidymodels Approach",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set available in ggplot2.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nx"
  },
  {
    "objectID": "pnote/bsw_5.html#import-data",
    "href": "pnote/bsw_5.html#import-data",
    "title": "BSW : Predictive Models with Tidymodels Approach",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Read Data into R\ndata() is used to load diamonds data set from ggplot2 package.\n\ndata(diamonds)\n\n\n3.2.1.2 inspect data\n\n\nShow the code\nglimpse(diamonds,70)\n\n\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, …\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 33…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49…"
  },
  {
    "objectID": "pnote/bsw_5.html#data-sampling",
    "href": "pnote/bsw_5.html#data-sampling",
    "title": "BSW : Predictive Models with Tidymodels Approach",
    "section": "3.3 Data Sampling",
    "text": "3.3 Data Sampling\ncreate different types of resamples and corresponding classes for their analysis.\ninitial_split( ) creates single binary split of the data into a training set and testing set.\nprop .6 means 60% for training( ) and remaining for testing( )\n!!!!! strata’s value is the variable that applicable to most variables?\n\n\nShow the code\nset.seed(1243)\ndiamonds_split <- diamonds %>%\n  select(c(1:7)) %>%\n  initial_split(prop = .6,\n                strata = price)\n\ntraining_data <- training(diamonds_split)\ntesting_data <- testing(diamonds_split)\n\n\ncreate cross-validation data sets : rsample method\nto prepare the training data set into for 3-fold cross-validation.\n\n\nShow the code\nvfold_data <- vfold_cv(training_data,\n                       v = 3,\n                       repeats = 1,\n                       strata = price)\n\n\n\n\nShow the code\nvfold_data %>% \n  mutate(df_ana = map(splits, analysis),\n         df_ass = map(splits, assessment))\n\n\n#  3-fold cross-validation using stratification \n# A tibble: 3 × 4\n  splits                id    df_ana                df_ass               \n  <list>                <chr> <list>                <list>               \n1 <split [21576/10788]> Fold1 <tibble [21,576 × 7]> <tibble [10,788 × 7]>\n2 <split [21576/10788]> Fold2 <tibble [21,576 × 7]> <tibble [10,788 × 7]>\n3 <split [21576/10788]> Fold3 <tibble [21,576 × 7]> <tibble [10,788 × 7]>\n\n\ndata pre-processing and feature engineering : recipes method\nworking with recipe\n!!!!! step_log(all_outcomes) = log transform on prices = all values for strata?\nstep_poly(degree = ) depends on the curve?\n\n\nShow the code\nprocessed_data <- recipe(\n  price ~ .,\n  data = training_data) %>%\n  step_log(all_outcomes()) %>%\n  step_normalize(all_predictors(),\n                 -all_nominal()) %>%\n  step_dummy(all_nominal()) %>%\n  step_poly(carat, degree = 2)\n\n\n\n\nShow the code\nprep(processed_data)\n\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          6\n\nTraining data contained 32364 data points and no missing data.\n\nOperations:\n\nLog transformation on price [trained]\nCentering and scaling for carat, depth, table [trained]\nDummy variables from cut, color, clarity [trained]\nOrthogonal polynomials on carat [trained]\n\n\nRemarks :\nChanges only made to the training data.\n\n\nShow the code\njuiced_data <- juice(prep(processed_data))\nnames(juiced_data)\n\n\n [1] \"depth\"        \"table\"        \"price\"        \"cut_1\"        \"cut_2\"       \n [6] \"cut_3\"        \"cut_4\"        \"color_1\"      \"color_2\"      \"color_3\"     \n[11] \"color_4\"      \"color_5\"      \"color_6\"      \"clarity_1\"    \"clarity_2\"   \n[16] \"clarity_3\"    \"clarity_4\"    \"clarity_5\"    \"clarity_6\"    \"clarity_7\"   \n[21] \"carat_poly_1\" \"carat_poly_2\"\n\n\nparsnip package - regression model\n\nranger()\nml_random_forest()\netc.\n\nlm model using Basse R lm\nlinear_reg()\n\n\nShow the code\nlm_model <-\n  linear_reg() %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"lm\")\n\n\nfitting the lm model\n\n\nShow the code\nlm_fit <- fit(lm_model,\n              price ~.,\n              juiced_data)\n\nlm_fit\n\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = price ~ ., data = data)\n\nCoefficients:\n (Intercept)         depth         table         cut_1         cut_2  \n   7.721e+00    -3.345e-03    -2.002e-03     8.743e-02    -7.044e-03  \n       cut_3         cut_4       color_1       color_2       color_3  \n   1.031e-02     8.402e-04    -4.575e-01    -8.609e-02    -1.453e-03  \n     color_4       color_5       color_6     clarity_1     clarity_2  \n   1.925e-02    -7.115e-03    -8.919e-04     8.281e-01    -2.209e-01  \n   clarity_3     clarity_4     clarity_5     clarity_6     clarity_7  \n   1.182e-01    -4.658e-02     1.672e-02    -2.751e-04     2.242e-02  \ncarat_poly_1  carat_poly_2  \n   1.888e+02    -5.476e+01  \n\n\ncalibrating random forest model\n\n\nShow the code\nrf_fit <- rand_forest(\n  mode = \"regression\",\n  engine = \"ranger\",\n  mtry = .preds(),\n  trees = 100) %>%\n  fit(price ~.,\n      data = juiced_data)\n\nrf_fit\n\n\nparsnip model object\n\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~.preds(),      x), num.trees = ~100, num.threads = 1, verbose = FALSE, seed = sample.int(10^5,      1)) \n\nType:                             Regression \nNumber of trees:                  100 \nSample size:                      32364 \nNumber of independent variables:  21 \nMtry:                             21 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       0.01139815 \nR squared (OOB):                  0.9889437 \n\n\n\n\nShow the code\nrf2_fit <- rand_forest(\n  mode = \"regression\",\n  engine = \"randomForest\",\n  mtry = .preds(),\n  trees = 100) %>%\n  fit(price ~.,\n      data = juiced_data)\n\nrf2_fit\n\n\nparsnip model object\n\n\nCall:\n randomForest(x = maybe_data_frame(x), y = y, ntree = ~100, mtry = min_cols(~.preds(),      x)) \n               Type of random forest: regression\n                     Number of trees: 100\nNo. of variables tried at each split: 21\n\n          Mean of squared residuals: 0.01136989\n                    % Var explained: 98.9\n\n\nviewing model report\n\n\nShow the code\nglance(lm_fit$fit)\n\n\n# A tibble: 1 × 12\n  r.squared adj.r.s…¹ sigma stati…² p.value    df logLik     AIC     BIC devia…³\n      <dbl>     <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n1     0.973     0.973 0.165  56472.       0    21 12307. -24567. -24375.    886.\n# … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names ¹​adj.r.squared, ²​statistic, ³​deviance\n\n\nglance(rf_fit$fit)\n\n\nShow the code\ntidy(lm_fit) %>%\n  arrange(desc(abs(statistic)))\n\n\n# A tibble: 22 × 5\n   term         estimate std.error statistic   p.value\n   <chr>           <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)    7.72     0.00185    4176.  0        \n 2 carat_poly_1 189.       0.191       990.  0        \n 3 carat_poly_2 -54.8      0.169      -324.  0        \n 4 clarity_1      0.828    0.00574     144.  0        \n 5 color_1       -0.458    0.00328    -140.  0        \n 6 clarity_2     -0.221    0.00538     -41.0 0        \n 7 color_2       -0.0861   0.00299     -28.8 3.92e-180\n 8 clarity_3      0.118    0.00460      25.7 3.59e-144\n 9 cut_1          0.0874   0.00419      20.8 6.89e- 96\n10 clarity_4     -0.0466   0.00367     -12.7 7.16e- 37\n# … with 12 more rows\n\n\n\n\nShow the code\nlm_predicted <- augment(lm_fit$fit,\n  data = juiced_data) %>%\n  rowid_to_column()\n  select(lm_predicted,\n  rowid,\n  price,\n  .fitted :.std.resid)\n\n\n# A tibble: 32,364 × 8\n   rowid price .fitted .resid     .hat .sigma   .cooksd .std.resid\n   <int> <dbl>   <dbl>  <dbl>    <dbl>  <dbl>     <dbl>      <dbl>\n 1     1  5.79    6.04 -0.254 0.000527  0.165 0.0000564     -1.53 \n 2     2  5.79    6.10 -0.311 0.000556  0.165 0.0000894     -1.88 \n 3     3  5.79    6.34 -0.545 0.00136   0.165 0.000674      -3.30 \n 4     4  5.81    6.19 -0.376 0.000642  0.165 0.000151      -2.27 \n 5     5  5.82    6.04 -0.220 0.00115   0.165 0.0000928     -1.33 \n 6     6  5.82    6.23 -0.413 0.000924  0.165 0.000262      -2.50 \n 7     7  5.82    6.05 -0.229 0.000610  0.165 0.0000532     -1.38 \n 8     8  5.82    6.14 -0.315 0.000761  0.165 0.000125      -1.90 \n 9     9  5.83    5.94 -0.113 0.000972  0.165 0.0000208     -0.686\n10    10  5.83    6.09 -0.260 0.000579  0.165 0.0000651     -1.57 \n# … with 32,354 more rows\n\n\n\n\nShow the code\nprice_recipe <- recipe(\n  price ~ ., data = training_data) %>%\n  step_log(all_outcomes()) %>%\n  step_normalize(all_predictors(),\n  -all_nominal()) %>%\n  step_dummy(all_nominal()) %>%\n  step_poly(carat, degree = 2) %>%\n  prep()\n\n\n\n\nShow the code\ntest_data <- bake(price_recipe,\n                  new_data = testing_data,\n                  all_predictors())\n\n\n\n\nShow the code\nlm_pred <- predict(\n  lm_fit,\n  new_data = test_data) %>%\n  rename(lm = .pred)\n\n\n\n\nShow the code\nrf_pred <- predict(\n  rf_fit,\n  new_data = test_data) %>%\n  rename(rf = .pred)\n\n\n\n\nShow the code\ntest_results <- testing_data %>%\n  select(price) %>%\n  mutate(log_price = log(price)) %>%\n  bind_cols(rf_pred) %>%\n  bind_cols(lm_pred)\n\n\n\n\nShow the code\ntest_results %>% metrics(\n  truth = log_price,\n  estimate = lm)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.160\n2 rsq     standard       0.975\n3 mae     standard       0.124\n\n\n\n\nShow the code\ntest_results %>% metrics(\n  truth = log_price,\n  estimate = rf)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      0.108 \n2 rsq     standard      0.989 \n3 mae     standard      0.0803\n\n\n\n\nShow the code\nmetric_set(rmse, rsq, mase)\n\n\n# A tibble: 3 × 3\n  metric class          direction\n  <chr>  <chr>          <chr>    \n1 rmse   numeric_metric minimize \n2 rsq    numeric_metric maximize \n3 mase   numeric_metric minimize \n\n\n\n\nShow the code\ntest_results %>%\n  select(c(2:4)) %>%\n  pivot_longer(\n    !log_price,\n    names_to = \"mode\",\n    values_to = \"prediction\") %>%\n  group_by(model) %>%\n  metrics(truth = log_price,\n          estimate = prediction)\n\n\n\n\nShow the code\ntest_results %>%\n  select(c(2:4)) %>%\n  pivot_longer(\n    !log_price,\n    names_to = \"mode\",\n    values_to = \"prediction\") %>%\n  ggplot(aes(x = prediction,\n             y = log_price)) +\n  geom_abline(col = \"green\",\n              lty = 2) +\n  geom_point(alpha = .4) +\n  facet_wrap(~model) +\n  coord_fixed() +\n  labs (title = \"RF model predicts the diaomond prices more accurate than LM MOdel\", \n        subtitle = \"The diamond prices are log transformed\")"
  },
  {
    "objectID": "pnote/bsw_6.html",
    "href": "pnote/bsw_6.html",
    "title": "BSW : Financial Data Analysis",
    "section": "",
    "text": "An overview of financial data analysis.\nTidyquant -collect and analyse financial data, Zoo, quandmod, TTR, xts, performanceAnalytics."
  },
  {
    "objectID": "pnote/bsw_6.html#load-r-packages",
    "href": "pnote/bsw_6.html#load-r-packages",
    "title": "BSW : Financial Data Analysis",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\nShow the code\npacman::p_load(tidyverse, tidyquant, timetk)"
  },
  {
    "objectID": "pnote/bsw_6.html#acquire-data-source",
    "href": "pnote/bsw_6.html#acquire-data-source",
    "title": "BSW : Financial Data Analysis",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on fictitious data set provided with this lesson.\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nx"
  },
  {
    "objectID": "pnote/bsw_6.html#import-data",
    "href": "pnote/bsw_6.html#import-data",
    "title": "BSW : Financial Data Analysis",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Read Data into R\n\ncompany <- read_csv(\"data/SGCompany.csv\")\n\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Symbol\ndbl (1): marketcap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncompany\n\n# A tibble: 6 × 3\n  Name                  Symbol    marketcap\n  <chr>                 <chr>         <dbl>\n1 DBS Group             D05.SI  55459934603\n2 OCBC Bank             O39.SI  36748776904\n3 UOB                   U11.SI  31908845153\n4 Singtel               Z74.SI  30399495021\n5 Singapore Airlines    C6L.SI  11030367619\n6 CapitaLand Mall Trust C38U.SI 10479058731\n\n\n\n\nimporting singapore company\n\n\nShow the code\nStock_daily <- company %>%\n  select(Symbol) %>%\n  tq_get(get = \"stock.prices\",\n  from = \"2022-01-01\",\n  to = \"2022-12-31\")\n\n\nRemarks :\nBy default, it will source data from Yahoo Finance.\nWrangling stock data\n\n\nShow the code\nStock_data <- Stock_daily %>%\n  left_join(company)\n\n\nJoining with `by = join_by(Symbol)`\n\n\nTechnical Analysis - tidyquant methods\nplotting stock price line graph : ggplot method\n\n\nShow the code\nStock_data %>%\n filter(Name == \"DBS Group\") %>%\n ggplot(aes(x = date, y = close)) +\n geom_line() +\n labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\",\n y = \"Closing Price\", x = \"\") +\n theme_tq()\n\n\n\n\n\nvisualise stock price with timetk\n\n\nShow the code\nStock_data %>%\n  group_by(Name) %>%\n  plot_time_series(date, \n                   close,\n                   .facet_ncol = 2,\n                   .facet_scales = \"free\",\n                   .interactive = FALSE)\n\n\n\n\n\n\n\nShow the code\nStock_data %>%\n  group_by(Name) %>%\n  plot_time_series(date, \n                   close,\n                   .facet_ncol = 3,\n                   .facet_scales = \"free\",\n                   .interactive = TRUE)\n\n\n\n\n\n\n\n\nShow the code\nend <- as_date(\"2022-06-30\")\nstart <- end - weeks(2)\n\nStock_data %>%\n  filter(Name == \"DBS Group\") %>%\n  filter(date >= start - days(2 * 15)) %>%\nggplot(aes\n       (x = date,\n         y = close)) +\n  geom_candlestick(aes(open = open,\n                       high = high,\n                       low = low,\n                       close = close)) +\n  labs(title = \"Daily stock prices of DBS Group\") +\n  coord_x_date(xlim = c(start,end)) +\n  theme_tq()\n\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\n\nShow the code\nStock_data %>%\n  filter(Symbol == \"D05.SI\") %>%\n  filter(date >= start - days(2 * 15)) %>%\n  ggplot(aes(x = date, y = close)) +\n  geom_candlestick(aes(open = open, high = high, low = low, close = close)) +\n  geom_ma(ma_fun = SMA, \n          n = 5, \n          linetype = 5, \n          size = 1.25) +\n  geom_ma(ma_fun = SMA, \n          n = 15, \n          color = \"red\", \n          size = 1.25) +\n  labs(title = \"DBS Group Holdings Ltd Daily Stock Price\"\n,\n  subtitle = \"5 and 15-Day SMA\"\n,\n  y = \"Closing Price\"\n, x = \"\") +\n  coord_x_date(xlim = c(end - weeks(5), end)) +\n  theme_tq()\n\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\nShow the code\nStock_data %>%\n  filter(Name == \"DBS Group\") %>%\n  ggplot(aes(x = date, \n             y = close))+\n  geom_line(size = 0.5)+\n  geom_bbands(aes(high = high, low = low, close = close),\n  ma_fun = SMA, sd = 2, n = 5,\n  size = 0.75, \n  color_ma = \"royalblue4\",\n  color_bands = \"red1\") +\n  coord_x_date(xlim = c(\"2022-01-01\",\n                        \"2022-06-30\"),\n               expand = TRUE) +\n               labs(title = \"DBS Group Holdings Ltd \",\n               subtitle = \"dotted red lines = bollinger bands\",\n               x = \"Date\", \n               y = \"Close Price\") +\n    theme(legend.position = \"none\")\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, close\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\nShow the code\nstock_monthly_returns <- Stock_data %>%\n  group_by(Name) %>%\n  tq_transmute(select = adjusted,\n               mutate_fun = periodReturn,\n               period = \"monthly\",\n               type = \"arithmetic\")\n\nstock_monthly_returns\n\n\n# A tibble: 72 × 3\n# Groups:   Name [6]\n   Name      date       monthly.returns\n   <chr>     <date>               <dbl>\n 1 DBS Group 2022-01-31          0.0735\n 2 DBS Group 2022-02-28         -0.0392\n 3 DBS Group 2022-03-31          0.0594\n 4 DBS Group 2022-04-29         -0.0436\n 5 DBS Group 2022-05-31         -0.0776\n 6 DBS Group 2022-06-30         -0.0407\n 7 DBS Group 2022-07-29          0.0603\n 8 DBS Group 2022-08-31          0.0472\n 9 DBS Group 2022-09-30          0.0242\n10 DBS Group 2022-10-31          0.0243\n# … with 62 more rows\n\n\n\n\nShow the code\nstock_monthly_returns %>%\n  ggplot(aes(x = date,\n             y = monthly.returns,\n             fill = Name)) +\n  geom_col() +\n  geom_hline(yintercept = 0,\n             color = palette_light()[[1]]) +\n  labs(title = \"Monthly returns of the six selected stocks\",\n       subtitle = \"\",\n       y = \"Monthly Returns\", x = \"\") +\n  facet_wrap(~Name,\n            ncol = 2,\n            scales = \"free_y\") +\n  theme_tq() +\n  scale_fill_tq()\n\n\n\n\n\nPortfolio Analysis\n\n\nShow the code\nSGBank <- read_csv(\"data/SGBank.csv\")\n\n\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Symbol\ndbl (1): marketcap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nShow the code\nSGBank_daily <- SGBank %>%\n  select(Symbol) %>%\n  tq_get(get = \"stock.prices\",\n         from = \"2020-04-01\",\n         to = \"2022-06-30\")\n\n\n\n\nShow the code\nSGBank_returns_monthly <- SGBank_daily %>%\n  group_by(Symbol) %>%\n  tq_transmute(select = adjusted,\n  mutate_fun = periodReturn,\n  period = \"monthly\",\n  col_rename = \"Ra\")\n\n\n\n\nShow the code\nSGBank_returns_monthly\n\n\n# A tibble: 81 × 3\n# Groups:   Symbol [3]\n   Symbol date             Ra\n   <chr>  <date>        <dbl>\n 1 D05.SI 2020-04-30  0.120  \n 2 D05.SI 2020-05-29  0.00874\n 3 D05.SI 2020-06-30  0.0683 \n 4 D05.SI 2020-07-30 -0.0495 \n 5 D05.SI 2020-08-31  0.0646 \n 6 D05.SI 2020-09-30 -0.0460 \n 7 D05.SI 2020-10-30  0.0221 \n 8 D05.SI 2020-11-30  0.248  \n 9 D05.SI 2020-12-31  0.00119\n10 D05.SI 2021-01-29 -0.00198\n# … with 71 more rows\n\n\n\n\nShow the code\nwts <- c(0.4, 0.3, 0.3)\n\nporfolio_returns_monthly <- SGBank_returns_monthly %>%\n  tq_portfolio(assets_col = Symbol,\n               returns_col = Ra,\n               weights = wts,\n               col_rename = \"Ra\")\n\n\n\n\nShow the code\nggplot(data = porfolio_returns_monthly,\n       aes(x = date,\n           y = Ra)) +\n  geom_bar(stat = \"identity\",\n           fill = palette_light()[[1]]) +\n  labs(title = \"Porfoli Returns\",\n       subtitle = \"40% DBS, 30% OCBC and 30% UOB\",\n       caption = \"Shows an above zero trend meaning positive returns\",\n       x = \"\", \n       y = \"Monthly Returns\") +\n  geom_smooth(method = \"lm\") +\n  theme_tq() +\n  scale_color_tq() +\n  scale_y_continuous(labels = scales::percent)\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "pnote/error_shiny_test0.html",
    "href": "pnote/error_shiny_test0.html",
    "title": "Encountered Shiny Errors",
    "section": "",
    "text": "Error Message :\nError in func(fname, ...) : app.R did not return a shiny.appobj object.\nCause : Curly bracket is missing.\nExample : server <- function(input, output)\nSolution : server <- function(input, output) {}"
  },
  {
    "objectID": "pnote/note1.html",
    "href": "pnote/note1.html",
    "title": "Personal Note",
    "section": "",
    "text": "CHECKLIST - REMINDER!!!!!\n\n\n\n\n\n\nStart with a clear message or context?\nSuitability to have dual axis?\nDerive useful MEASURED FIELDS such as :\n\nrate\npercentage change (note : percentage point != percent)\nrevenue per customer against revenue\n\nCLARITY check\nUnnecessary GROUPING that reduce clarity\nDoes TEXTURE help to highlight main context?\nAESTHETIC check\n4 key aspects :\n2 types of visual analysis :"
  },
  {
    "objectID": "pnote/note1.html#distribution",
    "href": "pnote/note1.html#distribution",
    "title": "Personal Note",
    "section": "2.1 Distribution",
    "text": "2.1 Distribution\n\n\n\nunderstand distribution\nmeasure\nremark / note\n\n\n\n\nCentral Tendency\n\nmean\nmedian\nmode\n\nMean affected the most by outliers.\n\n\nDispersion\n\nrange\nquartiles\ninter-quartile range\nvariance\nstandard deviation\n\ninter-quartile range = differences between Q1 and Q3 == 50% of population lies within.\nvariance = average of the squared differences from the Mean.\nstandard deviation = is square root of variance.\n\n\nShape of Distribution\n\nskewness\nkurtosis\n\n\n\n\n\n\nnegative skewed curve = long left tail.\nmesokurtic = medium kurtosis (medium tails)\nplatykurtic = low kurtosis (thin). E.g. age of students from a school.\nleptokurtic = high kurtosis (fat)\n\n\n\n\n2.1.1 Kurtosis\nDefinition :\nKurtosis = measures the heaviness of a distribution’s tails relative to a normal distribution. Tails represent the probability or frequency of values that are extreme high or low from the mean. Tailedness is how often outliers occur.\n\n3 Types of Kurtosis2\n\n\n\nMesokurtic\nPlatykurtic\nLeptokurtic\n\n\n\n\nTailedness\nMedium-tailed\nThin-tailed\nFat-tailed\n\n\nOutlier frequency\nMedium\nLow\nHigh\n\n\nKurtosis\nModerate (3)\nLow (<3)\nHigh (>3)\n\n\nExcess kurtosis\n0\nNegative\nPositive\n\n\nExample distribution\nNormal\nUniform\nLaplace\n\n\n\n\n\n\n\n\n\n\n\ntopic\nmeasure / parameter / aspect\nCol3\n\n\n\n\npopulation distribution\ntotal population\nyoung population\nelderly population\nworking age population\nabsolute, percentage"
  },
  {
    "objectID": "pnote/tableauNote.html",
    "href": "pnote/tableauNote.html",
    "title": "Personal Note",
    "section": "",
    "text": "CHECKLIST - REMINDER!!!!!\n\n\n\n\n\n\nStart with a clear message or context?\nSuitability to have dual axis?\nDerive useful MEASURED FIELDS such as :\n\nrate\npercentage change (note : percentage point != percent)\nrevenue per customer against revenue\n\nCLARITY check\nUnnecessary GROUPING that reduce clarity\nDoes TEXTURE help to highlight main context?\nAESTHETIC check\n2 types of visual analysis :"
  },
  {
    "objectID": "pnote/tableauNote.html#component-terminology",
    "href": "pnote/tableauNote.html#component-terminology",
    "title": "Personal Note",
    "section": "1.1 Component & Terminology",
    "text": "1.1 Component & Terminology\n\n\n\n\n\n\n\nitem\nterm use by Tableau official\n\n\n\n\nterm - <field>\n2 types : measures, dimensions\n\n\nterm - “Columns” or “Rows”\nshelf\n\n\nterm - “Marks”\ncard\n\n\nterm - “Filter” 2nd column from left\nshelf\n\n\nterm - “Filter”right column\nfilter card settings to control the filter’s appearance and functionality.\n\n\nterm - “Data” or “Analytics”\npane\n\n\nicon - inverted triangle, next to “View Data” icon.\ndrop-down arrow\n\n\nwindow - “Create Parameter”\n“dialog box”\n\n\nsub-menu - 2nd level or drop down for field level.\n\nadd to hierarchy = context menus\n\n\ntext - location (region, state, city)\nnot “group” but “hierarchy”\n\n\nspace - <largest area of the workspace>\n“view”\n\n\nicons panel\n\n“toolbar”\n\n\ntext - Show Me\na list of common visualisation types, recommended visualisation type.\n\n\n\nRemarks :\n\nDimensions are fields that contain qualitative and descriptive values.1\n\nID fields are also dimensions.\nCan be organised into hierarchies.\nControl the level of aggregation of the measures in a visualisation.\n\nMeasures are fields that contain numeric, quantitative values that can be aggregated using sum or average functions\nToolbar to access commands, analysis and navigation tools.\nUse “Stepped Color”to group values into uniform bins of colour."
  },
  {
    "objectID": "pnote/tableauNote.html#create-parameter-calculated-field",
    "href": "pnote/tableauNote.html#create-parameter-calculated-field",
    "title": "Personal Note",
    "section": "1.2 Create Parameter / Calculated Field",
    "text": "1.2 Create Parameter / Calculated Field\nThe properties and instruction are from “Superstore” workbook from the Tableau Accelerators.\n\n\n\n\n\n\n\n\nparameters / calculated field\nrole\ninstruction / properties\n\n\n\n\np - Base Salary\n\nInteger, range, fixed,\n\n\np - Churn Rate\n\nFloat, 0.064, range, fixed\nmin = 0, max = 0.25, step size = 0.001\n\n\ncf - Days to Ship Actual\n\nDATEDIFF(‘day’,[Order Date],[Ship Date])\n\n\ncf - Days to Ship Scheduled\n\nCASE [Ship Mode]\nWHEN “Same Day” THEN 0\nWHEN “First Class” THEN 1\nWHEN “Second Class” THEN 3\nWHEN “Standard Class” THEN 6\nEND\n\n\ncf - Profit per Order\n\nSum([Profit]) / countD([Order ID])\n\n\ncf - Order Profitable?\n\n{fixed [Order ID]:sum([Profit])}>0\n// or\n{ FIXED [Order ID]: SUM([Profit]) } > 0\n// calculates the profit at the order level regardless of the dimensions.\n\n\ncf - Profit Ratio\n\nsum([Profit]) / sum([Sales])\n\n\ncf - Sales above target?\nMarks - Color\nIf Sum([Sales]) > SUM([Sales Target].[Sales Target]) then “Above Target” else “Below Target” end\n\n\ncf - Sales Forecast\nMarks - Detail\n[Sales]*(1-[Churn Rate])*(1+[New Business Growth])\n\n\ncf - Sales per Customer\n\nSum([Sales]) / countD([Customer Name])\n\n\ncf - Ship Status\n\nif [Days to Ship Actual]> [Days to Ship Scheduled] then “Shipped Late”\nelseIF [Days to Ship Actual]= [Days to Ship Scheduled] then “Shipped On Time”\nElse “Shipped Early” end\n\n\np - Sort by\n\nString, list, fixed\nvalue = % quota ascending, % quota descending, Names\n\n\n\nRemarks :\n\nUse // to add a single-line comment\nUse /* */ to add multi-line comment"
  },
  {
    "objectID": "pnote/tableauNote.html#attempts-on-executive-overview",
    "href": "pnote/tableauNote.html#attempts-on-executive-overview",
    "title": "Personal Note",
    "section": "2.1 Attempts on Executive Overview",
    "text": "2.1 Attempts on Executive Overview\nData : Tableau Superstore\nWorkbook : Explore Tableau to Create Executive Overview\n\n\n\nFigure 2.1 : Executive Overview for the Profitability of Superstore\n\n\n\n\n\nFigure 2.2 : Filtered specific state to shows the monthly sales."
  },
  {
    "objectID": "pnote/test0.html",
    "href": "pnote/test0.html",
    "title": "Explore with Geospatial Data",
    "section": "",
    "text": "Exploring R functions for visual analytics, and their applications."
  },
  {
    "objectID": "pnote/test0.html#load-r-packages",
    "href": "pnote/test0.html#load-r-packages",
    "title": "Explore with Geospatial Data",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, sf, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork, gplots)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test0.html#acquire-data-source",
    "href": "pnote/test0.html#acquire-data-source",
    "title": "Explore with Geospatial Data",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nNigeria water points dataset. Its a wrangled data from Geospatial Analytics module ."
  },
  {
    "objectID": "pnote/test0.html#read-rds-file",
    "href": "pnote/test0.html#read-rds-file",
    "title": "Explore with Geospatial Data",
    "section": "3.2 Read RDS file",
    "text": "3.2 Read RDS file\n\n\n\n\n\n\n\nwp_joined.sf <- read_rds(\"data/geodata/wp_joined.sf.rds\")\n\n\nwpt_functional.sf <- read_rds(\"data/geodata/wpt_functional.sf.rds\")\n\n\nwp_ngaTrim <- read_rds(\"data/geodata/wp_ngaTrim.rds\")"
  },
  {
    "objectID": "pnote/test0.html#create-data-samples",
    "href": "pnote/test0.html#create-data-samples",
    "title": "Explore with Geospatial Data",
    "section": "3.3 Create Data Samples",
    "text": "3.3 Create Data Samples\n\n3.3.1 Random 20 Rows with All Variables\n\n\nShow the code\nset.seed(12345)\ntest <- sample(wp_ngaTrim, 20)\n\ntest\n\n\nSimple feature collection with 761 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.6474 ymax: 13.89442\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n   pct_mechPump total_uc300 total_urban0 pct_urban0  pct_uc250 total_cs04\n1      82.35294           3            0   0.000000  0.0000000         10\n2      87.32394           9            4   5.633803  0.0000000         52\n3      59.64912          23           48  84.210526  0.0000000         33\n4      91.66667           4           40  83.333333  0.0000000         18\n5       9.44206         175          204  87.553648 15.4506438        206\n6      76.47059           8            7  20.588235  0.0000000         23\n7      70.58824          34            0   0.000000  0.8403361        109\n8      32.89474         102          145  95.394737  0.0000000        135\n9      65.15152          23           48  72.727273  0.0000000         22\n10     66.66667          13           21  53.846154  0.0000000         26\n   total_mechPump  pct_cs10 total_ps40                       geometry pct_uc300\n1              14 41.176471          0 MULTIPOLYGON (((7.401109 5.... 17.647059\n2              62 26.760563          0 MULTIPOLYGON (((7.334479 5.... 12.676056\n3              34 42.105263          0 MULTIPOLYGON (((7.045872 9.... 40.350877\n4              44 62.500000          0 MULTIPOLYGON (((7.811244 5....  8.333333\n5              22 11.587983          0 MULTIPOLYGON (((8.4109 6.28... 75.107296\n6              26 32.352941          0 MULTIPOLYGON (((3.143903 7.... 23.529412\n7              84  8.403361          0 MULTIPOLYGON (((3.301615 7.... 28.571429\n8              50 11.184211          0 MULTIPOLYGON (((8.153282 5.... 67.105263\n9              43 66.666667          0 MULTIPOLYGON (((7.321909 5.... 34.848485\n10             26 33.333333          0 MULTIPOLYGON (((6.669202 4.... 33.333333\n   total_ps19 wp_nonFunctional pct_nonFunctional total_cs10 total_handPump\n1           5                9          52.94118          7              2\n2           5               35          49.29577         19              7\n3          24               34          59.64912         24             23\n4          18               25          52.08333         30              4\n5          20               42          18.02575         27            102\n6           8               15          44.11765         11              5\n7           2               33          27.73109         10             20\n8           4               62          40.78947         17             91\n9          35               26          39.39394         44              1\n10         13               13          33.33333         13             12\n   total_uc1000 wp_unknown pct_cs04 total_ps09\n1            14          0 58.82353         12\n2            62          0 73.23944         66\n3            34          0 57.89474         33\n4            44          0 37.50000         30\n5            22          0 88.41202        213\n6            26          0 67.64706         26\n7            84          0 91.59664        117\n8            50          0 88.81579        148\n9            43          0 33.33333         31\n10           26          0 66.66667         26\n\n\n\n\n3.3.2 Random 20 Samples with Row Id Returned\n\n\nShow the code\nset.seed(12345)\ntest2 <- sample(1:nrow(wp_ngaTrim), 20)\n\ntest2\n\n\n [1] 142  51 720 730 220 664 605 587 352 216  86  75  38 615 465  40 286 257 724\n[20] 506\n\n\n\n\nShow the code\nwp_ngaTrim[test2,]\n\n\nSimple feature collection with 20 features and 43 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 4.133963 ymin: 4.869661 xmax: 13.88706 ymax: 12.83967\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n       shapeName                       geometry total_wp wp_functional\n142       Damban MULTIPOLYGON (((10.92966 11...       74            28\n51  Anambra East MULTIPOLYGON (((6.981355 6....       69            17\n720        Uruan MULTIPOLYGON (((8.008052 4....       48             8\n730       Warawa MULTIPOLYGON (((8.86303 11....      199           145\n220         Fika MULTIPOLYGON (((10.92982 11...       19            15\n664      Shendam MULTIPOLYGON (((9.621475 8....      428           113\n605 Orumba North MULTIPOLYGON (((7.146546 5....       66            13\n587    Ondo West MULTIPOLYGON (((4.998771 6....      161            55\n352      Irewole MULTIPOLYGON (((4.25219 7.4...      111            50\n216   Ezza South MULTIPOLYGON (((8.066542 6....      314           135\n    pct_functional wp_nonFunctional pct_nonFunctional wp_unknown pct_unknown\n142       37.83784               46          62.16216          0           0\n51        24.63768               16          23.18841          0           0\n720       16.66667               40          83.33333          0           0\n730       72.86432               54          27.13568          0           0\n220       78.94737                4          21.05263          0           0\n664       26.40187              109          25.46729          0           0\n605       19.69697               15          22.72727          0           0\n587       34.16149              106          65.83851          0           0\n352       45.04505               50          45.04505          0           0\n216       42.99363               60          19.10828          0           0\n    total_handPump total_mechPump total_tapStand pct_handPump pct_mechPump\n142             63             11              0     85.13514    14.864865\n51              33              0              0     47.82609     0.000000\n720              5             41              0     10.41667    85.416667\n730            194              5              0     97.48744     2.512563\n220              0             19              0      0.00000   100.000000\n664            193             29              0     45.09346     6.775701\n605              7             21              0     10.60606    31.818182\n587             83             78              0     51.55280    48.447205\n352             51             49              0     45.94595    44.144144\n216            180             15             12     57.32484     4.777070\n    pct_tapStand total_uc300 total_uc1000 total_uc250 total_uc50 total_ucN1000\n142     0.000000          63           11           0          0            63\n51      0.000000          69            0           0          0            69\n720     0.000000           5           41           2          0             7\n730     0.000000         194            5           0          0           194\n220     0.000000           0           19           0          0             0\n664     0.000000         399           29           0          0           399\n605     0.000000          45           21           0          0            45\n587     0.000000          83           78           0          0            83\n352     0.000000          62           49           0          0            62\n216     3.821656         287           15          12          0           299\n    pct_ucN1000 pct_uc300 pct_uc1000 pct_uc250 total_urban1 total_urban0\n142    85.13514  85.13514  14.864865  0.000000           22           52\n51    100.00000 100.00000   0.000000  0.000000            0           69\n720    14.58333  10.41667  85.416667  4.166667            1           47\n730    97.48744  97.48744   2.512563  0.000000            3          196\n220     0.00000   0.00000 100.000000  0.000000            1           18\n664    93.22430  93.22430   6.775701  0.000000           38          390\n605    68.18182  68.18182  31.818182  0.000000            7           59\n587    51.55280  51.55280  48.447205  0.000000           91           70\n352    55.85586  55.85586  44.144144  0.000000           60           51\n216    95.22293  91.40127   4.777070  3.821656           18          296\n    pct_urban1 pct_urban0 total_cs04 total_cs10 pct_cs04   pct_cs10\n142  29.729730   70.27027         30         44 40.54054 59.4594595\n51    0.000000  100.00000         37         32 53.62319 46.3768116\n720   2.083333   97.91667          8         40 16.66667 83.3333333\n730   1.507538   98.49246        176         23 88.44221 11.5577889\n220   5.263158   94.73684          7         12 36.84211 63.1578947\n664   8.878505   91.12150        220        208 51.40187 48.5981308\n605  10.606061   89.39394         29         37 43.93939 56.0606061\n587  56.521739   43.47826        123         38 76.39752 23.6024845\n352  54.054054   45.94595         90         21 81.08108 18.9189189\n216   5.732484   94.26752        313          1 99.68153  0.3184713\n    total_status1 total_status0 pct_stat1 pct_stat0 total_ps09 total_ps19\n142            28            46  37.83784  62.16216         30         44\n51             17            16  24.63768  23.18841         49         20\n720             8            40  16.66667  83.33333         13         35\n730           146            53  73.36683  26.63317        190          9\n220            15             4  78.94737  21.05263         10          9\n664           113           108  26.40187  25.23364        247        181\n605            14            14  21.21212  21.21212         40         26\n587            56           105  34.78261  65.21739        130         31\n352            50            50  45.04505  45.04505         92         19\n216           134            60  42.67516  19.10828        313          1\n    total_ps39 total_ps40 pct_ps09   pct_ps19 pct_ps39 pct_ps40\n142          0          0 40.54054 59.4594595        0        0\n51           0          0 71.01449 28.9855072        0        0\n720          0          0 27.08333 72.9166667        0        0\n730          0          0 95.47739  4.5226131        0        0\n220          0          0 52.63158 47.3684211        0        0\n664          0          0 57.71028 42.2897196        0        0\n605          0          0 60.60606 39.3939394        0        0\n587          0          0 80.74534 19.2546584        0        0\n352          0          0 82.88288 17.1171171        0        0\n216          0          0 99.68153  0.3184713        0        0"
  },
  {
    "objectID": "pnote/test0.html#create-data-frame-for-clustering-analysis",
    "href": "pnote/test0.html#create-data-frame-for-clustering-analysis",
    "title": "Explore with Geospatial Data",
    "section": "3.4 Create Data Frame for Clustering Analysis",
    "text": "3.4 Create Data Frame for Clustering Analysis\n\ncluster_vars <- wp_ngaTrim %>%\n  st_set_geometry(NULL) %>%\n  select(\"shapeName\",\n         \"total_wp\",\n         \"wp_functional\",\n         \"wp_nonFunctional\",\n         \"wp_unknown\",\n         \"pct_functional\", \n         \"pct_nonFunctional\",\n         \"pct_handPump\",\n         \"pct_mechPump\",\n         \"pct_tapStand\",\n         \"pct_uc300\",\n         \"pct_uc1000\",\n         \"pct_ucN1000\",\n         \"pct_uc250\",\n         \"pct_urban1\",\n         \"pct_urban0\",\n         \"pct_cs04\",\n         \"pct_cs10\",\n         \"pct_stat1\",\n         \"pct_stat0\",\n         \"pct_ps09\",\n         \"pct_ps19\")\n\nrow.names(cluster_vars) <- cluster_vars$shapeName\ncluster_vars <- cluster_vars %>%\n  select(-shapeName)"
  },
  {
    "objectID": "pnote/test0.html#plot-multiple-boxplots",
    "href": "pnote/test0.html#plot-multiple-boxplots",
    "title": "Explore with Geospatial Data",
    "section": "4.1 Plot Multiple Boxplots",
    "text": "4.1 Plot Multiple Boxplots\n\nggarrange(\n  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + \n     geom_boxplot(color=\"black\", fill=\"#19ff3fFF\")), \n  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff1919FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#FFA319FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff8419FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +\n      geom_boxplot(color=\"black\", fill=\"#ff5619FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +\n      geom_boxplot(color=\"black\", fill=\"#19beffFF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#C16622FF\"))),\n  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +\n      geom_boxplot(color=\"black\", fill=\"#543005FF\"))),\n   ncol = 2,\n  nrow = 4)"
  },
  {
    "objectID": "pnote/test0.html#plot-basic-boxplot",
    "href": "pnote/test0.html#plot-basic-boxplot",
    "title": "Explore with Geospatial Data",
    "section": "4.2 Plot Basic Boxplot",
    "text": "4.2 Plot Basic Boxplot\n\n4.2.1 with & without frame\n\nboxplot(cluster_vars$wp_functional,\n        cluster_vars$wp_nonFunctional,\n        frame = FALSE)\n\n\n\nboxplot(cluster_vars$wp_functional,\n        cluster_vars$wp_nonFunctional)\n\n\n\n\n\n\n4.2.2 change colour, name & direction\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = \"steelblue\",\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        col = \"steelblue\",\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\"),\n        names = c(\"uc50\", \"uc250\", \"uc300\", \"uc1000\")\n        )\n\n\n\nboxplot(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = \"steelblue\",\n        horizontal = TRUE\n        )\n\n\n\n\n\n\n4.2.3 plot with 2 characters + 1 continuous variable\n\n\nShow the code\nboxplot(pressure_score ~ water_tech_clean*usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE, \n        border = c(\"#E69F00\", \"#56B4E9\")\n        )\n\n\n\n\n\n\n\n4.2.4 add number of observations in each group\n\n\n\n\n\n\nUsage of the code chunk below :\nboxplot2( ) - gplots - to produce a boxplot annotated with the number of observations.\n\nboxplot2(pressure_score ~ usage_capacity, \n        data = wpt_functional.sf, \n        frame = FALSE,\n        shrink = 0.7,\n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\")\n        )"
  },
  {
    "objectID": "pnote/test0.html#plot-mixed-chart-with-functions",
    "href": "pnote/test0.html#plot-mixed-chart-with-functions",
    "title": "Explore with Geospatial Data",
    "section": "4.3 Plot Mixed Chart with Functions",
    "text": "4.3 Plot Mixed Chart with Functions\n\n4.3.1 Set Function\n\nhist_box_plot <- function(varname, title){ \n  \n  func1 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n  \n  func2 <- ggplot(data = cluster_vars, \n         aes(x = varname)) + \n    geom_boxplot(fill = \"steelblue\", \n                 color = \"black\") + \n    theme_classic() +\n    xlab(\"\") +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \nplot_grid(func1,\n          func2,\n          align = \"v\",\n          ncol = 1)\n}\n\n\n\n4.3.2 Plot Histogram & Box Plot\n\n\nShow the code\nhist_box_plot(cluster_vars$pct_nonFunctional, \"Non-Functional Water Point\")\n\n\n\n\n\n\n\n4.3.3 Set Function for Multiple Histograms\n\nhist_plot <- function(varname, title){\n  func3 <- ggplot(data = cluster_vars, \n       aes(x = varname)) + \n  geom_histogram(bins = 30,\n                 color = \"black\", \n                 fill = \"steelblue\") +\n  theme_classic() + \n  xlab(title)\n\n  func3\n}\n\n\n\n4.3.4 Plot Multiple Histograms\n\n\nShow the code\npct_functional <- hist_plot(cluster_vars$pct_functional, \"pct_functional\")\npct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, \"pct_nonFunctional\")\npct_handpump <- hist_plot(cluster_vars$pct_handPump, \"pct_handPump\")\npct_mechpump <- hist_plot(cluster_vars$pct_mechPump, \"pct_mechPump\")\npct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, \"pct_uc1000\")\npct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, \"pct_ucN1000\")\npct_urban0 <- hist_plot(cluster_vars$pct_urban0, \"pct_urban0\")\npct_stat1 <- hist_plot(cluster_vars$pct_stat1, \"pct_stat1\")\npct_cs10 <-hist_plot(cluster_vars$pct_cs10, \"pct_cs10\")\npct_ps19 <-hist_plot(cluster_vars$pct_ps19, \"pct_ps19\")\n\n\n\n\nShow the code\npct_functional + pct_nonfunctional +\n  pct_handpump + pct_mechpump +\n  pct_uc1000 + pct_ucN1000 +\n  pct_urban0 + pct_stat1 +\n  pct_cs10 + pct_ps19 +\n  plot_layout(ncol = 2)\n\n\n\n\n\n\n\n4.3.5 Set Function for Multiple Maps\n\nchoropleth_plot <- function(varname, style, title) {\n  tm_shape(wp_ngaTrim) +\n    tm_fill(varname, \n          n = 5,\n          style = style) +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = title,\n              main.title.size = 0.8,\n              main.title.position = \"center\",\n              legend.height = 3, \n              legend.width = 3,\n              legend.title.size = 0.8,\n              legend.text.size = 0.5,\n              frame = TRUE)+ \n    tm_compass(position = c('left','bottom'))\n}\n\n\n\n4.3.6 Plot Multiple Maps\n\n\nShow the code\ntmap_arrange(choropleth_plot(\"wp_functional\", \"quantile\", \n                \"Functional Water Point\"),\n             choropleth_plot(\"wp_nonFunctional\", \"quantile\", \n                \"Non-functional Water Point\"), \n             choropleth_plot(\"pct_functional\", \"quantile\", \n                \"Pct of functional water point\"),\n             choropleth_plot(\"pct_nonFunctional\", \"quantile\", \n                \"Pct of Non-functional water point\"),\n             choropleth_plot(\"pct_handPump\", \"quantile\", \n                \"Pct of Hand Pump Deployed\"),\n             choropleth_plot(\"pct_mechPump\", \"quantile\", \n                \"Pct of Mechanical Pump Deployed\"),\n             choropleth_plot(\"pct_urban0\", \"quantile\", \n                \"Pct of Water Point in Non-Urban Community\"),\n             choropleth_plot(\"pct_cs10\", \"quantile\", \n                \"Pct of Water Points with Crucialness > 0.6\"),\n             choropleth_plot(\"pct_ps19\", \"quantile\", \n                \"Pct of Water Points with Reaching Usage Limit\"),\n             ncol = 2,\n             heights = 5,\n             nrow = 5)"
  },
  {
    "objectID": "pnote/test0.html#compare-plots-of-before-and-after-data-standardisation",
    "href": "pnote/test0.html#compare-plots-of-before-and-after-data-standardisation",
    "title": "Explore with Geospatial Data",
    "section": "4.4 Compare Plots of Before and After Data Standardisation",
    "text": "4.4 Compare Plots of Before and After Data Standardisation\n\n4.4.1 Standardise Data\nAs shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.\n\n\n\n\n\n\n4.4.1.1 Standardise :: Min-Max Method\n\n\n\n\n\nShow the code\nwp_stdMM <- normalize(cluster_vars)\ndescribe(wp_stdMM)\n\n\nwp_stdMM \n\n 21  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      289        1   0.1386   0.1232  0.01344  0.02464 \n     .25      .50      .75      .90      .95 \n 0.05263  0.10750  0.18925  0.29563  0.37402 \n\nlowest : 0.000000000 0.001119821 0.002239642 0.003359462 0.004479283\nhighest: 0.621500560 0.671892497 0.743561030 0.867861142 1.000000000\n--------------------------------------------------------------------------------\nwp_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      198        1   0.0911  0.09632 0.005319 0.009309 \n     .25      .50      .75      .90      .95 \n0.023936 0.062500 0.117021 0.191489 0.289894 \n\nlowest : 0.000000000 0.001329787 0.002659574 0.003989362 0.005319149\nhighest: 0.664893617 0.691489362 0.785904255 0.857712766 1.000000000\n--------------------------------------------------------------------------------\nwp_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      140        1   0.1522   0.1416 0.003597 0.010791 \n     .25      .50      .75      .90      .95 \n0.050360 0.122302 0.219424 0.330935 0.402878 \n\nlowest : 0.000000000 0.003597122 0.007194245 0.010791367 0.014388489\nhighest: 0.615107914 0.636690647 0.658273381 0.776978417 1.000000000\n--------------------------------------------------------------------------------\npct_functional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1    0.507   0.2684   0.1591   0.2170 \n     .25      .50      .75      .90      .95 \n  0.3333   0.4792   0.6749   0.8611   0.9169 \n\nlowest : 0.00000000 0.01724138 0.03030303 0.05555556 0.06666667\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_nonFunctional \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      618        1   0.3654   0.2354  0.03012  0.08333 \n     .25      .50      .75      .90      .95 \n 0.22111  0.35593  0.50820  0.64444  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_handPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      619        1   0.4956   0.3721  0.00000  0.03125 \n     .25      .50      .75      .90      .95 \n 0.18605  0.52555  0.78571  0.92593  0.96000 \n\nlowest : 0.000000000 0.009009009 0.009523810 0.012987013 0.013333333\nhighest: 0.989898990 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_mechPump \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_tapStand \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       57    0.212  0.01792  0.03465  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.06681 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01757225\nhighest: 0.71373913 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_uc300 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1    0.612   0.3274  0.06818  0.14286 \n     .25      .50      .75      .90      .95 \n 0.40984  0.66447  0.87121  0.93939  0.96739 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.3818   0.3273  0.03000  0.05656 \n     .25      .50      .75      .90      .95 \n 0.12500  0.31933  0.58427  0.85417  0.93182 \n\nlowest : 0.000000000 0.005395683 0.005444646 0.008988764 0.009022556\nhighest: 0.981481481 0.984848485 0.985915493 0.990990991 1.000000000\n--------------------------------------------------------------------------------\npct_ucN1000 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      632        1   0.6182   0.3273  0.06818  0.14583 \n     .25      .50      .75      .90      .95 \n 0.41573  0.68067  0.87500  0.94344  0.97000 \n\nlowest : 0.000000000 0.009009009 0.014084507 0.015151515 0.018518519\nhighest: 0.990977444 0.991011236 0.994555354 0.994604317 1.000000000\n--------------------------------------------------------------------------------\npct_uc250 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0       68    0.248   0.0189   0.0364  0.00000  0.00000 \n     .25      .50      .75      .90      .95 \n 0.00000  0.00000  0.00000  0.00000  0.08444 \n\nlowest : 0.00000000 0.01121771 0.01427230 0.01468599 0.01575130\nhighest: 0.74017391 0.81066667 0.95000000 0.96849558 1.00000000\n--------------------------------------------------------------------------------\npct_urban1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.2605   0.3267   0.0000   0.0000 \n     .25      .50      .75      .90      .95 \n  0.0000   0.1283   0.4078   0.8182   1.0000 \n\nlowest : 0.000000000 0.003861004 0.006024096 0.006269592 0.007042254\nhighest: 0.986111111 0.989690722 0.990654206 0.991701245 1.000000000\n--------------------------------------------------------------------------------\npct_urban0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      447    0.975   0.7395   0.3267   0.0000   0.1818 \n     .25      .50      .75      .90      .95 \n  0.5922   0.8717   1.0000   1.0000   1.0000 \n\nlowest : 0.000000000 0.008298755 0.009345794 0.010309278 0.013888889\nhighest: 0.992957746 0.993730408 0.993975904 0.996138996 1.000000000\n--------------------------------------------------------------------------------\npct_cs04 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.6682   0.2774   0.1786   0.3016 \n     .25      .50      .75      .90      .95 \n  0.5294   0.7297   0.8646   0.9491   0.9754 \n\nlowest : 0.00000000 0.03030303 0.03571429 0.05263158 0.05555556\nhighest: 0.99193548 0.99305556 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_cs10 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      612        1   0.3318   0.2774  0.02462  0.05091 \n     .25      .50      .75      .90      .95 \n 0.13542  0.27027  0.47059  0.69841  0.82143 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.006944444 0.008064516\nhighest: 0.944444444 0.947368421 0.964285714 0.969696970 1.000000000\n--------------------------------------------------------------------------------\npct_stat1 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      623        1   0.5165   0.2642   0.1724   0.2267 \n     .25      .50      .75      .90      .95 \n  0.3391   0.4828   0.6866   0.8667   0.9206 \n\nlowest : 0.00000000 0.03030303 0.05555556 0.06666667 0.07692308\nhighest: 0.98701299 0.99029126 0.99099099 0.99593496 1.00000000\n--------------------------------------------------------------------------------\npct_stat0 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      620        1   0.3678   0.2329  0.04545  0.09091 \n     .25      .50      .75      .90      .95 \n 0.22111  0.36129  0.50847  0.64706  0.72727 \n\nlowest : 0.000000000 0.004065041 0.009009009 0.009708738 0.012987013\nhighest: 0.852941176 0.857142857 0.864864865 0.878787879 1.000000000\n--------------------------------------------------------------------------------\npct_ps09 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.7366   0.2419   0.2941   0.4242 \n     .25      .50      .75      .90      .95 \n  0.6180   0.7895   0.9112   0.9753   0.9942 \n\nlowest : 0.00000000 0.09090909 0.09523810 0.10526316 0.11111111\nhighest: 0.99418605 0.99468085 0.99681529 0.99820144 1.00000000\n--------------------------------------------------------------------------------\npct_ps19 \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     761        0      595        1   0.2634   0.2419 0.005814 0.024725 \n     .25      .50      .75      .90      .95 \n0.088803 0.210526 0.382022 0.575758 0.705882 \n\nlowest : 0.000000000 0.001798561 0.003184713 0.005319149 0.005813953\nhighest: 0.888888889 0.894736842 0.904761905 0.909090909 1.000000000\n--------------------------------------------------------------------------------\n\nVariables with all observations missing:\n\n[1] wp_unknown\n\n\n\n4.4.1.2 Standardise :: Z-score Method\n\n\nShow the code\nwp_stdZ <- scale(cluster_vars)\ndescribe(wp_stdZ)\n\n\nwp_stdZ \n\n 21  Variables      761  Observations\n--------------------------------------------------------------------------------\ntotal_wp \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        289          1 -3.697e-17      1.009    -1.0251 \n       .10        .25        .50        .75        .90        .95 \n   -0.9334    -0.7042    -0.2550     0.4143     1.2853     1.9271 \n\nlowest : -1.135121 -1.125952 -1.116784 -1.107616 -1.098447\nhighest:  3.953333  4.365910  4.952687  5.970378  7.052247\n--------------------------------------------------------------------------------\nwp_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       198         1 3.739e-17     0.892   -0.7944   -0.7574 \n      .25       .50       .75       .90       .95 \n  -0.6220   -0.2649    0.2400    0.9296    1.8408 \n\nlowest : -0.8436052 -0.8312915 -0.8189779 -0.8066643 -0.7943506\nhighest:  5.3132110  5.5594836  6.4337515  7.0986877  8.4162463\n--------------------------------------------------------------------------------\nwp_nonFunctional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       140         1 4.166e-17     1.063   -1.1158   -1.0618 \n      .25       .50       .75       .90       .95 \n  -0.7647   -0.2244    0.5050    1.3424    1.8827 \n\nlowest : -1.142840 -1.115827 -1.088813 -1.061800 -1.034786\nhighest:  3.476478  3.638560  3.800641  4.692088  6.366929\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 4.094e-17     1.142   -1.4794   -1.2332 \n      .25       .50       .75       .90       .95 \n  -0.7384   -0.1182    0.7143    1.5062    1.7435 \n\nlowest : -2.155978 -2.082654 -2.027105 -1.919710 -1.872456\nhighest:  2.041621  2.055563  2.058539  2.079565  2.096853\n--------------------------------------------------------------------------------\npct_nonFunctional \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        618          1 -1.201e-18      1.139   -1.62178 \n       .10        .25        .50        .75        .90        .95 \n  -1.36438   -0.69793   -0.04573    0.69082    1.34989    1.75056 \n\nlowest : -1.767485 -1.747821 -1.723906 -1.720521 -1.704663\nhighest:  2.358458  2.378783  2.416136  2.483486  3.069827\n--------------------------------------------------------------------------------\npct_handPump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       619         1 3.424e-18     1.151   -1.5333   -1.4366 \n      .25       .50       .75       .90       .95 \n  -0.9577    0.0927    0.8977    1.3315    1.4369 \n\nlowest : -1.533321 -1.505447 -1.503854 -1.493139 -1.492068\nhighest:  1.529392  1.532834  1.543799  1.543951  1.560645\n--------------------------------------------------------------------------------\npct_mechPump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_tapStand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         57      0.212 -1.375e-17      0.366    -0.1892 \n       .10        .25        .50        .75        .90        .95 \n   -0.1892    -0.1892    -0.1892    -0.1892    -0.1892     0.5165 \n\nlowest : -0.189230605 -0.070747233 -0.038484155 -0.034114693 -0.003629485\nhighest:  7.349402711  8.373167729  9.844829943 10.040183334 10.372938392\n--------------------------------------------------------------------------------\npct_uc300 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 1.044e-16     1.129   -1.8754   -1.6179 \n      .25       .50       .75       .90       .95 \n  -0.6971    0.1811    0.8940    1.1292    1.2257 \n\nlowest : -2.110525 -2.079456 -2.061952 -2.058272 -2.046660\nhighest:  1.307070  1.307186  1.319409  1.319578  1.338186\n--------------------------------------------------------------------------------\npct_uc1000 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        632          1 -9.074e-17      1.126    -1.2109 \n       .10        .25        .50        .75        .90        .95 \n   -1.1195    -0.8839    -0.2150     0.6970     1.6260     1.8933 \n\nlowest : -1.314196 -1.295623 -1.295455 -1.283255 -1.283139\nhighest:  2.064252  2.075842  2.079515  2.096986  2.127997\n--------------------------------------------------------------------------------\npct_ucN1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       632         1 8.177e-17     1.126   -1.8933   -1.6260 \n      .25       .50       .75       .90       .95 \n  -0.6970    0.2150    0.8839    1.1195    1.2109 \n\nlowest : -2.127997 -2.096986 -2.079515 -2.075842 -2.064252\nhighest:  1.283139  1.283255  1.295455  1.295623  1.314196\n--------------------------------------------------------------------------------\npct_uc250 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0         68      0.248 -1.784e-17     0.3815    -0.1982 \n       .10        .25        .50        .75        .90        .95 \n   -0.1982    -0.1982    -0.1982    -0.1982    -0.1982     0.6870 \n\nlowest : -0.19815792 -0.08057390 -0.04855572 -0.04421942 -0.03305290\nhighest:  7.56034230  8.29924709  9.75973857  9.95360912 10.28383839\n--------------------------------------------------------------------------------\npct_urban1 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        447      0.975 -6.883e-17      1.038    -0.8274 \n       .10        .25        .50        .75        .90        .95 \n   -0.8274    -0.8274    -0.4200     0.4677     1.7713     2.3488 \n\nlowest : -0.8274464 -0.8151828 -0.8083123 -0.8075325 -0.8050784\nhighest:  2.3046972  2.3160670  2.3191273  2.3224529  2.3488119\n--------------------------------------------------------------------------------\npct_urban0 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       447     0.975 6.197e-17     1.038   -2.3488   -1.7713 \n      .25       .50       .75       .90       .95 \n  -0.4677    0.4200    0.8274    0.8274    0.8274 \n\nlowest : -2.3488119 -2.3224529 -2.3191273 -2.3160670 -2.3046972\nhighest:  0.8050784  0.8075325  0.8083123  0.8151828  0.8274464\n--------------------------------------------------------------------------------\npct_cs04 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -1.878e-16      1.108    -1.9559 \n       .10        .25        .50        .75        .90        .95 \n   -1.4645    -0.5543     0.2459     0.7847     1.1223     1.2273 \n\nlowest : -2.669279 -2.548221 -2.526603 -2.459020 -2.447339\nhighest:  1.293410  1.297885  1.312904  1.318442  1.325627\n--------------------------------------------------------------------------------\npct_cs10 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        612          1 -9.464e-17      1.108    -1.2273 \n       .10        .25        .50        .75        .90        .95 \n   -1.1223    -0.7847    -0.2459     0.5543     1.4645     1.9559 \n\nlowest : -1.325627 -1.318442 -1.312904 -1.297885 -1.293410\nhighest:  2.447339  2.459020  2.526603  2.548221  2.669279\n--------------------------------------------------------------------------------\npct_stat1 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       623         1 9.351e-17     1.143   -1.4879   -1.2529 \n      .25       .50       .75       .90       .95 \n  -0.7672   -0.1457    0.7357    1.5146    1.7480 \n\nlowest : -2.233545 -2.102491 -1.993279 -1.945226 -1.900869\nhighest:  2.035083  2.049261  2.052287  2.073668  2.091249\n--------------------------------------------------------------------------------\npct_stat0 \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       761          0        620          1 -3.749e-17      1.137   -1.57335 \n       .10        .25        .50        .75        .90        .95 \n  -1.35146   -0.71590   -0.03157    0.68693    1.36344    1.75502 \n\nlowest : -1.795246 -1.775402 -1.751268 -1.747852 -1.731849\nhighest:  2.368481  2.388992  2.426688  2.494655  3.086365\n--------------------------------------------------------------------------------\npct_ps09 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 1.529e-16     1.081   -1.9769   -1.3955 \n      .25       .50       .75       .90       .95 \n  -0.5299    0.2363    0.7802    1.0665    1.1510 \n\nlowest : -3.291020 -2.884838 -2.865496 -2.820704 -2.794576\nhighest:  1.151002  1.153213  1.162749  1.168943  1.176979\n--------------------------------------------------------------------------------\npct_ps19 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      761         0       595         1 3.237e-18     1.081   -1.1510   -1.0665 \n      .25       .50       .75       .90       .95 \n  -0.7802   -0.2363    0.5299    1.3955    1.9769 \n\nlowest : -1.176979 -1.168943 -1.162749 -1.153213 -1.151002\nhighest:  2.794576  2.820704  2.865496  2.884838  3.291020\n--------------------------------------------------------------------------------\n\nVariables with all observations missing:\n\n[1] wp_unknown\n\n\nRemarks :\nComparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.\n\n\n\n\n\n4.4.2 Compare Distribution For Standardisation Method\n\n\n\n\n\n\nVisualise to determine which standardisation method provide the better output.\n\n\nShow the code\nggarrange(\n  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +\n    geom_density(color = \"black\", fill = \"#19ff3fFF\") + \n    ggtitle(\"Before Standardisation\")),\n  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +\n      geom_density(color = \"black\", fill = \"#19ff3fFF\") +\n      ggtitle(\"Min-Max Stdsn.\")),\n  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +\n     geom_density(color = \"black\", fill=\"#19ff3fFF\") +\n     ggtitle(\"Z-score Stdsn.\")),\n   ncol = 3)"
  },
  {
    "objectID": "pnote/test1.html",
    "href": "pnote/test1.html",
    "title": "Exploration 1 - Pareto Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges to plot secondary-axis :\n\n\n\n\n\nThe functions in ggplot2 transform the secondary axis one-to-one based on the primary axis. Hence, the scale of the secondary axis plot will not be accurate.\nResolve by transforming the secondary axis with a coefficient to match the scale with the primary axis.\n\n\n\n\n\n\n\n\n\nLack of interactive function :\n\n\n\n\n\nThe ggplot2 can only produce static charts.\nResolve by using plotly functions to allow readers to hover over the chart to reveal details for each plotted point."
  },
  {
    "objectID": "pnote/test1.html#load-r-packages",
    "href": "pnote/test1.html#load-r-packages",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)\n\n\nRemarks :\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.\nAlternate code chunk -\n\npackages = c('tidyverse', 'readxl', 'knitr', 'plotly')\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}"
  },
  {
    "objectID": "pnote/test1.html#summary-of-r-functions",
    "href": "pnote/test1.html#summary-of-r-functions",
    "title": "Exploration 1 - Pareto Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test1.html#base",
    "href": "pnote/test1.html#base",
    "title": "Exploration 1 - Pareto Chart",
    "section": "base :",
    "text": "base :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -"
  },
  {
    "objectID": "pnote/test1.html#acquire-data-source",
    "href": "pnote/test1.html#acquire-data-source",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on Tableau’s fictatious data set -\n\nDownload “Superstore” dataset for Tableau version 2020.3.\nRename the title to “superstore_2020.3”."
  },
  {
    "objectID": "pnote/test1.html#import-data",
    "href": "pnote/test1.html#import-data",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_xls( ) - readxl - to read excel into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the Excel file.\n\n\n\n\n\nShow the code\norders <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Orders\")\n\nproblems(orders)\n\n\n\n\nShow the code\nreturns <- read_xls(\"data/superstore_2020.3.xls\",\n                   sheet = \"Returns\")\n\nproblems(returns)\n\n\n\n\n3.2.1.2 inspect for missing value\n\n\nShow the code\nskim(orders)\n\n\n\nData summary\n\n\nName\norders\n\n\nNumber of rows\n9994\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n6\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOrder ID\n0\n1\n14\n14\n0\n5009\n0\n\n\nShip Mode\n0\n1\n8\n14\n0\n4\n0\n\n\nCustomer ID\n0\n1\n8\n8\n0\n793\n0\n\n\nCustomer Name\n0\n1\n7\n22\n0\n793\n0\n\n\nSegment\n0\n1\n8\n11\n0\n3\n0\n\n\nCountry/Region\n0\n1\n13\n13\n0\n1\n0\n\n\nCity\n0\n1\n4\n17\n0\n531\n0\n\n\nState\n0\n1\n4\n20\n0\n49\n0\n\n\nRegion\n0\n1\n4\n7\n0\n4\n0\n\n\nProduct ID\n0\n1\n15\n15\n0\n1862\n0\n\n\nCategory\n0\n1\n9\n15\n0\n3\n0\n\n\nSub-Category\n0\n1\n3\n11\n0\n17\n0\n\n\nProduct Name\n0\n1\n5\n127\n0\n1849\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRow ID\n0\n1\n4997.50\n2885.16\n1.00\n2499.25\n4997.50\n7495.75\n9994.00\n▇▇▇▇▇\n\n\nPostal Code\n11\n1\n55245.23\n32038.72\n1040.00\n23223.00\n57103.00\n90008.00\n99301.00\n▆▃▃▅▇\n\n\nSales\n0\n1\n229.86\n623.25\n0.44\n17.28\n54.49\n209.94\n22638.48\n▇▁▁▁▁\n\n\nQuantity\n0\n1\n3.79\n2.23\n1.00\n2.00\n3.00\n5.00\n14.00\n▇▅▁▁▁\n\n\nDiscount\n0\n1\n0.16\n0.21\n0.00\n0.00\n0.20\n0.20\n0.80\n▇▆▁▁▁\n\n\nProfit\n0\n1\n28.66\n234.26\n-6599.98\n1.73\n8.67\n29.36\n8399.98\n▁▁▇▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nOrder Date\n0\n1\n2017-01-03\n2020-12-30\n2019-06-26\n1236\n\n\nShip Date\n0\n1\n2017-01-07\n2021-01-05\n2019-06-29\n1334\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - between 2017 and 2020, 793 unique customers contributed to the sales volume of 5,009 orders for 1,862 products.\n\n\nShow the code\nskim(returns)\n\n\n\nData summary\n\n\nName\nreturns\n\n\nNumber of rows\n800\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReturned\n0\n1\n3\n3\n0\n1\n0\n\n\nOrder ID\n0\n1\n14\n14\n0\n296\n0\n\n\n\n\n\n\n\nShow the code\nsummary(unique(returns$Returned))\n\n\n   Length     Class      Mode \n        1 character character \n\n\nShow the code\nsummary(unique(returns$`Order ID`))\n\n\n   Length     Class      Mode \n      296 character character \n\n\nRemark :\nPreliminary data interpretation - there were 296 out of 5,009 orders returned."
  },
  {
    "objectID": "pnote/test1.html#data-wrangling",
    "href": "pnote/test1.html#data-wrangling",
    "title": "Exploration 1 - Pareto Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Join Data Frames\n\n\n\n\n\n\nCombine both data frames.\n\n3.3.1.1 join returns to orders\n\n\n\n\n\n\nUsage of the code chunk below :\nleft_join( ) - dplyr - to join the returns data frame to orders data frame by “Order ID” as the unique identifier.\n\n\n\n\n\nShow the code\nsummary(ss_ordersMgmt <- left_join(orders, \n                           returns,\n                        by = c('Order ID' = 'Order ID')\n                        ))\n\n\nWarning in left_join(orders, returns, by = c(`Order ID` = \"Order ID\")): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 19 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\n\n     Row ID       Order ID           Order Date                    \n Min.   :   1   Length:12420       Min.   :2017-01-03 00:00:00.00  \n 1st Qu.:2466   Class :character   1st Qu.:2018-05-28 00:00:00.00  \n Median :5095   Mode  :character   Median :2019-07-18 00:00:00.00  \n Mean   :4983                      Mean   :2019-05-13 14:10:46.96  \n 3rd Qu.:7419                      3rd Qu.:2020-06-08 00:00:00.00  \n Max.   :9994                      Max.   :2020-12-30 00:00:00.00  \n                                                                   \n   Ship Date                       Ship Mode         Customer ID       \n Min.   :2017-01-07 00:00:00.00   Length:12420       Length:12420      \n 1st Qu.:2018-06-01 00:00:00.00   Class :character   Class :character  \n Median :2019-07-23 12:00:00.00   Mode  :character   Mode  :character  \n Mean   :2019-05-17 12:07:39.13                                        \n 3rd Qu.:2020-06-10 00:00:00.00                                        \n Max.   :2021-01-05 00:00:00.00                                        \n                                                                       \n Customer Name        Segment          Country/Region         City          \n Length:12420       Length:12420       Length:12420       Length:12420      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    State            Postal Code       Region           Product ID       \n Length:12420       Min.   : 1040   Length:12420       Length:12420      \n Class :character   1st Qu.:24153   Class :character   Class :character  \n Mode  :character   Median :60623   Mode  :character   Mode  :character  \n                    Mean   :57418                                        \n                    3rd Qu.:90045                                        \n                    Max.   :99301                                        \n                    NA's   :11                                           \n   Category         Sub-Category       Product Name           Sales          \n Length:12420       Length:12420       Length:12420       Min.   :    0.444  \n Class :character   Class :character   Class :character   1st Qu.:   17.904  \n Mode  :character   Mode  :character   Mode  :character   Median :   55.392  \n                                                          Mean   :  233.629  \n                                                          3rd Qu.:  212.680  \n                                                          Max.   :22638.480  \n                                                                             \n    Quantity         Discount          Profit            Returned        \n Min.   : 1.000   Min.   :0.0000   Min.   :-6599.978   Length:12420      \n 1st Qu.: 2.000   1st Qu.:0.0000   1st Qu.:    1.970   Class :character  \n Median : 3.000   Median :0.1500   Median :    9.072   Mode  :character  \n Mean   : 3.785   Mean   :0.1544   Mean   :   28.996                     \n 3rd Qu.: 5.000   3rd Qu.:0.2000   3rd Qu.:   29.372                     \n Max.   :14.000   Max.   :0.8000   Max.   : 8399.976                     \n                                                                         \n\n\nRemark :\nThere were 12,420 items sold, as indicated by the variable lengths.\n\n\n3.2.1.2 explore and inspect\n\n\nShow the code\nfreq(ss_ordersMgmt$Returned)\n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n   var frequency percentage cumulative_perc\n1 <NA>      9194      74.03           74.03\n2  Yes      3226      25.97          100.00\n\n\nRemark :\n3,226 out of ordered 12,420 items, approximately 25.97% of items returned.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nGroup items first before summarising the count of “Returned”.\n\n3.3.2.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group orders by specific param.\nsummarise( ) - dplyr - to count the number of returned orders.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nreturned_subCat <- ss_ordersMgmt %>%\n  group_by(`Sub-Category`) %>%\n  summarise(`Returned` = n()) %>%\n  arrange(desc(`Returned`)) %>%\n  ungroup()\n\nreturned_subCat\n\n\n# A tibble: 17 × 2\n   `Sub-Category` Returned\n   <chr>             <int>\n 1 Binders            1938\n 2 Paper              1734\n 3 Furnishings        1151\n 4 Phones             1121\n 5 Storage            1022\n 6 Accessories         965\n 7 Art                 926\n 8 Chairs              802\n 9 Appliances          603\n10 Labels              423\n11 Tables              405\n12 Fasteners           292\n13 Envelopes           291\n14 Bookcases           263\n15 Supplies            243\n16 Machines            157\n17 Copiers              84\n\n\n\n\n\n\n\n\n3.3.3 Compute Cumulative Frequency\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nmutate( ) - dplyr - to compute new variables “cum_freq” and “cum”.\ncumsum( ) - base - to compute vector consists of cumulative sums elements.\n\n\n\n\n\nShow the code\ncf_subCat <- returned_subCat %>%\n  mutate(cum_freq = cumsum(Returned)) %>%\n  mutate(cum = cumsum(Returned)/sum(Returned))\n\ncf_subCat\n\n\n# A tibble: 17 × 4\n   `Sub-Category` Returned cum_freq   cum\n   <chr>             <int>    <int> <dbl>\n 1 Binders            1938     1938 0.156\n 2 Paper              1734     3672 0.296\n 3 Furnishings        1151     4823 0.388\n 4 Phones             1121     5944 0.479\n 5 Storage            1022     6966 0.561\n 6 Accessories         965     7931 0.639\n 7 Art                 926     8857 0.713\n 8 Chairs              802     9659 0.778\n 9 Appliances          603    10262 0.826\n10 Labels              423    10685 0.860\n11 Tables              405    11090 0.893\n12 Fasteners           292    11382 0.916\n13 Envelopes           291    11673 0.940\n14 Bookcases           263    11936 0.961\n15 Supplies            243    12179 0.981\n16 Machines            157    12336 0.993\n17 Copiers              84    12420 1"
  },
  {
    "objectID": "pnote/test1.html#pareto-chart",
    "href": "pnote/test1.html#pareto-chart",
    "title": "Exploration 1 - Pareto Chart",
    "section": "4.1 Pareto Chart",
    "text": "4.1 Pareto Chart\nIt is crucial to narrow down the 20% factor contributing to the 80% increment or drop in sales orders to avoid unnecessary waste of time and resources during preliminary decision-making for business development.\nHence, the Pareto chart is used to identify the 20% crucial factors and eliminates the 80% less crucial ones.\n\n4.1.1 Plot Static Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart and set the height of the bar to represent the actual returns counts.\ngeom_line( ) & geom_point - ggplot2 - to plot the line and scatter plot for the cumulative frequency of returned counts. The scatter plot helps identify each product’s cumulative frequency in a static chart.\nscale_y_continuous( ) - ggplot2 - to adjust the interval between the grid lines and to add a secondary y-axis to illustrate each product’s cumulative percentage of returns.\nThe secondary y-axis is based on a one-to-one transformation of the primary axis..\ntheme( ) - ggplot2 - to improve visibility by adjusting the plot’s background colour and grid lines.\n\n\n\n\n\nShow the code\nggplot(data = cf_subCat,\n       aes(x = reorder(`Sub-Category`,\n                       -`Returned`))) +\n  geom_col(aes(y = `Returned`),\n           fill = 'salmon', \n           width = 0.8) +\n  geom_point(aes(y = `cum_freq`), \n             color = 'grey20', \n             size = 0.8) +\n  geom_line(\n    aes(y = `cum_freq`, \n        group = 1), \n    colour = 'grey20', \n    size = 0.4) +\n  labs(x = \"Sub-Category\", \n       title = \"Pareto Chart of returns by sub-category\") +\n  scale_y_continuous(name = 'Returns (absolute frequency)', \n                     breaks = seq(0, 3500, 300), \n                     minor_breaks = seq(0, 3500, 100),\n                     sec.axis = sec_axis(~.*1/sum(cf_subCat$Returned), \n                                         name = 'Cumulative Frequency', \n                                         breaks = seq(0, 1, \n                                                      by = 0.1), \n                                         labels = scales::percent)) +\n  geom_hline(yintercept = 0.8*sum(cf_subCat$Returned), \n             linetype = \"dashed\", \n             color = \"grey50\") +\n  geom_text(\n    aes(17,\n        0.8*sum(Returned),\n        label = \"80.0%\",\n        vjust = -0.5),\n    size = 2) +\n  theme(panel.background = element_rect(\n    fill = 'white', \n    colour = 'grey60',\n    size = 0.5,\n    linetype = 'solid'),\n    panel.grid.major = element_line(\n      size = 0.3, \n      linetype = 'solid', \n      colour = 'grey85'),\n    panel.grid.minor = element_line(\n      size = 0.2, \n      linetype = 'solid', \n      colour = 'grey90'),\n    text = element_text(\n      size = 5.5),\n    axis.ticks.x = element_blank()) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot Interactive Pareto Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to plot an interactive Pareto chart that allows to view corresponding cumulative percentage for each product when hover across the line or the bars .\n\n\n\n\n\nShow the code\nplot_ly(cf_subCat, \n        x = ~reorder(`Sub-Category`,\n                     -`Returned`), \n        y = ~`Returned`, \n        type = \"bar\", \n        name = \"Returned\") %>%\n  add_trace(x = ~reorder(`Sub-Category`,\n                         -`Returned`), \n            y = ~`cum`*100,\n            type = \"scatter\", \n            mode = \"lines\", \n            yaxis = \"y2\", \n            name = \"Cum. %\") %>%\n  layout(title = \"Pareto chart of returns by sub-category\",\n         xaxis = list(\n           title = \"Sub-Category\"),\n         yaxis = list(\n           title = \"Returned (Absolute Frequency)\", \n           showgrid = F),\n         yaxis2 = list(\n           overlaying = \"y\", \n           side = \"right\", \n           title = \"Cumulative Percentage (%)\", \n           range = list(0, 100)),\n         legend = list(orientation = \"h\", \n                       yanchor = \"bottom\", \n                       y = 0.9,\n                       xanchor = \"top\",\n                       x = 0.2)) \n\n\n\n\n\n\n\nRemark :\nInteractive chart makes the interpretation easier by showing the sub-categories that below 80%. -\nTherewith, eight (8) sub-categories, namely Binders, Paper, Furnishings, Phones, Storage, Accessories, Art, Chairs, are identified to account for 80% of the returned products."
  },
  {
    "objectID": "pnote/test2.html",
    "href": "pnote/test2.html",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "",
    "text": "This study explores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges in wrangling the raw data :\n\n\n\n\n\nThe age group variable, “AG”, is a character data type.\nIf it is used to plot the population pyramid, “10_to_14” will be parsed first instead of “5_to_9” after “0_to_4 is parsed.\nBecause of that, the order in the chart will be incorrect.\nResolve manually with these functions - mutate( ) and arrange( )."
  },
  {
    "objectID": "pnote/test2.html#load-r-packages",
    "href": "pnote/test2.html#load-r-packages",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggplot2)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test2.html#acquire-data-source",
    "href": "pnote/test2.html#acquire-data-source",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg."
  },
  {
    "objectID": "pnote/test2.html#import-data",
    "href": "pnote/test2.html#import-data",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Tableau Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_sgp <- read_csv(\"data/respopagesexfa2022.csv\")\n\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_sgp)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskim(pop_sgp)\n\n\n\nData summary\n\n\nName\npop_sgp\n\n\nNumber of rows\n75696\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nFA\n0\n1\n4\n13\n0\n6\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n53.89\n137.6\n0\n0\n0\n40\n2210\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.0\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - based on 2022 consensus data, ."
  },
  {
    "objectID": "pnote/test2.html#data-wrangling",
    "href": "pnote/test2.html#data-wrangling",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Compute Frequency Count\n\n\n\n\n\n\nCompute the frequency count by “age” and “sex”.\n\n3.3.1.1 compute returns by “Sub-category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_agSx <- pop_sgp %>%\n  group_by(`AG`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = order)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(pop_agSx)\n\n\n# A tibble: 6 × 3\n  AG       Sex      Count\n  <fct>    <chr>    <dbl>\n1 0_to_4   Females  87370\n2 0_to_4   Males    91170\n3 5_to_9   Females  98430\n4 5_to_9   Males   103530\n5 10_to_14 Females  99450\n6 10_to_14 Males   103350\n\n\n\n\n\n\n```{#| code-fold: false} pop_males <- t19_filtered %>% filter(sex %in% c(“Males”)) %>% mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01), res = str_c(count_pop, “,”, pct))\n{r} #| code-fold: false pop_females <- t19_filtered %>% filter(sex %in% c(“Females”)) %>% mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01), res = str_c(count_pop, “,”, pct))\n\n### 3.3.2 Create Smaller Data Frame\n\n#### 3.3.2.1 filter rows with head( ) function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest0 <- head(pop_sgp, 5000) %>%\n  select(-c(\"SZ\", \"FA\", \"Time\"))\n:::\n\n3.3.2.2 specify rows\n\n\nShow the code\ntest0_1 <- pop_sgp[c(1:5000),] %>%\n  select(-c(2,5,7))\n\n\n\n\n3.3.2.3 verify outputs\n\n\nShow the code\nquestionr::freq(test0 == test0_1)\n\n\n         n   % val%\nTRUE 20000 100  100\n\n\n\n\n\n3.3.3 Group Variables\n\n3.3.3.1 count population for Planning Area\n\n\nShow the code\ntest1 <- test0 %>%\n  group_by(`PA`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  ungroup()\n\nhead(test1)\n\n\n# A tibble: 3 × 2\n  PA          Count\n  <chr>       <dbl>\n1 Ang Mo Kio 161440\n2 Bedok      278870\n3 Bishan      56380\n\n\n\n\nShow the code\nth_test <- pop_sgp %>%\n  select(-c(\"SZ\", \"FA\", \"Time\")) %>%\n  group_by(`PA`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  ungroup()\n\n\n\n\nShow the code\narrange(th_test, desc(th_test$Count))\n\n\n# A tibble: 55 × 2\n   PA             Count\n   <chr>          <dbl>\n 1 Bedok         278870\n 2 Tampines      265610\n 3 Jurong West   258520\n 4 Sengkang      253050\n 5 Woodlands     252720\n 6 Hougang       227720\n 7 Yishun        222770\n 8 Choa Chu Kang 190460\n 9 Punggol       186250\n10 Bukit Batok   165310\n# … with 45 more rows\n\n\n\n\n3.3.3.2 count population by Planning Area & Gender\n\n\nShow the code\ntest1_1 <- test0 %>%\n  group_by(`PA`,`Sex`) %>%\n  summarise(`Count` = sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'PA'. You can override using the `.groups`\nargument.\n\n\nShow the code\nhead(test1_1)\n\n\n# A tibble: 6 × 3\n  PA         Sex      Count\n  <chr>      <chr>    <dbl>\n1 Ang Mo Kio Females  84340\n2 Ang Mo Kio Males    77100\n3 Bedok      Females 143760\n4 Bedok      Males   135110\n5 Bishan     Females  28880\n6 Bishan     Males    27500\n\n\n\n\n-- create new columns manually\n\n\nShow the code\ntest1_1$male <- test1_1$Sex == \"Males\"\ntest1_1$female <- test1_1$Sex == \"Females\"\n\nhead(test1_1)\n\n\n# A tibble: 6 × 5\n  PA         Sex      Count male  female\n  <chr>      <chr>    <dbl> <lgl> <lgl> \n1 Ang Mo Kio Females  84340 FALSE TRUE  \n2 Ang Mo Kio Males    77100 TRUE  FALSE \n3 Bedok      Females 143760 FALSE TRUE  \n4 Bedok      Males   135110 TRUE  FALSE \n5 Bishan     Females  28880 FALSE TRUE  \n6 Bishan     Males    27500 TRUE  FALSE \n\n\n\n\n-- create new columns with pivot_wider ( ) function\n\n\nShow the code\ntest1_2 <- test1_1 %>%\n  pivot_wider(id_cols = PA,\n              names_from = Sex,\n              values_from = Count)\n\nhead(test1_2)\n\n\n# A tibble: 3 × 3\n  PA         Females  Males\n  <chr>        <dbl>  <dbl>\n1 Ang Mo Kio   84340  77100\n2 Bedok       143760 135110\n3 Bishan       28880  27500\n\n\n\n\n\n3.3.4 Convert Row Names for Tibbles\nThe row.names( ) function is deprecated for Tibbles.\nHence, convert tbl_df to data.frame first with as.data.frame( ) function. Then, replace the row names with .rowNamesDF( ) function.\n\n3.3.4.1 convert to data.frame\nas.data.frame - base\n\n\nShow the code\ntest1_2.df <- as.data.frame(test1_2)\n\n\n\n\n3.3.4.2 replace row names\n.rowNamesDF - base\n\n\nShow the code\n.rowNamesDF(test1_2.df, make.names = FALSE) <- test1_2$PA\n\n\n\n\n-- remove “PA”\n\n\nShow the code\ntest1_2df <- test1_2.df[-(1)]"
  },
  {
    "objectID": "pnote/test2.html#plot-pyramid-chart",
    "href": "pnote/test2.html#plot-pyramid-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot Static Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npyramid_agSx <- ggplot(pop_agSx, \n                       aes(x = ifelse(Sex == \"Males\",\n                                      yes = -Count,\n                                      no = Count),\n                           y = AG,\n                           fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npyramid_agSx\n\n\n\n\n\n\n\n\n\n\n4.1.2 Interactive Pyramid Chart\n\n\n\n\n\n\n\n\nShow the code\nggplotly(pyramid_agSx, \n         session = \"knitr\")\n\n\n\n\n\n\nRemark :\nThe pyramid above shows the younger generation’s lower percentage, making Singapore’s population structure a constrictive type. That means an ageing population.\nBy June 2022, 4.07 million residents population with a median age of 42.1,1 which is approximately a 19% increase from the median age of 35.3 back in the year 20022.\nAlso, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore’s adjusted gender pay gap (GPG) is at 6%3.\nMeasures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions."
  },
  {
    "objectID": "pnote/test2.html#plot-bar-chart",
    "href": "pnote/test2.html#plot-bar-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.2 Plot Bar Chart",
    "text": "4.2 Plot Bar Chart\n\n\nShow the code\ntest1_1.mat <- as.matrix.data.frame(test1_1)\ntest1_2.mat <- as.matrix.data.frame(test1_2df)\n\n\n\n4.2.1 Explore Bar Plot\n\n\n4.2.1.1 graphics package\n\n\nShow the code\nbarplot(test1_2.mat,\n        horiz = TRUE, \n        names.arg = c(\"females\", \"males\"))\n\n\n\n\n\n\n4.2.1.2 ggplot2 package\n\n\nShow the code\ntest1_1.df <- data.frame(test1_1)\n\n\n\n\nShow the code\nggplot(data = test1_1.df, \n              aes(x = PA, \n                  y = Count)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\nShow the code\nggplot(data = test1_1.df, \n              aes(x = PA, \n                  y = Count)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip()\n\n\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"white\", border = \"steelblue\")\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"white\",\n        border = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = \"steelblue\")\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat, col = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\n\n\nShow the code\nbarplot(test1_2.mat,\n        col = \"steelblue\",\n        main = \"Population Gender\",\n        xlab = \"Gender\",\n        ylab = \"Count\"\n        )\n\n\n\n\n\n\n\n\n4.2.2 Stacked Bar Plots\n\n\nShow the code\nbarplot(test1_2.mat,\n        main = \"Population Count\",\n        font.main = 4,\n        col = c(\"lightblue\", \"mistyrose\", \"lightcyan\", \n                 \"lavender\", \"cornsilk\"),\n        legend = rownames(test1_2.mat))\n\n\n\n\n\n\n\n4.2.3 Grouped Bar Plots\nbeside = FALSE, stacked bar (output same as above); TRUE , juxtaposed bars.\n\n\nShow the code\nbarplot(test1_2.mat, \n        col = c(\"lightcyan\",\n                           \"lavender\",\n                           \"cornsilk\"),\n        legend = rownames(test1_2.mat),\n        args.legend = list(x = \"topright\"), \n        ylim = c(0,150000), \n        beside = TRUE)"
  },
  {
    "objectID": "pnote/test2.html#plot-line-chart",
    "href": "pnote/test2.html#plot-line-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.3 Plot Line Chart",
    "text": "4.3 Plot Line Chart\n\n\nShow the code\n# Create some variables\nx <- 1:10\ny1 <- x*x\ny2  <- 2*y1\n\n\n\n4.3.1 Plot Basic Line\n\n\nShow the code\n# Create a basic stair steps plot \nplot(x, y1, type = \"S\")\n\n\n\n\n\nShow the code\n# Show both points and line\nplot(x, y1, type = \"b\", pch = 19, \n     col = \"red\", xlab = \"x\", ylab = \"y\")\n\n\n\n\n\n\n\n4.3.2 Plot Multiple Lines\n\n\nShow the code\n# Create a first line\nplot(x, y1, type = \"b\", frame = FALSE, pch = 19, \n     col = \"red\", xlab = \"x\", ylab = \"y\")\n# Add a second line\nlines(x, y2, pch = 18, col = \"blue\", type = \"b\", lty = 2)\n# Add a legend to the plot\nlegend(\"topleft\", legend=c(\"Line 1\", \"Line 2\"),\n       col=c(\"red\", \"blue\"), lty = 1:2, cex=0.8)"
  },
  {
    "objectID": "pnote/test2.html#plot-pie-chart",
    "href": "pnote/test2.html#plot-pie-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.4 Plot Pie Chart",
    "text": "4.4 Plot Pie Chart\n\n\nShow the code\n#pie(x, labels = names(x), radius = 0.8)\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\ndf\n\n\n   group value\n1   Male    25\n2 Female    25\n3  Child    50\n\n\n\n4.4.1 Plot Basic Pie Chart\n\n\nShow the code\npie(df$value, labels = df$group, radius = 1)\n\n\n\n\n\n\n4.4.1.1 change colour\n\n\nShow the code\npie(df$value, labels = df$group, radius = 1,\n    col = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\n\n\n\n4.4.2 Plot 3D Pie Chart\nplotix::pie3D( )\n\n\nShow the code\n# 3D pie chart\nlibrary(\"plotrix\")\npie3D(df$value, labels = df$group, radius = 1.5, \n      col = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\n\n\n\n\n4.4.3 Explode 3D Pie Chart\n\n\nShow the code\n# Explode the pie chart\npie3D(df$value, labels = df$group, radius = 1.5,\n      col = c(\"#999999\", \"#E69F00\", \"#56B4E9\"),\n      explode = 0.1)"
  },
  {
    "objectID": "pnote/test2.html#plot-dot-chart",
    "href": "pnote/test2.html#plot-dot-chart",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.5 Plot Dot Chart",
    "text": "4.5 Plot Dot Chart\n\n4.5.1 Plot 1 Numeric Vector\n\n\nShow the code\nmtcars <- mtcars[order(mtcars$mpg), ]\n\ndotchart(x, labels = NULL, groups = NULL, \n         gcolor = par(\"fg\"), color = par(\"fg\"))\n\n\n\n\n\n\n\nShow the code\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         cex = 0.6, xlab = \"mpg\")\n\n\n\n\n\n\n4.5.1.1 separate vector by colour\n\n\nShow the code\n# Plot and color by groups cyl\ngrps <- as.factor(mtcars$cyl)\nmy_cols <- c(\"#999999\", \"#E69F00\", \"#56B4E9\")\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         groups = grps, gcolor = my_cols,\n         color = my_cols[grps],\n         cex = 0.6,  pch = 19, xlab = \"mpg\")\n\n\n\n\n\n\n\n\n4.5.2 Plot Matrix\n\n\nShow the code\ndotchart(VADeaths, cex = 0.6,\n         main = \"Death Rates in Virginia - 1940\")"
  },
  {
    "objectID": "pnote/test2.html#plot-group-means",
    "href": "pnote/test2.html#plot-group-means",
    "title": "Exploration 2 - Pyramid Chart",
    "section": "4.6 Plot Group Means",
    "text": "4.6 Plot Group Means\n\n\nShow the code\nhead(ToothGrowth)\n\n\n   len supp dose\n1  4.2   VC  0.5\n2 11.5   VC  0.5\n3  7.3   VC  0.5\n4  5.8   VC  0.5\n5  6.4   VC  0.5\n6 10.0   VC  0.5\n\n\n\n\nShow the code\nlibrary(gplots)\n\n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:plotrix':\n\n    plotCI\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\n\nShow the code\n# Plot the mean of teeth length by dose groups\nplotmeans(len ~ dose, data = ToothGrowth, frame = FALSE)\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"frame\" is not a\ngraphical parameter\n\n\nWarning in axis(1, at = 1:length(means), labels = legends, ...): \"frame\" is not\na graphical parameter\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"frame\" is not a\ngraphical parameter\n\n\n\n\n\n\n\nShow the code\n# Add mean labels (mean.labels = TRUE)\n# Remove line connection (connect = FALSE)\nplotmeans(len ~ dose, data = ToothGrowth, frame = FALSE,\n          mean.labels = TRUE, connect = FALSE)\n\n\nWarning in text.default(x, y, label = labels, col = col, ...): \"frame\" is not a\ngraphical parameter\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"frame\" is not a\ngraphical parameter\n\n\nWarning in axis(1, at = 1:length(means), labels = legends, ...): \"frame\" is not\na graphical parameter"
  },
  {
    "objectID": "pnote/test3.html",
    "href": "pnote/test3.html",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "",
    "text": "This study explores the interactivity and animation methods in designing an age-gender Pyramid chart using ggplot2 and supporting R packages between 2000 and 2020 at the planning area level.\n\n\n\n\n\n\nChallenges of interactive visualisation :\n\n\n\n\n\nThe study requires a certain level of data transformation and several widgets to create an interactive visualisation.\nTransform with filter( ) function, and add widgets via :\n\nplotly::hovermenu( ),\nplotly::updatemenus( ),\nplotly::layout-sliders( )."
  },
  {
    "objectID": "pnote/test3.html#load-r-packages",
    "href": "pnote/test3.html#load-r-packages",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggiraph, gganimate, gifski)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test3.html#summary-of-r-functions",
    "href": "pnote/test3.html#summary-of-r-functions",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\n\n\n\n\n\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test3.html#acquire-data-source",
    "href": "pnote/test3.html#acquire-data-source",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nSingapore Demographic & Geographic Distribution\n\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010” data set in csv format from Singstat.gov.sg.\nDownload “Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020” data set in csv format from Singstat.gov.sg.\n\n\n\n\n\n\n\n\nVariable Definition :\n\n\n\n\n\n“PA” = Planning Area\n“SZ” = Subzone\n“AG” = Age Group\n“Sex” = Gender\n“TOD” = Type of Dwelling\n“Pop” = Resident Count\n“Time” = Time / Period"
  },
  {
    "objectID": "pnote/test3.html#data-preparation",
    "href": "pnote/test3.html#data-preparation",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Import Data Sets\n\n\n\n\n\n\nThis section involves two(2) functions, i.e.\n\nimport CSV file as a table data frame that retains spec attribute.\ninspect parsing error, if any, when importing the data.\n\n\n\n\n\n\n\nimport these two(2) data sets separately to identify potential parsing errors.\n\n\n\n\n\n\n\n3.2.1.1 import CSV file :: demography between 2000 and 2010\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_0010 <- read_csv(\"data/respopagesextod2000to2010.csv\")\n\n\nRows: 1040592 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_0010)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 import CSV file :: demography between 2010 and 2020\n\n\nShow the code\npop_1020 <- read_csv(\"data/respopagesextod2011to2020.csv\")\n\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_1020)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.3 inspect imported data\n\n\n\n\n\n\nUsage of the code chunk below :\nglimpse( ) - dplyr - to get a glimpse of the imported data.\n\n\n\n\n\n-- pop_0010\n\n\nShow the code\nglimpse(pop_0010, 0)\n\n\nRows: 1,040,592\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\n\n\n-- pop_1020\n\n\nShow the code\nglimpse(pop_1020, 0)\n\n\nRows: 984,656\nColumns: 7\n$ PA   <chr> …\n$ SZ   <chr> …\n$ AG   <chr> …\n$ Sex  <chr> …\n$ TOD  <chr> …\n$ Pop  <dbl> …\n$ Time <dbl> …\n\n\nRemarks :\n\nBoth data sets do not have the same number of rows, i.e. pop_0010(1,040,592 rows) and pop_1020 (984,656 rows).\nData types for “Pop” and “Time” are in  format."
  },
  {
    "objectID": "pnote/test3.html#data-wrangling",
    "href": "pnote/test3.html#data-wrangling",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Combine Data Frames\n\n\n\n\n\n\nRows bind function will be used instead of the columns bind function as the imported data frames have an unequal number of rows.\nHowever, using rows bind function will create a data frame with file size above 100 MB which exceed the limit.\nHence, change both “Time” and “Pop” from dbl type to int type first.\n\n3.3.1.1 convert data type\n\n\n\n\n\n\nUsage of the code chunk below :\nas.integer( ) - base - to convert both Time and Pop from double object to integer object.\nmutate( ) - dplyr - to add the converted variables into the data frame.\n\n\n\n\n\nShow the code\npop_0010 <- pop_0010 %>% \n  mutate(Time = as.integer(pop_0010$Time)) %>%\n  mutate(Pop = as.integer(pop_0010$Pop))\n\npop_1020 <- pop_1020 %>% \n  mutate(Time = as.integer(pop_1020$Time)) %>%\n  mutate(Pop = as.integer(pop_1020$Pop))\n\n\n\n\n3.3.1.2 combine both data frames\n\n\n\n\n\n\nUsage of the code chunk below :\nrbind( ) - dplyr - to union two or more data frames by row.\n\n\n\n\n\nShow the code\npop_0020 <- rbind(pop_0010, pop_1020)\n\n\nRemarks :\nThe combined data frame file size is 92.7 MB.\n\n\n\n\n\n\n3.3.2 Compute Frequency Count\n\n\n\n\n\n\nTo compute frequency count, first group the variables.\n\n3.3.2.1 group variables\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age, gender, time and planning area.\nsummarise( ) - dplyr - to count the number of residents for each group.\n\n\n\n\n\nShow the code\nfreq_pop0020 <- pop_0020 %>%\n  group_by(`AG`, `Sex`, `Time`, `PA`) %>%\n  summarise(Count = sum(`Pop`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'AG', 'Sex', 'Time'. You can override using\nthe `.groups` argument.\n\n\n\n\n3.3.2.2 inspect combined data frame\n\n\n\n\n\n\nUsage of the code chunk below :\nkable( ) - knitr - to create tables in Markdown.\n\n\n\n\n\nShow the code\nkable(head(freq_pop0020,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n\n\n\n\n\n\n\n3.3.2.3 check data consistency\n\n\nShow the code\nfunModeling::freq(freq_pop0020$Time)\n\n\nRemarks :\nAs shown in the plot above, the data volume is not the same. There are four (4) different sets of data volume.\n\n\n\n\n\n\n3.3.2 Remove Planning Areas without Residents\n\n\n\n\n\n\nFirst identify the planning areas with 0 resident count.\n\n3.3.2.1 list “PA” without resident\n\n\n\n\n\n\nUsage of the code chunk below :\nselect( ) - dplyr - to select variables by “PA” and “Count”.\ngroup_by( ) - dplyr - to group “PA” variable.\nsummarise( ) - dplyr - to count the total number of residents from 2000 to 2020.\nfilter( ) - dplyr - to identify the planning areas with no residents.\n\n\n\n\n\nShow the code\nno_pop <- freq_pop0020 %>%\n  select(`PA`, `Count`) %>%\n  group_by(`PA`) %>%\n  summarise(`Total` = sum(`Count`)) %>%\n  filter(`Total` == 0) %>%\n  select(`PA`) %>%\n  ungroup\n\n\n\n\nShow the code\nquestionr::freq(no_pop)\n\n\n                        n   % val%\nBoon Lay                1 7.7  7.7\nBoon Lay/Pioneer        1 7.7  7.7\nCentral Water Catchment 1 7.7  7.7\nChangi Bay              1 7.7  7.7\nMarina East             1 7.7  7.7\nMarina South            1 7.7  7.7\nPaya Lebar              1 7.7  7.7\nPioneer                 1 7.7  7.7\nSimpang                 1 7.7  7.7\nStraits View            1 7.7  7.7\nTengah                  1 7.7  7.7\nTuas                    1 7.7  7.7\nWestern Islands         1 7.7  7.7\n\n\nRemarks :\n!!!!! why Paya Lebar dont have residents?\n\n\n3.3.2.2 convert variable to non-distributed vector\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - pbdDMAT - to converts a distributed matrix into a non-distributed vector.\n\n\n\n\n\nShow the code\nno_pop_list <- as.vector(no_pop$PA)\n\n\nRemarks :\n!!!!! what is distributed and non-distributed data? !!!!! why need to convert?\n\n\n3.3.2.3 remove “PA” without resident\n\n\nShow the code\npop_0020_trim <- freq_pop0020 %>%\n  filter(!PA %in% no_pop_list)\n\n\n\n\n3.3.2.4 inspect output\n\n\nShow the code\nunique(pop_0020_trim$PA[pop_0020_trim$Count == 0])\n\n\n [1] \"Lim Chu Kang\"            \"Museum\"                 \n [3] \"North-Eastern Islands\"   \"Southern Islands\"       \n [5] \"Orchard\"                 \"Seletar\"                \n [7] \"Punggol\"                 \"Downtown Core\"          \n [9] \"Western Water Catchment\" \"Changi\"                 \n[11] \"Singapore River\"         \"Mandai\"                 \n[13] \"Sungei Kadut\"            \"Newton\"                 \n[15] \"River Valley\"            \"Sembawang\"              \n[17] \"Tanglin\"                \n\n\nRemarks :\n!!!!!“PA” without residents are removed????\n\n\n\n\n\n\n3.3.3 Set Display Order & Layout\n\n\n\n\n\n\nThis section involves 2 parts, i.e. set the orders and the display layout.\n\n3.3.3.1 set the display order\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - base - to encode a vector a a factor.\narrange( ) - dplyr - to sort variable by descending order.\n\n\n\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npop_0020_sort <- pop_0020_trim %>%\n  mutate(AG = factor(AG,\n                     levels = order)) %>%\n  arrange(AG)\n\n\n\n\n3.3.3.2 set the display layout\n\n\n\n\n\n\nUsage of the code chunk below :\nifelse( ) - base - to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npop_0020_sort$nCount = ifelse(pop_0020_sort$Sex == \"Males\",\n                               yes = -pop_0020_sort$Count,\n                               no = pop_0020_sort$Count)\n\n\n\n\n-- inspect output\n\n\nShow the code\nkable(head(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n0_to_4\nFemales\n2000\nAng Mo Kio\n4460\n4460\n\n\n0_to_4\nFemales\n2000\nBedok\n7800\n7800\n\n\n\n\n\nShow the code\nkable(tail(pop_0020_sort,2))\n\n\n\n\n\nAG\nSex\nTime\nPA\nCount\nnCount\n\n\n\n\n90_and_over\nMales\n2020\nWoodlands\n190\n-190\n\n\n90_and_over\nMales\n2020\nYishun\n180\n-180"
  },
  {
    "objectID": "pnote/test3.html#plot-animated-pyramid-chart",
    "href": "pnote/test3.html#plot-animated-pyramid-chart",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "4.1 Plot Animated Pyramid Chart",
    "text": "4.1 Plot Animated Pyramid Chart\n\n4.1.1 Plot Population from 2000 to 2020\n\n\n\n\n\n\nFor this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using gganimate library, the static plot was converted into an animated pyramid via transition_time() and ease_aes() function. A moving subtitle was also included to relay the correct year information to the viewer.\n\n\n\n\n\n\nUsage of the code chunk below :\ntransition_time( ) - gganimate - to display the data that represented specific point in time.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\nanime_pyramid <- ggplot(pop_0020_sort,\n                        aes(x = nCount,\n                            y = AG, \n                            fill = Sex)) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, \n                                  150000, \n                                  50000), \n                     labels = paste0(\n                       as.character(c(seq(150, 0, -50),\n                                      seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age Group\", \n        title = 'Singapore Age-Gender Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\"))\n\n\n\n\nShow the code\nanime_pyramid + \n  transition_time(Time) +\n  ease_aes('linear') +\n  labs (subtitle = 'Year: {frame_time}')\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot by Year and Planning Location\n\n\n\n\n\n\nNext, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.\n\n4.1.2.1 define time & planning area\nDefine the time and planning area for each unique instance using a for loop.\n\n\nShow the code\nyear_list <- list()\nfor (i in 1:length(\n  unique(\n    pop_0020_sort$Time))) \n  {year_list[[i]] <- list(method = \"restyle\",\n                          args = list(\"transforms[0].value\",\n                                      unique(pop_0020_sort$Time)[i]),\n                          label = unique(pop_0020_sort$Time)[i])\n  }\n\nPA_list <- list()\nfor (j in 1:length(unique(pop_0020_sort$PA))) { \n  PA_list[[j]] <- list(method = \"restyle\",\n                        args = list(\"transforms[1].value\", \n                                    unique(pop_0020_sort$PA)[j]),\n                        label = unique(pop_0020_sort$PA)[j])\n  }\n\n\n\n\n4.1.2.2 define drop down menu\n\n\nShow the code\nannot <- list(\n  list(text = \"Select Planning Area:\",\n       x = 1.61,\n       y = 0.78,\n       xref = 'paper',\n       yref = 'paper',\n       showarrow = FALSE))\n\n\n\n\n4.1.2.3 plot with widget\nAn interactive graph was then generated using plotly(). A tooltip was added using the hovertemplate function to include age group, gender and population count.\nThe transforms - filter function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, layout - Updatemenus and layout - Sliders was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.\n\n\n\n\n\n\nUsage of the code chunk below :\nplot_ly( ) - plotly - to initiate a plotly visualisation.\n\n\n\n\n\nShow the code\nplot_ly(pop_0020_sort, \n        x = ~nCount, \n        y = ~AG,\n        type = 'bar', \n        orientation = 'h',\n        hovertemplate = ~paste(\"<br>Age Group:\", AG,\n                               \"<br>Gender:\", Sex,\n                               \"<br>Population:\", Count),\n        color = ~Sex,\n        colors = c(\"lightpink\", \"lightblue\"),\n        transforms = list(\n          list(type = 'filter',\n               target = ~Time,\n               operation = '=',\n               value = unique(pop_0020_sort$Time)[1]),\n          list(type = 'filter',\n               target = ~PA,\n               operation = '=',\n               value = unique(pop_0020_sort$PA)[1]))) %>%\n  layout(autosize = F, \n         bargap = 0.1, \n         barmode = 'overlay',\n         xaxis = list(\n           title = \"Population\",\n           tickmode = 'array', \n           tickvals = c(-10000, -8000, -6000, -4000, -2000, \n                        0, 2000, 4000, 6000, 8000, 10000),\n           ticktext = c('10k', '8k', '6k', '4k', '2k', '0',\n                        '2k', '4k', '6k', '8k', '10k')),\n         yaxis = list(\n           title = \"Age Group\"),\n         title = 'Singapore Age-Sex Population Pyramid',\n         updatemenus = list(\n           list(type = 'dropdown',\n                x = 1.6, \n                y = 0.7,\n                buttons = PA_list)),\n         sliders = list(\n           list(\n             active = 1,\n             currentvalue = list(prefix = \"Year: \"),\n             pad = list(t = 60),\n             steps = year_list)),\n         annotations = annot)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.\nHence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge."
  },
  {
    "objectID": "pnote/test3.html#tableau-vs.-r",
    "href": "pnote/test3.html#tableau-vs.-r",
    "title": "Exploration 3 - Interactive & Animated Pyramid Chart",
    "section": "5.1 Tableau vs. R",
    "text": "5.1 Tableau vs. R\n\nAnimations and interactivity in Tableau can easily be generated by a few clicks, whereas it requires more code and hence more tedious in R. However, this also means that visualisation in R is reproducible and repeatable as the steps can be traced back.\nR allows for more customisation of the visualisations as compared to Tableau. For example, the names widgets can be easily modified to detailed levels, whereas Tableau only takes in the data from the Table.\nThe animation in R may require more customisation to achieve less jerky animation as compared to Tableau."
  },
  {
    "objectID": "pnote/test4.html",
    "href": "pnote/test4.html",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "",
    "text": "This study explores the visualisation of multidimensional data from Starbucks drinks.\n!!!!! Questions\n\nhow missing data affect the plots?\n\n\n\n\n\n\n\nData Wrangling Challenges :\n\n\n\n\n\n\nSome values have a special character, “+”, while others are presented as range values.\nOnly specific drinks are duplicated.\n\nmanually remove the special character and use loop with ifelse( ) function to replace the range value with the max of range value.\n\n\n\n\n\n\n\n\n\nNormalise Character Type Variable :\n\n\n\n\n\nSince the nutritional value is different according to the sizes and volumes. Hence, the milk type and whipped cream must be normalised by volume before plotting the heatmap."
  },
  {
    "objectID": "pnote/test4.html#load-r-packages",
    "href": "pnote/test4.html#load-r-packages",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, ggplot2, ggcorrplot, corrplot, ggstatsplot, heatmaply, dendextend, parallelPlot, factoextra, psych)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test4.html#summary-of-r-functions",
    "href": "pnote/test4.html#summary-of-r-functions",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test4.html#acquire-data-source",
    "href": "pnote/test4.html#acquire-data-source",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\nKaggle Starbucks nutrition data set\n\nDownload “starbucks_drink.csv” data set."
  },
  {
    "objectID": "pnote/test4.html#import-data",
    "href": "pnote/test4.html#import-data",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\ndrink <- read_csv(\"data/starbucks_drink.csv\")\n\n\nRows: 2068 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Category, Name, Caffeine(mg), Size, Milk, Whipped Cream\ndbl (12): Portion(fl oz), Calories, Calories from fat, Total Fat(g), Saturat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(drink)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(drink,0)\n\n\nRows: 2,068\nColumns: 18\n$ Category                <chr> …\n$ Name                    <chr> …\n$ `Portion(fl oz)`        <dbl> …\n$ Calories                <dbl> …\n$ `Calories from fat`     <dbl> …\n$ `Total Fat(g)`          <dbl> …\n$ `Saturated fat(g)`      <dbl> …\n$ `Trans fat(g)`          <dbl> …\n$ `Cholesterol(mg)`       <dbl> …\n$ `Sodium(mg)`            <dbl> …\n$ `Total Carbohydrate(g)` <dbl> …\n$ `Dietary Fiber(g)`      <dbl> …\n$ `Sugars(g)`             <dbl> …\n$ `Protein(g)`            <dbl> …\n$ `Caffeine(mg)`          <chr> …\n$ Size                    <chr> …\n$ Milk                    <chr> …\n$ `Whipped Cream`         <chr> …\n\n\n\n\nShow the code\nskimr::skim(drink)\n\n\n\nData summary\n\n\nName\ndrink\n\n\nNumber of rows\n2068\n\n\nNumber of columns\n18\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n12\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCategory\n0\n1.00\n3\n29\n0\n10\n0\n\n\nName\n0\n1.00\n10\n54\n0\n119\n0\n\n\nCaffeine(mg)\n0\n1.00\n1\n6\n0\n76\n0\n\n\nSize\n12\n0.99\n4\n11\n0\n7\n0\n\n\nMilk\n271\n0.87\n6\n19\n0\n6\n0\n\n\nWhipped Cream\n813\n0.61\n9\n16\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPortion(fl oz)\n0\n1\n16.22\n5.64\n8\n12.0\n16.00\n20\n30.0\n▇▆▂▃▁\n\n\nCalories\n0\n1\n223.37\n136.72\n0\n117.5\n210.00\n320\n650.0\n▇▇▆▃▁\n\n\nCalories from fat\n0\n1\n55.33\n50.69\n0\n15.0\n40.00\n90\n240.0\n▇▃▂▁▁\n\n\nTotal Fat(g)\n0\n1\n6.13\n5.63\n0\n1.5\n4.50\n10\n27.0\n▇▃▂▁▁\n\n\nSaturated fat(g)\n0\n1\n3.51\n3.73\n0\n0.0\n2.25\n6\n18.0\n▇▃▁▁▁\n\n\nTrans fat(g)\n0\n1\n0.02\n0.09\n0\n0.0\n0.00\n0\n0.5\n▇▁▁▁▁\n\n\nCholesterol(mg)\n0\n1\n14.31\n17.48\n0\n0.0\n5.00\n25\n75.0\n▇▂▂▁▁\n\n\nSodium(mg)\n0\n1\n153.52\n103.18\n0\n70.0\n150.00\n230\n490.0\n▇▇▅▂▁\n\n\nTotal Carbohydrate(g)\n0\n1\n37.08\n23.39\n0\n19.0\n35.00\n53\n99.0\n▇▇▆▃▁\n\n\nDietary Fiber(g)\n0\n1\n0.85\n1.33\n0\n0.0\n0.00\n1\n7.0\n▇▁▁▁▁\n\n\nSugars(g)\n0\n1\n34.48\n22.31\n0\n17.0\n32.00\n49\n93.0\n▇▇▆▃▁\n\n\nProtein(g)\n0\n1\n5.18\n4.44\n0\n2.0\n4.00\n7\n19.0\n▇▆▂▂▁\n\n\n\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:5, 15:18)]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nPortion(fl oz)\nCalories\nCalories from fat\nCaffeine(mg)\nSize\nMilk\nWhipped Cream\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n160\n25\n40–60\nVenti Iced\nAlmond\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n35\n40–60\nVenti Iced\nCoconut\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n180\n0\n40–60\nVenti Iced\nNonfat milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n230\n50\n40–60\nVenti Iced\nWhole Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n35\n40\nVenti Iced\n2% Milk\nNA\n\n\ntea\nIced Teavana® London Fog Tea Latte\n24\n210\n25\n40–60\nVenti Iced\nSoy (United States)\nNA\n\n\n\n\n\n\n\nShow the code\nquestionr::freq(unique(drink$`Caffeine(mg)`))\n\n\n       n   % val%\n0      1 1.3  1.3\n0–15   1 1.3  1.3\n10     1 1.3  1.3\n100    1 1.3  1.3\n110    1 1.3  1.3\n115    1 1.3  1.3\n120    1 1.3  1.3\n125    1 1.3  1.3\n130    1 1.3  1.3\n140    1 1.3  1.3\n145    1 1.3  1.3\n15     1 1.3  1.3\n15–20  1 1.3  1.3\n15–25  1 1.3  1.3\n150    1 1.3  1.3\n155    1 1.3  1.3\n165    1 1.3  1.3\n170    1 1.3  1.3\n175    1 1.3  1.3\n180    1 1.3  1.3\n185    1 1.3  1.3\n190    1 1.3  1.3\n195    1 1.3  1.3\n20     1 1.3  1.3\n20–25  1 1.3  1.3\n200    1 1.3  1.3\n205    1 1.3  1.3\n215    1 1.3  1.3\n225    1 1.3  1.3\n235    1 1.3  1.3\n240    1 1.3  1.3\n25     1 1.3  1.3\n25–30  1 1.3  1.3\n25–40  1 1.3  1.3\n255    1 1.3  1.3\n260    1 1.3  1.3\n265    1 1.3  1.3\n270    1 1.3  1.3\n275    1 1.3  1.3\n280    1 1.3  1.3\n290    1 1.3  1.3\n30     1 1.3  1.3\n30–35  1 1.3  1.3\n300    1 1.3  1.3\n310    1 1.3  1.3\n315    1 1.3  1.3\n320    1 1.3  1.3\n330    1 1.3  1.3\n340    1 1.3  1.3\n35     1 1.3  1.3\n35–45  1 1.3  1.3\n360    1 1.3  1.3\n375    1 1.3  1.3\n40     1 1.3  1.3\n40–45  1 1.3  1.3\n40–60  1 1.3  1.3\n40+    1 1.3  1.3\n410    1 1.3  1.3\n425    1 1.3  1.3\n445    1 1.3  1.3\n45     1 1.3  1.3\n45–55  1 1.3  1.3\n475    1 1.3  1.3\n5–85   1 1.3  1.3\n50     1 1.3  1.3\n50–55  1 1.3  1.3\n55     1 1.3  1.3\n65     1 1.3  1.3\n70     1 1.3  1.3\n70–85  1 1.3  1.3\n75     1 1.3  1.3\n80     1 1.3  1.3\n85     1 1.3  1.3\n90     1 1.3  1.3\n90–110 1 1.3  1.3\n95     1 1.3  1.3\n\n\nShow the code\nquestionr::freq(unique(drink$`Trans fat(g)`))\n\n\n    n  % val%\n0   1 50   50\n0.5 1 50   50\n\n\nShow the code\nquestionr::freq(unique(drink$Size))\n\n\n            n    % val%\nGrande      1 12.5 14.3\nKids        1 12.5 14.3\nShort       1 12.5 14.3\nTall        1 12.5 14.3\nTrenta Iced 1 12.5 14.3\nVenti       1 12.5 14.3\nVenti Iced  1 12.5 14.3\nNA          1 12.5   NA\n\n\nShow the code\nquestionr::freq(unique(drink$Milk))\n\n\n                    n    % val%\n2% Milk             1 14.3 16.7\nAlmond              1 14.3 16.7\nCoconut             1 14.3 16.7\nNonfat milk         1 14.3 16.7\nSoy (United States) 1 14.3 16.7\nWhole Milk          1 14.3 16.7\nNA                  1 14.3   NA\n\n\nShow the code\nquestionr::freq(unique(drink$`Whipped Cream`))\n\n\n                 n  % val%\nNo Whipped Cream 1 20   25\nSweetened        1 20   25\nUnsweetened      1 20   25\nWhipped Cream    1 20   25\nNA               1 20   NA\n\n\n\n\nShow the code\nlength(drink$Name)\n\n\n[1] 2068\n\n\nShow the code\nquestionr::freq(drink$`Whipped Cream`)\n\n\n                   n    % val%\nNo Whipped Cream 539 26.1 42.9\nSweetened         90  4.4  7.2\nUnsweetened       92  4.4  7.3\nWhipped Cream    534 25.8 42.5\nNA               813 39.3   NA\n\n\nShow the code\nquestionr::freq(drink$Milk)\n\n\n                      n    % val%\n2% Milk             301 14.6 16.8\nAlmond              293 14.2 16.3\nCoconut             300 14.5 16.7\nNonfat milk         301 14.6 16.8\nSoy (United States) 301 14.6 16.8\nWhole Milk          301 14.6 16.8\nNA                  271 13.1   NA\n\n\nShow the code\nquestionr::freq(drink$Size)\n\n\n              n    % val%\nGrande      583 28.2 28.4\nKids         34  1.6  1.7\nShort       206 10.0 10.0\nTall        583 28.2 28.4\nTrenta Iced  73  3.5  3.6\nVenti       218 10.5 10.6\nVenti Iced  359 17.4 17.5\nNA           12  0.6   NA\n\n\n\n\nShow the code\ndrink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\n# A tibble: 242 × 19\n   Categ…¹ Name  Porti…² Calor…³ Calor…⁴ Total…⁵ Satur…⁶ Trans…⁷ Chole…⁸ Sodiu…⁹\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 iced-c… Cold…      12      50       0       0       0       0       0      25\n 2 iced-c… Cold…      12      50       0       0       0       0       0      25\n 3 iced-c… Cold…      16      80       0       0       0       0       0      30\n 4 iced-c… Cold…      16      80       0       0       0       0       0      30\n 5 iced-c… Cold…      24     100       0       0       0       0       0      40\n 6 iced-c… Cold…      24     100       0       0       0       0       0      40\n 7 iced-c… Cold…      30     130       0       0       0       0       0      45\n 8 iced-c… Cold…      30     130       0       0       0       0       0      45\n 9 iced-c… Iced…      12       0       0       0       0       0       0       0\n10 iced-c… Iced…      12       0       0       0       0       0       0       0\n# … with 232 more rows, 9 more variables: `Total Carbohydrate(g)` <dbl>,\n#   `Dietary Fiber(g)` <dbl>, `Sugars(g)` <dbl>, `Protein(g)` <dbl>,\n#   `Caffeine(mg)` <chr>, Size <chr>, Milk <chr>, `Whipped Cream` <chr>,\n#   dupe_count <int>, and abbreviated variable names ¹​Category,\n#   ²​`Portion(fl oz)`, ³​Calories, ⁴​`Calories from fat`, ⁵​`Total Fat(g)`,\n#   ⁶​`Saturated fat(g)`, ⁷​`Trans fat(g)`, ⁸​`Cholesterol(mg)`, ⁹​`Sodium(mg)`\n\n\nRemarks :\n\n“Caffein(mg)” variable consist of mixed values including absolute and values in range.\nThere are 121 rows of duplicated data.\nOut of 2,068 drinks, more than 10% of “Whipped Cream” and “Milk” are missing."
  },
  {
    "objectID": "pnote/test4.html#data-wrangling",
    "href": "pnote/test4.html#data-wrangling",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Edit “Caffeine(mg)” Variable\n\n\n\n\n\n\nFirst remove special character, then replace the range values with the maximum value.\n\n3.3.1.1 remove special character\nRemove special character from ‘40+’.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"][drink[\"Caffeine(mg)\"] == '40+'] <- '40'\n\n\n\n\n3.3.1.2 update with for-loop function\n\n\nShow the code\nfor (i in 1:nrow(drink)) {\n  drink[i, \"Caffeine(mg)\"] <- ifelse(\n    grepl(\"–\", \n          drink[i,\n                \"Caffeine(mg)\"]),\n    substr(drink[i, \n                 \"Caffeine(mg)\"],\n           nchar(\n             drink[i, \n                   \"Caffeine(mg)\"])-1,\n           nchar(\n             drink[i,\n                   \"Caffeine(mg)\"])),\n    drink[i, \n          \"Caffeine(mg)\"])\n  }\n\n\n\n\n3.3.1.3 convert variable type\nChange the variable to numeric data type.\n\n\nShow the code\ndrink[\"Caffeine(mg)\"] <- as.numeric(unlist(drink[\"Caffeine(mg)\"]))\n\n\n\n\nShow the code\nkable(tail(drink[,c(1:2, 15)],3))\n\n\n\n\n\nCategory\nName\nCaffeine(mg)\n\n\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\ntea\nIced Teavana® London Fog Tea Latte\n40\n\n\ntea\nIced Teavana® London Fog Tea Latte\n60\n\n\n\n\n\nRemarks :\n\n\n\n\n\n\n3.3.2 Remove Duplication\n\n\n\n\n\n\n3.3.2.1 filter duplicated data\n\n\n\n\n\nShow the code\nduplication <- drink %>% \n  janitor::get_dupes()\n\n\nNo variable names specified - using all columns.\n\n\nShow the code\nduplication <- duplication %>%\n  filter(duplicated(duplication) == TRUE)\n\n\n\n3.3.2.2 remove duplicated data\n\n\nShow the code\ndrink_clean <- drink[!duplicated(drink),]"
  },
  {
    "objectID": "pnote/test4.html#create-new-dataframe",
    "href": "pnote/test4.html#create-new-dataframe",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.4 Create New Dataframe",
    "text": "3.4 Create New Dataframe\n\n3.4.1 Create Dataframe by “Category” :: category_top4\n\n\n\n\n\n\nThis data frame will be used to compare differences in variables by “Category” via multiple correlogram under section xxx.\n\n3.4.1.1 filter top 4 “Category”\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - base - to group the orders by name.\nsummarise( ) - dplyr - to count the number of drinks for each “Category” and assign under “Total”.\narrange(desc( ) - base - to sort data in descending order.\ntop_n( ) - base - to retain only the four (4) “Category” with the highest “Total”.\n\n\n\n\n\nShow the code\ncategory_top4 <- drink %>%\n  group_by(`Category`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(4)\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(category_top4)\n\n\n\n\n\nCategory\nTotal\n\n\n\n\nespresso\n728\n\n\nfrappuccino-blended-beverages\n504\n\n\nkids-drinks-and-other\n262\n\n\ntea\n237\n\n\n\n\n\n\n\n3.4.1.2 create vector list\n\n\nShow the code\ncategory_top4.list <- as.vector(category_top4$Category)\n\n\n\n\n3.4.1.3 filter attribute data with vector list\n\n\nShow the code\ncategory_filtered <- drink %>%\n  filter(Category %in% category_top4.list)\n\n\n\n\n3.4.1.4 inspect filtered output\n\n\nShow the code\nunique(category_filtered$Category)\n\n\n[1] \"espresso\"                      \"frappuccino-blended-beverages\"\n[3] \"kids-drinks-and-other\"         \"tea\"                          \n\n\n\n\n\n\n\n\n3.4.2 Create Dataframe by “Name” :: name_top3\n\n\n\n\n\n\nThis dataframe will be used to ??\n\n3.4.2.1 filter top 3 “Names”\n\n\nShow the code\nname_top3 <- drink %>%\n  group_by(`Name`) %>%\n  summarise(Total = n()) %>%\n  arrange(desc(Total)) %>%\n  top_n(3) %>%\n  ungroup\n\n\nSelecting by Total\n\n\n\n\nShow the code\nkable(name_top3)\n\n\n\n\n\nName\nTotal\n\n\n\n\nIced Coffee with Milk\n94\n\n\nHot Chocolate\n60\n\n\nPumpkin Spice Crème\n60\n\n\n\n\n\n\n\n3.4.2.2 create vector list\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - base - to ???.\n\n\n\n\n\nShow the code\nname_top3.list <- as.vector(name_top3$Name)\n\n\n\n\n3.4.2.3 filter attribute data with vector list\n\n\nShow the code\nname_filtered <- drink %>%\n  filter(Name %in% name_top3.list)\n\n\n\n\n3.4.2.4 inspect filtered output\n\n\nShow the code\nunique(name_filtered$Name)\n\n\n[1] \"Iced Coffee with Milk\" \"Hot Chocolate\"         \"Pumpkin Spice Crème\"  \n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test4.html#data-normalisation",
    "href": "pnote/test4.html#data-normalisation",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "3.5 Data Normalisation",
    "text": "3.5 Data Normalisation\n\n3.5.1 Normalise category_filtered\n\n\n\n\n\n\nTo compare the category holistically, need to first group “Category”, “Name”, “Milk” and “Whipped Cream”. Then, normalise the drinks’ attributes by the volume, i.e. “Portion( fl oz)”.\n\n3.5.1.1 normalise nutritional-related variables\n\n\nShow the code\ncategory_norm <- category_filtered %>%\n  group_by(`Category`,\n           `Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Category', 'Name', 'Milk'. You can\noverride using the `.groups` argument.\n\n\n\n\n3.5.1.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\n\n\n\n\nUsage of the code chunk below :\npaste( ) - base - to update the drinks’ name.\n\n\n\n\n\nShow the code\ncategory_norm$Name_mw <- paste(\n  category_norm$Name, \n  category_norm$Milk, \n  category_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(category_norm[,c(1:3, 17)],3))\n\n\n\n\n\n\n\n\n\n\n\nCategory\nName\nMilk\nName_mw\n\n\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\n2% Milk\nIced Starbucks® Blonde Caffè Latte 2% Milk NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nAlmond\nIced Starbucks® Blonde Caffè Latte Almond NA\n\n\nespresso\nIced Starbucks® Blonde Caffè Latte\nCoconut\nIced Starbucks® Blonde Caffè Latte Coconut NA\n\n\n\n\n\n\n\n3.5.1.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_category <- category_norm %>%\n  select(c(1,5:16))\n\n\n\n\n3.5.1.4 replace row references with “Name_mw”\n\n\n\n\n\n\nUsage of the code chunk below :\nrow.names( ) - dplyr - to replace the row reference with the updated name.\n\n\n\n\n\nShow the code\nrow.names(corr_var_category) <- category_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.1.5 inspect output\n\n\nShow the code\nglimpse(corr_var_category, 70)\n\n\nRows: 498\nColumns: 13\n$ Category                   <chr> \"espresso\", \"espresso\", \"espresso…\n$ `Calories per oz)`         <dbl> 7.986111, 4.236111, 5.625000, 5.6…\n$ `Calories from fat per oz` <dbl> 2.638889, 2.256944, 2.986111, 0.0…\n$ `Total Fat(g/oz)`          <dbl> 0.2743056, 0.2500000, 0.3125000, …\n$ `Saturated fat(g/oz)`      <dbl> 0.149305556, 0.000000000, 0.31250…\n$ `Trans fat(g/oz)`          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `Cholesterol(mg/oz)`       <dbl> 1.1805556, 0.0000000, 0.0000000, …\n$ `Sodium(mg/oz)`            <dbl> 7.118056, 6.875000, 6.493056, 6.3…\n$ `Total Carbohydrate(g/oz)` <dbl> 0.7986111, 0.3888889, 0.5972222, …\n$ `Dietary Fiber(g/oz)`      <dbl> 0.00000000, 0.07638889, 0.0000000…\n$ `Sugars(g/oz)`             <dbl> 0.6875000, 0.2152778, 0.4861111, …\n$ `Protein(g/oz)`            <dbl> 0.50000000, 0.11111111, 0.0763888…\n$ `Caffeine(mg/oz)`          <dbl> 9.444444, 9.444444, 9.444444, 9.4…\n\n\n\n\n\n\n\n\n3.5.2 Normalise name_filtered\n\n\n\n\n\n\nIn order to study the nutritional value holistically, the toppings, i.e. milk and whipped cream will need to be normalised by the volume of drink.\n\n3.5.2.1 normalise nutritional-related variables\n\n\nShow the code\nname_norm <- name_filtered %>%\n  group_by(`Name`, \n           `Milk`, \n           `Whipped Cream`) %>%\n  summarise('Calories per oz)' = mean(`Calories`/`Portion(fl oz)`),\n            'Calories from fat per oz' = mean(`Calories from fat`/`Portion(fl oz)`),\n            'Total Fat(g/oz)' = mean(`Total Fat(g)`/`Portion(fl oz)`),\n            'Saturated fat(g/oz)' = mean(`Saturated fat(g)`/`Portion(fl oz)`),\n            'Trans fat(g/oz)' = mean(`Trans fat(g)`/`Portion(fl oz)`),\n            'Cholesterol(mg/oz)' = mean(`Cholesterol(mg)`/`Portion(fl oz)`),\n            'Sodium(mg/oz)' = mean(`Sodium(mg)`/`Portion(fl oz)`),\n            'Total Carbohydrate(g/oz)' = mean(`Total Carbohydrate(g)`/`Portion(fl oz)`),\n            'Dietary Fiber(g/oz)' = mean(`Dietary Fiber(g)`/`Portion(fl oz)`),\n            'Sugars(g/oz)' = mean(`Sugars(g)`/`Portion(fl oz)`),\n            'Protein(g/oz)' = mean(`Protein(g)`/`Portion(fl oz)`),\n            'Caffeine(mg/oz)' = mean(`Caffeine(mg)`/`Portion(fl oz)`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Name', 'Milk'. You can override using the\n`.groups` argument.\n\n\n\n\n3.5.2.2 combine “Name” with “Milk” and “Whipped Cream”\n\n\nShow the code\nname_norm$Name_mw <- paste(\n  name_norm$Name, \n  name_norm$Milk, \n  name_norm$`Whipped Cream`)\n\n\n\n\nShow the code\nkable(head(name_norm[,c(1:3, 16)],3))\n\n\n\n\n\n\n\n\n\n\n\nName\nMilk\nWhipped Cream\nName_mw\n\n\n\n\nHot Chocolate\n2% Milk\nNo Whipped Cream\nHot Chocolate 2% Milk No Whipped Cream\n\n\nHot Chocolate\n2% Milk\nWhipped Cream\nHot Chocolate 2% Milk Whipped Cream\n\n\nHot Chocolate\nAlmond\nNo Whipped Cream\nHot Chocolate Almond No Whipped Cream\n\n\n\n\n\nRemarks :\n!!!!! Should we introduce new variable “Name_mw” or stick to “Name” when the new value is combined between 3 vars’ value?\n\n\n3.5.2.3 filter variables for correlation matrix\n\n\nShow the code\ncorr_var_name <- name_norm %>%\n  select(c(4:15))\n\n\n\n\n3.5.2.4 replace row references with “Name_mw”\n\n\nShow the code\nrow.names(corr_var_name) <- name_norm$Name_mw\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\n3.5.2.5 inspect output\n\n\nShow the code\nglimpse(corr_var_name, 70)\n\n\nRows: 36\nColumns: 12\n$ `Calories per oz)`         <dbl> 20.866667, 26.833333, 15.866667, …\n$ `Calories from fat per oz` <dbl> 5.0000000, 10.0750000, 4.3583333,…\n$ `Total Fat(g/oz)`          <dbl> 0.56416667, 1.10666667, 0.5000000…\n$ `Saturated fat(g/oz)`      <dbl> 0.37000000, 0.67833333, 0.1250000…\n$ `Trans fat(g/oz)`          <dbl> 0.00000, 0.00500, 0.00000, 0.0000…\n$ `Cholesterol(mg/oz)`       <dbl> 1.74583333, 3.53750000, 0.0000000…\n$ `Sodium(mg/oz)`            <dbl> 10.083333, 10.641667, 9.441667, 1…\n$ `Total Carbohydrate(g/oz)` <dbl> 3.12416667, 3.33500000, 2.5350000…\n$ `Dietary Fiber(g/oz)`      <dbl> 0.250000000, 0.250000000, 0.34916…\n$ `Sugars(g/oz)`             <dbl> 2.69583333, 2.87416667, 1.9958333…\n$ `Protein(g/oz)`            <dbl> 0.87833333, 0.88833333, 0.2891666…\n$ `Caffeine(mg/oz)`          <dbl> 1.745833, 1.745833, 1.745833, 1.7…"
  },
  {
    "objectID": "pnote/test4.html#plot-correlogram",
    "href": "pnote/test4.html#plot-correlogram",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.1 Plot Correlogram",
    "text": "4.1 Plot Correlogram\n\n4.1.1 Plot with R Base\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npanel.cor( ) - xcms - to create correlation coefficient panel for pairs function.\n\npar( ) - graphics - to set or query graphical parameters.\n\nusr = a vector of the form c(x1, x2, y1, y2) giving the extremes of the user coordinates of the plotting region.\n\npar(“usr”) = useful command for custom plot with fixed features1. It allows objects to be placed within the plot window.\n\n\non.exit( ) - base - to set execution when the function exits naturally or due to error2. Use together with usr.\ncor( ) - stats - to returns a correlation data frame rather a matrix.\n\ncomplete.obs= correlations will be computed from complete observations, with an error being raised if there are no complete cases.3\n\nstrwidth( ) - graphics - to compute the width and height of the given strings txt.4\n\n\n\n\n\n\nShow the code\npanel.cor <- function(x, y, \n                      digits = 3, \n                      prefix = \"\",\n                      cex.cor)\n  {\n  usr <- par(\"usr\" = c(0, 1, 0, 1))\n  on.exit(par(usr))\n  \n  r <- abs(\n    cor(x, y, use = \"complete.obs\"))\n  \n  txt <- format(\n    c(r, 0.123456789),\n    digits = digits)[1]\n  \n  txt <- paste(prefix, \n               txt, \n               sep = \"\")\n  \n  if(missing(cex.cor))\n    cex.cor <- 0.8/strwidth(txt)\n  \n  text(0.5, 0.5, \n       txt, \n       cex = cex.cor*(1+r)/2)\n  }\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npairs( ) - graphics - to produce matrix of scatterplots.\n\n\n\n\n\nShow the code\npairs(corr_var_name,\n      upper.panel = panel.cor,\n      label.pos = 0.5, \n      line.main = 2,\n      cex.labels = 0.5, \n      font.labels = 0.5,\n      gap = 0.2)\n\n\n\n\n\n\n\n\n\n\n4.1.2 Plot with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nggcorrmat( ) - ggstatsplot - to visualise a correlation matrix.5\n\n\n\n\n\nShow the code\nggcorrmat(data = corr_var_name,\n  ggcorrplot.args = list(outline.color = \"white\", \n                         hc.order = TRUE,\n                         lab_col = \"black\",\n                         lab_size = 3,\n                         pch.col = \"red\",\n                         pch.cex = 6),\n  title = \"Nutrition Value for Top 3 Starbucks Drinks\",\n  ggplot.component = list(\n    theme_void(\n      base_size = 10),\n    theme(\n      plot.title = element_text(size = 12),\n      legend.text = element_text(size = 8),\n      axis.text.x = element_text(size = 8, \n                                 angle = 75, \n                                 hjust = 0.6),\n      axis.text.y = element_text(size = 8, \n                                 hjust = 1)\n      ))\n  )\n\n\n\n\n\nRemarks :\nAbove correlation plot is hc.ordered meaning using hierarchical function.\n“Trans fat(g/oz)” and “Dietary Fiber(g/oz)” has no significant at p < 0.05.\n\n\n\n\n\n4.1.3 Plot Multiple Correlogram with ggstatsplot package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngrouped_ggcorrmat( ) - ggstatsplot - a helper function to apply the function to visualise multiple correlation matrix.\n\n\n\n\n\nShow the code\ngrouped_ggcorrmat(\n    data = corr_var_category,\n    grouping.var = Category,\n    type = \"p\",\n    p.adjust.method = \"holm\",\n    plotgrid.args = list(ncol = 2),\n    ggcorrplot.args = list(outline.color = \"black\",\n                           lab_col = \"black\",\n                           lab_size = 1.5,\n                           pch.col = \"red\",\n                           pch.cex = 3),\n    annotation.args = list(\n      tag_levels = \"a\",\n      title = \"Correlation of Attributes for Starbucks Top 4 Drink Categories\",\n      subtitle = \"Top 4 categories : Espresso, Frapuccino blended beverages, Kids Drinks & Tea\"),\n    ggplot.component = list(\n      theme_void(base_size = 6),\n      theme(\n        plot.title = element_text(size = 6),\n        plot.subtitle = element_text(size = 3),\n        legend.text = element_text(size = 3),\n        axis.text.x = element_text(size = 3, \n                                   angle = 75, \n                                   hjust = 0.6),\n        axis.text.y = element_text(size = 3, \n                                   hjust = 1),\n        strip.text.x = element_text(size = 3),\n        legend.key.size = unit(3, 'mm')\n        ))\n    )\n\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\nWarning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n\n\n\n4.1.4 Plot with corrplot package\n\n\n\n\n\n\nThe figure below shows a corrgram using the corrplot combined with the significant test of 0.1. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total carbohydrate and sugar is statistically significant at significant level of 0.1 but not the pair between total caffeine and trans fat.\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ncor.mtest( ) - corrplot - to generate p-values for “p” variable, and confidence intervals for each pair of input variables.\ncorrplot.mixed( ) - corrplot - to use mixed methods to visualise a correlation matrix.\n\n\n\n\n\n\n\n\nShow the code\nname.sig = cor.mtest(corr_var_name, \n                     conf.level = .9)\n\n\n\n\nShow the code\ncorrplot.mixed((cor(corr_var_name)),\n               lower = \"number\",\n               upper = \"square\",\n               order = \"AOE\",\n               diag = \"l\",\n               tl.pos = \"lt\",\n               tl.col = \"black\",\n               tl.cex = .6,\n               tl.srt = 45,\n               pch.col = \"grey70\",\n               pch.cex = 1.5,\n               number.cex = .6,\n               cl.cex = .6,\n               lower.col = \"black\",\n               p.mat = name.sig$p, \n               sig.level = 0.1,\n               title = \"Attributes Pairs Correlation with significant level of 0.1\",\n               mar = c(0,0,1,0)\n               )\n\n\n\n\n\nRemarks :\n\n\n\n\n\n4.1.5 Plot with Histogram on Diagonal Panel\n\n\nShow the code\npanel.smooth <- function (x, y, \n                          col = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), \n                          bg = NA,\n                          pch = 12,\n                          cex = 0.8, \n                          col.smooth = \"red\", \n                          span = 2/3, \n                          iter = 3,\n                          panel = panel.smooth){\n  points(x, y, \n          pch = pch, \n          col = col, \n          bg = bg, \n          cex = cex)\n  }\n\n\nRemarks :\nCode chunk above with references to 2 sites :\n\nScatter Plot Matrices - R Base Graphs\nStack Overflow - How to modify this Correlation Matrix plot?\n\n\n\nShow the code\npanel.hist <- function(x){\n  usr <- par(\"usr\")\n  \n  on.exit(par(usr))\n\n  par(usr = c(usr[1:2], 0, 1.5) )\n  \n  h <- hist(x, plot = FALSE)\n  \n  breaks <- h$breaks\n  \n  nB <- length(breaks)\n  \n  y <- h$counts; \n  y <- y/max(y)\n  \n  rect(breaks[-nB], 0, \n       breaks[-1], y, \n       col = \"cyan\")\n}\n\n\n\n\nShow the code\npairs(corr_var_name,\n      lower.panel = panel.smooth, \n      upper.panel = panel.cor,\n      diag.panel = panel.hist,\n      gap = 0.2, \n      row1attop = TRUE)\n\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\n\n\n\n\n\n\n4.1.6 Plot with psych package\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\npairs.panels( ) - psych - to include histograms and correlations into the Scatter Plot of Matrices (SPLOM)6.\n\nmethod parameters for the correlation (“pearson”, “spearman”, “kendall”\ndensity TRUE shows histograms and density plots.\nellipses TRUE draws correlation ellipses.\nhist.col colour for histogram.\n\nnote : the alpha level for the confidence regions is 0.05.\n\n\n\n\n\nShow the code\npairs.panels(corr_var_name,\n             method = \"pearson\",\n             hist.col = \"#00AFBB\",\n             density = TRUE,\n             ellipses = TRUE,\n             digits = 3,\n             gap = 0.2)\n\n\n\n\n\n\n\n\n\n\n4.1.7 Plot with Hierarchical Clustering\n\n\n\n\n\n\nThe dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\ncv_name.matrix <- data.matrix(corr_var_name)\n\n\n\n\nShow the code\nname_d <- dist(normalize(cv_name.matrix, method = \"euclidean\"))\n\n\n\n\nShow the code\nname_hclust <- hclust(name_d, method = \"average\")\n\n\n\n\nShow the code\nname_num_k <- find_k(name_hclust)\n\nplot(name_num_k)\n\n\n\n\n\ns\n\n\nShow the code\nset.seed(12345)\n\nfactoextra::fviz_nbclust(cv_name.matrix,\n                         FUNcluster = hcut,\n                         nstart = 25,  \n                         method = \"gap_stat\", \n                         nboot = 50,\n                         linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Gap statistic method\")\n\n\n\n\n\nw\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"wss\",\n             linecolor = \"white\")+\n  theme_dark() +\n  labs(subtitle = \"Elbow method\")\n\n\n\n\n\n\n\nShow the code\nfviz_nbclust(cv_name.matrix, \n             kmeans, \n             method = \"silhouette\",\n             linecolor = \"white\") +\n  theme_dark() +\n  labs(subtitle = \"Silhouette method\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, the corrgram was plotted using corrplot() and hclust based on the results of hierarchical clustering.\n\n\nShow the code\ncorrplot((cor(corr_var_name)),\n         method = \"ellipse\",\n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 2,\n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.cex = .6,\n         tl.srt = 45,\n         number.cex = .6,\n         cl.cex = .6,\n         title = \"Correlation with K-2 Hierarchical Clustering\",\n         mar = c(0,0,1,0))\n\n\n\n\n\n\n\n\n\n\n4.1.8 Conclude SPLOM Methods and Findings\n\n\n\n\n\n\nIn general, the corrgram for all starbucks drinks show that caffeine is mostly negatively correlated with the other nutritional factors except protein, whereas the rest are positively correlated. The diagram also shows that following pairs of nutritional factors of starbucks drinks are highly correlated (r > 0.90):\n\nTotal Fat(g) – Calories from Fat (r = 1)\nTotal Fat(g) – Saturated Fat(g) (r = 0.94)\nCalories from fat – Saturated Fat (g) (r = 0.94)\nSugars (g) – Total Carbohydrate (g) (r = 0.99)\nSugars (g) – Calories (r = 0.92)\nTotal Carbohydrate (g) – Calories (r = 0.94)\n\nThe trans fat(g) and caffeine (mg) pair is not significant at p <0.05 and has a correlation parameter of only 0.01.\nFrom the multiple corrgram, an interesting finding is that the caffeine for kids drinks and tea is positively correlated to the other factors.\nThe starbucks drinks nutrition factors can be separated into 3 clusters:\n\nCaffeine (mg)\nTrans fat(g), Cholesterol(mg), Saturated fat(g), Calories from fat, Total Fat(g)\nSodium (mg), Calories, Total Carbohydrate(g), Sugars(g), Dietary Fiber(g), Protein(g)\n\nThe nutrition factors in each cluster are correlated with one another. Caffeine is standalone as it is not highly correlated with the others and generally has a negative correlation with the rest."
  },
  {
    "objectID": "pnote/test4.html#heatmap",
    "href": "pnote/test4.html#heatmap",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.2 Heatmap",
    "text": "4.2 Heatmap\n\n\n\n\n\n\nA heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.\nThe top drinks dataset where nutritional values have been normalised against the unit volume will be used for plotting the heat map.\nFirst, the dend_expend() and find_k() functions of dendextend package was used to determine the best clustering method and number of cluster.\n\n\nShow the code\nname_matrix <- data.matrix(name_norm)\n\n\n\n\nShow the code\nname_matrix_d <- dist(normalize(name_matrix), method = \"euclidean\")\n\n\n\n\nShow the code\nname_clustHM <- hclust(name_matrix_d, method = \"average\")\n\n\n\n\nShow the code\nheatmap_k <- find_k(name_clustHM)\nplot(heatmap_k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, heatmaply package was used to plot the heatmap for Ice Coffee, Hot Chocolate and Pumpkin Spice Crème for different combinations of milk and whipped cream.\n\n\nShow the code\nheatmaply(percentize(name_matrix),\n          colors = Blues,\n          k_row = 6,\n          margins = c(0, 100, 30, 50), #btm, left, top, right\n          fontsize_row = 6,\n          fontsize_col = 6,\n          title= list(\n            text = \"Playing with Fonts\",\n            font = t1),\n          xlab = \"Nutrition\",\n          ylab = \"Drinks\",\n          main = \"Heatmap of Top 3 popular Starbucks Drinks\")\n\n\n\n\n\n\n\n\n\n\n4.2.1 Conclusion\n\n\n\n\n\n\nThe heatmap compares the nutritional value of hot chocolate, pumpkin spice crème and iced coffee, which are popular drinks in Starbucks. It shows that hot chocolate and pump spice crème are generally unhealthier, containing higher sodium, sugars, carbohydrates, and cholesterol levels than iced coffee. On the other hand, iced coffee contains higher caffeine levels than the hot chocolate and pump spice crème. The impact of milk, whipped cream, sweetener choices on the nutritional value of drinks were further analysed using hierarchical clustering. The drinks were separated into 4 clusters:\n\nHot Chocolate and Pumpkin Spice Crème with whipped cream or Pumpkin Spiced Crème with Whole/2% milk\nPumpkin Spice Crème without whipped cream with soy or nonfat milk\nHot Chocolate and Pumpkin Spice Crème without whipped cream\nIced Coffee with all milk and sweetener combinations\n\nFor Hot Chocolate and Pumpkin Spice Crème, the nutritional value was determined by whipped cream then milk type. In general, no whipped cream and plant-based milk milk choices are considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels. For Iced coffee, the nutritional value was determined by sweetener then milk type. Unsweetened iced coffee with plant-based milk is considered healthier with lower sodium, sugars, carbohydrates, and cholesterol levels."
  },
  {
    "objectID": "pnote/test4.html#parallel-coordinate-plot",
    "href": "pnote/test4.html#parallel-coordinate-plot",
    "title": "Exploration 4 - Interactive Heatmap & Parallele Coord.",
    "section": "4.3 Parallel Coordinate Plot",
    "text": "4.3 Parallel Coordinate Plot\n\n\n\n\n\n\nParallel coordinates are a common way of visualizing and analyzing high-dimensional datasets. To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\nThe parallel coordinate was plotted using the parallelPlot package.\n\n\nShow the code\ndrink.pc <- corr_var_name\n\nhistoVisibility <- rep(TRUE, \n                       ncol(drink.pc))\n\nparallelPlot(drink.pc,\n             rotateTitle = TRUE,\n             continuousCS = 'YlGnBu',\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n\n\n4.3.1 Conclusion\n\n\n\n\n\n\nThe findings from the parallel coordinate plot are generally in line with the corrgram above. Drinks with high calories typically have high total carbohydrate, sugars, sodium and lower caffeine, vice versa. Some factors like trans fat, dietary fibre and cholesterol are generally not-well distributed with most drinks having a low nutritional value for those factors. They may not be a good indicator of the calorific content of the drinks."
  },
  {
    "objectID": "pnote/test5.html",
    "href": "pnote/test5.html",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "",
    "text": "This study explores the creation of a time-series visualisation with a subject matter focus on the COVID-19 impact on the stock prices of the top 40 companies in Singapore.\n\n\n\n\n\n\nVisualisation at daily or weekly data :\n\n\n\n\n\nDaily or weekly depends on the end users to this analysis output. For users whose cash flow unable to move fast enough would prefer weekly data, otherwise daily data.\nWeekly data helps to focus on the predominant longer-term trend, without being distracted by the “noise” and daily fluctuations.\nThe greatest challenge is to plot a comprehensible daily chart.\n\n\n\n\n\n\n\n\n\nLack of domain knowledge :\n\n\n\n\n\nExtra readings required to understand the financial terms and technical standards for stock market price monitoring."
  },
  {
    "objectID": "pnote/test5.html#load-r-packages",
    "href": "pnote/test5.html#load-r-packages",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, knitr, tidyquant, lubridate, ggthemes, data.table, ggHoriPlot)\n\n\nRemarks :\nPackages to consider -\nsf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork."
  },
  {
    "objectID": "pnote/test5.html#summary-of-r-functions",
    "href": "pnote/test5.html#summary-of-r-functions",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "2.2 Summary of R Functions",
    "text": "2.2 Summary of R Functions\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nknitr: Package used for dynamic report generation\nrmarkdown: Used to convert R Markdown documents into a variety of formats.\ncorrplot: Used for plotting a correlation matrix, test for correlation, and other visualization methods about association and correlation.\nggstatsplot: Used for creating graphics with details from statistical tests included\nheatmaply: Used to plot ‘heatmap’, a popular graphical method for visualizing high-dimensional data\nparallelPlot: Used to create a parallel coordinates plot\n\n\n\n\n\n\n\n!!!!! need to update!\nR packages and functions used in this exercise :\nreadr :\n\nread_csv( ) -\nproblems( ) -\n\nbase :\n\ncumsum( ) -\n\nggplot2 :\n\nscale_continuous( ) -\n\ndplyr :\n\nselect( ) -\ngroup_by( ) -\nsummarise( ) -\nglimpse( ) -"
  },
  {
    "objectID": "pnote/test5.html#acquire-data-source",
    "href": "pnote/test5.html#acquire-data-source",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\ncompaniesmarketcap.com market-capitalisation\n\nDownload “total market cap” data set."
  },
  {
    "objectID": "pnote/test5.html#import-data",
    "href": "pnote/test5.html#import-data",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Data Set\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\nsgp_marketCap <- read_csv(\"data/sgp_marketcap.csv\")\n\n\nRows: 53 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Symbol, country\ndbl (3): Rank, marketcap, price (USD)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(sgp_marketCap)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n\n\n\n3.2.2 Inspect Imported Data Set\n\n\n\n\n\n\n\n\nShow the code\nglimpse(sgp_marketCap,0)\n\n\nRows: 53\nColumns: 6\n$ Rank          <dbl> …\n$ Name          <chr> …\n$ Symbol        <chr> …\n$ marketcap     <dbl> …\n$ `price (USD)` <dbl> …\n$ country       <chr> …\n\n\n\n\nShow the code\nkable(head(sgp_marketCap,5))\n\n\n\n\n\nRank\nName\nSymbol\nmarketcap\nprice (USD)\ncountry\n\n\n\n\n1\nDBS Group\nD05.SI\n66770694229\n25.94\nSingapore\n\n\n2\nOCBC Bank\nO39.SI\n41736766443\n9.28\nSingapore\n\n\n3\nUOB\nU11.SI\n38709263592\n23.12\nSingapore\n\n\n4\nSea (Garena)\nSE\n31271952384\n55.67\nSingapore\n\n\n5\nSingtel\nZ74.SI\n31067209219\n1.88\nSingapore\n\n\n\n\n\n\n\n\n\n\n3.2.3 Filter Top40 Companies\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nhead( ) - utils - to return the top 40 companies.\n\n\n\n\n\nShow the code\ntop40 <- head(sgp_marketCap, 40) %>%\n  select(-c(1, 4:6)) %>%\n  rename(symbol = Symbol) %>%\n  rename(name = Name)"
  },
  {
    "objectID": "pnote/test5.html#data-wrangling",
    "href": "pnote/test5.html#data-wrangling",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Create Non-Distributed Vector List\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nas.vector( ) - pbdDMAT - to convert “name” and “symbol” into a non-distributed vectors.\n\n\n\n\n\nShow the code\nvector_name.list <- as.vector(top40$name)\nvector_symbol.list <- as.vector(top40$symbol)\n\n\n\n\n\n\n\n3.3.2 Extract Stock Information\n\n\n\n\n\n\nThe prices that retrieved with tq_get() is different from the prices displayed on the website. But there is no metadata to verify this differences. Hence, identify this matter first prior to analyse the data.\n\n3.3.2.1 clarify price difference\n\n\n\n\n\n\nUsage of the code chunk below :\ntq_get( ) - tidyquant - to get the quantitative stock data in tibble format.\ntq_transmute( ) - tidyquant - to get weekly data.\n\n\n\n\n\nShow the code\ntest0 = tq_get(vector_symbol.list,\n                      get = \"stock.prices\",\n                      from = \"2022-12-01\",\n                      to = \"2023-01-06\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"weeks\")\n\nkable(head(test0))\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\n\n\n\n\nD05.SI\n2022-12-02\n34.75\n34.85\n34.47\n34.47\n3468700\n34.47\n\n\nD05.SI\n2022-12-09\n33.33\n33.46\n33.31\n33.39\n2777100\n33.39\n\n\nD05.SI\n2022-12-16\n33.80\n34.13\n33.76\n33.84\n4953300\n33.84\n\n\nD05.SI\n2022-12-23\n34.00\n34.23\n33.98\n34.04\n1341300\n34.04\n\n\nD05.SI\n2022-12-30\n34.00\n34.08\n33.76\n33.92\n1820100\n33.92\n\n\nD05.SI\n2023-01-05\n34.60\n34.89\n34.37\n34.78\n5529800\n34.78\n\n\n\n\n\nRemarks :\nThe price for DBS Group, dated January 5, 2023, indicated on the companiesmarketcap.com website, was USD$25.94. But this value is unable to match any retrieved prices, as shown above.\nBased on the exchange rate between 1SGD and UGD dated January 5, 2023, 0930 UTC, which is 1730 pm Singapore time (the SGX trading hours ceased by then, so the closing price should not be far off from the currency exchanged), it was $0.746082.\nHence, dividing USD$25.94 by $0.746082 will get SGD$34.77, which is close to the adjusted closing price, i.e. $34.78, as shown above, which can be verified with Yahoo data to ensure there is no parsing error.\n\n\n3.3.2.2 extract stock data\n\n\n\n\n\n\nThe “from” date will need to be set before December 27, 2019, if January 3, 2020, data is crucial for analysis. Else, the value of the first row will have “NA” when computing the change rate.\n\n\n\n\n\nShow the code\nstock_week = tq_get(vector_symbol.list,\n                      get = \"stock.prices\",\n                      from = \"2020-01-01\",\n                      to = \"2021-12-31\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"weeks\")\n\nkable(head(stock_week))\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\n\n\n\n\nD05.SI\n2020-01-03\n26.17\n26.32\n25.83\n26.00\n4336600\n22.52781\n\n\nD05.SI\n2020-01-10\n26.00\n26.12\n25.92\n26.00\n7869500\n22.52781\n\n\nD05.SI\n2020-01-17\n26.45\n26.45\n26.32\n26.35\n2347500\n22.83107\n\n\nD05.SI\n2020-01-24\n26.37\n26.38\n26.16\n26.20\n1474500\n22.70110\n\n\nD05.SI\n2020-01-31\n25.62\n25.65\n25.20\n25.37\n8167400\n21.98194\n\n\nD05.SI\n2020-02-07\n25.57\n25.65\n25.21\n25.31\n5097800\n21.92996\n\n\n\n\n\nRemarks :\nThe data is based on every week Sunday. However, the trading hours for Singapore Exchange (SGX) is between Monday to Friday.\n“open” = the opening value of a day.\n“close” = the closing value of a day.\n“adjusted” = adjusted closing price refers to the price of the stock after paying off the dividends. Often used to examine historical returns or analyse past performance.\n“open” and “close” are far apart it shows strong momentum, otherwise may suggest indecision or weak momentum.1\n“high” and “low” are useful to assess volatility of a stock price.\n\n\n3.3.2.3 save RDS file\n\n\nShow the code\nwrite_rds(stock_week, \"data/stock_week.rds\")\n\n\n\n\n3.3.2.4 read RDS file\n\n\nShow the code\nstock_week <- read_rds(\"data/stock_week.rds\")\n\n\n\n\n\n\n\n\n3.3.3 Compute Rate of Change\n\n\n\n\n\n\nThe Rate of Change (ROC) represents the momentum of a variable over a defined period. A positive ROC typically means the stock outperforms the market within the past 2 weeks.\n“roc” will be derived by dividing the current “adjusted” price by the previous “adjusted price”. Next, deduct 1 before multiplying the final value by 100.\n\n\nShow the code\nstock_week$roc <- ((stock_week$adjusted/shift(stock_week$adjusted))-1)*100\n\n\n\n\n\n\n\n3.3.4 Merge Data Frames\n\n\n\n\n\n\nUsers unfamiliar with the Singapore stock market may not be able to identify companies easily based on “symbol” value. Hence, to display the “name” on the y-axis, the “name” from top40 will need to be merged with stock_week.\n\n\n\n\n\n\nUsage of the code chunk below :\nmerge( ) - base - to merge stock_week data frame and top40 data frame by “symbol” variable.\n\n\n\n\n\nShow the code\nstock_week <- merge(stock_week,\n                    top40,\n                    by = 'symbol')\n\nkable(head(stock_week))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymbol\ndate\nopen\nhigh\nlow\nclose\nvolume\nadjusted\nroc\nname\n\n\n\n\n2588.HK\n2020-01-03\n78.75\n78.95\n77.90\n78.20\n517909\n69.56584\n255.2765708\nBOC Aviation\n\n\n2588.HK\n2020-01-10\n72.45\n75.20\n72.35\n74.35\n2092454\n66.14093\n-4.9232668\nBOC Aviation\n\n\n2588.HK\n2020-01-17\n74.90\n75.00\n74.25\n74.70\n482330\n66.45229\n0.4707569\nBOC Aviation\n\n\n2588.HK\n2020-01-24\n71.65\n72.65\n71.60\n72.55\n311990\n64.53968\n-2.8781746\nBOC Aviation\n\n\n2588.HK\n2020-01-31\n71.50\n72.55\n71.35\n71.80\n692375\n63.87249\n-1.0337733\nBOC Aviation\n\n\n2588.HK\n2020-02-07\n75.60\n75.60\n74.55\n75.05\n395475\n66.76364\n4.5264482\nBOC Aviation\n\n\n\n\n\n\n3.3.4.1 encode vector to factor\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - base - to encode a vector as a factor.\n\n\n\n\n\nShow the code\nstock_week <- stock_week %>%\n  mutate(name = factor(name,\n                       levels = vector_name.list))"
  },
  {
    "objectID": "pnote/test5.html#plot-horizontal-chart",
    "href": "pnote/test5.html#plot-horizontal-chart",
    "title": "Exploration 5 - Create Time-Series Visualisation",
    "section": "4.1 Plot Horizontal Chart",
    "text": "4.1 Plot Horizontal Chart\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nfactor( ) - ggHoriplot - to encode a vector as a factor.\nscale_fill_hcl( ) - ggHoriplot - to set value for “palette” with ‘RdBu’. Need colour contrast between negative (red) and positive (blue) to illustrate the “roc”.\ngeom_vline( ) - ggHoriplot - to draw a vertical dashed line intercepting the x-axis.\n\n\n\n\n\nShow the code\nggplot() +\n  geom_horizon(aes(date, roc),\n               data = stock_week,\n               origin = 0,\n               horizonscale = c(-15, -5, -1,  0,  1, 3, 5)) +\n  scale_fill_hcl(palette = 'RdBu') +\n  facet_grid(name~.) +\n  theme_few() +\n  theme(\n    panel.spacing.y = unit(0, \"lines\"),\n    plot.title = element_text(size = 12),\n    plot.subtitle = element_text(size = 9),\n    strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(size = 7, angle = 90, hjust = 0, vjust = 0.5),\n    axis.title.x = element_blank(),\n    panel.border = element_blank(),\n    legend.position = \"none\"\n    ) +\n  scale_x_date(expand = c(0,0), \n               date_breaks = \"1 month\", \n               date_labels = \"%b '%y\",\n               limit = c(as.Date(\"2020-01-01\"),\n                         as.Date(\"2021-12-31\"))) +\n  xlab('Date') +\n  ggtitle('Stock Prices of Top 40 Companies in Singapore, 2020 to 2021', \n          'Ranked by Market Capitalisation, Weekly Data') +\n  geom_vline(xintercept = as.Date(\"2020-02-07\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-04-07\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-06-02\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2020-11-09\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2021-05-08\"), color = \"limegreen\", size = 1) + \n  geom_vline(xintercept = as.Date(\"2021-10-09\"), color = \"limegreen\", size = 1) +\n  geom_vline(xintercept = as.Date(\"2021-11-26\"), color = \"limegreen\", size = 1) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\nRemarks :\n2020-02-07 : initial wave of Covid-19\nDisease Outbreak Response System Condition (DORSCON) to orange, signalling that the disease is severe and there is widespread transmission from unknown sources.\n\nThis is highest level ever reached since the SARS outbreak in 2003.\nThe severity of the pandemic caused panic and uncertainty amongst business and citizens.\nMore countries were also entering a lockdown state to contain the spread, disrupting global trade flows which exacerbated the market.\nHence, spurring on the COVID-19 financial crash in March 2020, which not only impacted Singapore but all major stock markets as well.\nThe March 2020 COVID-19 crash was a short-lived bear market, and in April 2020 stock markets re-entered a bull market.\n\n\n2020-04-07 : circuit breaker\nIntroduced the Circuit Breaker period, where citizens practised enhanced social distancing and isolation.\n\nWorkplaces and schools closed and most shops shuttered.\nBusinesses were badly impacted by the drop in footfall and consumption.\nHowever, the stock market seem to be recovering from the crash in March.\nOne reason could be the implementation of the Budgets the Government has dedicated to support Singaporeans and businesses in the battle against COVID-19, which amounted close to $100 billion.\nSecondly, businesses were also adapting to the change in consumer patterns through contactless digital systems, which were well-received.\n\n\n2020-06-02\nEased of circuit breaker. Enters its first phase of reopening, where businesses and activities are progressively allowed to resume, giving rise to some semblance of normalcy.\n\nHence, causing the stock price in the market to rise.\n\n\n2020-11-09 : National Vaccination Campaign\nPfizer and BioNTech SE announced a vaccine candidate that has demonstrated evidence of efficacy against COVID-19.\n\nAs the news brought about positivity of a potential return of normal activity, many shares of companies soared.\nSince Dec 2020, the National Vaccination Campaign commenced and in late 2021, Singapore became the world’s most-vaccinated country, with more than 85% of its total population fully-vaccinated.\n\n\n2021-05-08 : DELTA WAVE OF COVID-19\nBy May 2021, the Delta variant of COVID-19 had widely spread, causing several clusters across the nation.\n\nThe re-opening efforts put forth by the Government were heldback, Singapore reverted back to Phase 2 from 8 May, which was subsequently tightened to Phase 2 Heightened Alert from 16 May.\nThis tightening of measures caused the stock market prices to dip.\n\n\n2021-10-09 : CAUTIOUS RE-OPENING WITH ENDEMIC COVID-19\nSince then, the nation has acknowledged that the Zero-Covid strategy is no longer feasible due to highly infectious variants formed.\n\nIt has engaged a cautions re-opening strategy to enable Singaporeans to resume their lives, participate in social activities, open the borders and revive the economy.\nOne such example would be the Vaccinated Travel Lane (VTL) which allowed fully-vaccinated Singaporean citizens and permanent residents to return to Singapore without quarantine.\nOn 9 Oct 2021, it was announced that Singapore would open up more VTLs with other countries, including South Korea and the United States.\nThis saw some rise in the stock market prices, especially companies who stand to gain most such as Singapore Airlines and SATS.\n\n\n2021-11-26 : OMICRON VARIANT OF COVID-19\nOn 26 Nov 2021, the World Health Organisation (WHO) announced the Omicron variant discovery of COVID-19.\n\nWhile there was some dip to the stock market prices, due to lack of information on the virus, the impact seems to be lower than the Delta and Alpha variant of the virus for most companies."
  },
  {
    "objectID": "pnote/test6.html",
    "href": "pnote/test6.html",
    "title": "DataViz Makeover",
    "section": "",
    "text": "This study focus on make over a trellis plot of 9 population pyramids by\nexplores the Pyramid chart using ggplot2 and supporting R packages.\n\n\n\n\n\n\nChallenges in wrangling the raw data :\n\n\n\n\n\nThe age group variable, “AG”, is a character data type.\nIf it is used to plot the population pyramid, “10_to_14” will be parsed first instead of “5_to_9” after “0_to_4 is parsed.\nBecause of that, the order in the chart will be incorrect.\nResolve manually with these functions - mutate( ) and arrange( ).\n\n\n\n\n\nI am curious to see the different approaches you all take.The purpose of the makeover is to improve on the original visualisation. Focus on what works, what doesn’t work, why those things don’t work, and how you made it better. You should try stick to the fields in the data set provided and improve upon the original visualisation. However, if supplementing the data helps you tell a better story, go for it!\n==========\nIn this take-home exercise, you are required to:\n\nselect one of the Take-home Exercise 1 prepared by your classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2, and\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\nThe purpose of DataVis Makeover is to improve on the original visualisation. Focus on what works, what doesn’t work, why those things don’t work, and how you made it better. You should try stick to the fields in the data set provided and improve upon the original visualisation.\nsubmission instructions\nThis is an individual assignment. You are required to work on the take-home exercises and prepare submission individually.\nThe specific submission instructions are as follows:\n\nThe analytical visualisation must be prepared by using R and appropriate R packages.\nThe write-up of the take-home exercise must be in Quarto html document format. You are required to publish the write-up on Netlify.\nProvide the links to the Take-home Exercise write-up and github repository onto eLearn (i.e. Take-home Exercise section)\n\n\n\n\nWith consent given by fellow coursemate, Chen Yi Man, below is my draft to refine her works with R Studio and Tidyverse, sf and tmap packages."
  },
  {
    "objectID": "pnote/test6.html#load-r-packages",
    "href": "pnote/test6.html#load-r-packages",
    "title": "DataViz Makeover",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\n\n\n\n\nUsage of the code chunk below :\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.\n\n\nShow the code\npacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggplot2, sf, tmap, quanteda, NLP)\n\n\nRemarks :"
  },
  {
    "objectID": "pnote/test6.html#acquire-data-source",
    "href": "pnote/test6.html#acquire-data-source",
    "title": "DataViz Makeover",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\n\n\n\n\n\n\nThis study will be based on demographic data set downloadable from Singstat.gov.sg.\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nData may not add up due to rounding.\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nMetadata :\n\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime - Time / Period\n\n\n\n\n\n\n\n\n\nSingstat Dataset for Population\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” dataset in csv format from Singstat.gov.sg.\n\n\nMaster Plan 2014 Planning Area Boundary. Web version instead of Sea version.\nData\n\n\n\nSource(s)\nUrban Redevelopment Authority\n\n\n\n\nLicence\nSingapore Open Data Licence\n\n\n\nhttps://data.gov.sg/dataset/master-plan-2014-planning-area-boundary-web"
  },
  {
    "objectID": "pnote/test6.html#import-data",
    "href": "pnote/test6.html#import-data",
    "title": "DataViz Makeover",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Population Attributes Data\n\n\n\n\n\n\nTwo (2) steps : import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_attribute <- read_csv(\"data/aspatial/respopagesextod2022.csv\")\n\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nproblems(pop_attribute)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskim(pop_attribute)\n\n\n\nData summary\n\n\nName\npop_attribute\n\n\nNumber of rows\n100928\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nTOD\n0\n1\n6\n39\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n40.44\n125.73\n0\n0\n0\n20\n2300\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.00\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁\n\n\n\n\n\nRemarks :\nPreliminary data interpretation - based on 2022 consensus data, .\n\n\n3.2.1.3 inspect values\n\n\nShow the code\nunique(pop_attribute$AG)\n\n\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\n\n\n\n\n\n\n3.2.2 Import Boundary Data\n\n\n\n\n\n\n\n\nShow the code\nbdy_web <- st_read(dsn = \"data/geospatial/web_shp\", \n                layer = \"MP14_PLNG_AREA_WEB_PL\")\n\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `D:\\jephOstan\\ISSS608\\pnote\\data\\geospatial\\web_shp' using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nbdy_noSea <- st_read(dsn = \"data/geospatial/noSea_shp\", \n                layer = \"MP14_PLNG_AREA_NO_SEA_PL\")\n\n\nReading layer `MP14_PLNG_AREA_NO_SEA_PL' from data source \n  `D:\\jephOstan\\ISSS608\\pnote\\data\\geospatial\\noSea_shp' using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nShow the code\nglimpse(bdy_web,70)\n\n\nRows: 55\nColumns: 13\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ PLN_AREA_N <chr> \"BISHAN\", \"BUKIT BATOK\", \"BUKIT MERAH\", \"BUKIT PA…\n$ PLN_AREA_C <chr> \"BS\", \"BK\", \"BM\", \"BP\", \"BT\", \"CC\", \"CH\", \"CB\", \"…\n$ CA_IND     <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"WEST REGION\", \"CENTRAL REGION\"…\n$ REGION_C   <chr> \"CR\", \"WR\", \"CR\", \"WR\", \"CR\", \"NR\", \"ER\", \"ER\", \"…\n$ INC_CRC    <chr> \"BA616285F402846F\", \"FB44C870B04B7F57\", \"738B4798…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, …\n$ X_ADDR     <dbl> 28789.76, 19255.42, 26865.78, 21287.04, 23256.76,…\n$ Y_ADDR     <dbl> 37450.89, 37527.65, 28662.87, 38761.84, 34689.00,…\n$ SHAPE_Leng <dbl> 13517.12, 15234.22, 29156.29, 15891.85, 22492.84,…\n$ SHAPE_Area <dbl> 7618921, 11133256, 14462472, 9019940, 17526654, 3…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((29772.19 38..., MULT…\n\n\n\n\nShow the code\nglimpse(bdy_noSea,70)\n\n\nRows: 55\nColumns: 13\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ PLN_AREA_N <chr> \"ANG MO KIO\", \"BEDOK\", \"BISHAN\", \"BOON LAY\", \"BUK…\n$ PLN_AREA_C <chr> \"AM\", \"BD\", \"BS\", \"BL\", \"BK\", \"BM\", \"BP\", \"BT\", \"…\n$ CA_IND     <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",…\n$ REGION_N   <chr> \"NORTH-EAST REGION\", \"EAST REGION\", \"CENTRAL REGI…\n$ REGION_C   <chr> \"NER\", \"ER\", \"CR\", \"WR\", \"WR\", \"CR\", \"WR\", \"CR\", …\n$ INC_CRC    <chr> \"E5CBDDE0C2113055\", \"1719251260799DF6\", \"BA616285…\n$ FMEL_UPD_D <date> 2016-05-11, 2016-05-11, 2016-05-11, 2016-05-11, …\n$ X_ADDR     <dbl> 28976.88, 38582.67, 28789.76, 13410.38, 19255.42,…\n$ Y_ADDR     <dbl> 40229.12, 34032.10, 37450.89, 33008.99, 37527.65,…\n$ SHAPE_Leng <dbl> 17494.24, 21872.80, 13517.12, 18528.47, 15234.22,…\n$ SHAPE_Area <dbl> 13941380, 21733188, 7618921, 8279408, 11133256, 1…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((30658.5 420..., MULT…\n\n\ninspect\n\n\nShow the code\nplot(st_geometry(bdy_web))\n\n\n\n\n\n\n\nShow the code\nplot(st_geometry(bdy_noSea))\n\n\n\n\n\nRemarks :\nfile size and plotted shape are the same for both.\nThe only differences is the last update date.\nWith No Sea version last updated on May 23, 2016.\nWeb version to be used as the last updated date was 4 Nov 2016.\nSave Simple Feature Data Frame into RDS Format\n\n\nShow the code\nwrite_rds(bdy_web,\n          \"data/rds/bdy_web.rds\",\n          compress = \"xz\")\n\n\nRead RDS File\n\nbdy_web <- read_rds(\"data/rds/bdy_web.rds\")"
  },
  {
    "objectID": "pnote/test6.html#data-wrangling",
    "href": "pnote/test6.html#data-wrangling",
    "title": "DataViz Makeover",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Change Field Names to Lowercase\nTo avoid confusion between field names used in data and discussions, change all fields’ name to lowercase.\n\n\n\n\n\n\nUsage of the code chunk below :\ntolower( ) - quanteda - to convert fields’ name into lower case.\n\n\n\n\nnames(pop_attribute) <- tolower(names(pop_attribute))\nnames(bdy_web) <- tolower(names(bdy_web))\n\n\n\n3.3.2 Convert Case for Planning Area Values\nThe Planning Areas’ values in the boundary data-set are strings of entirely upper case.\n\n\n\n\n\n\nUsage of the code chunk below :\nstr_to_title( ) - stringr - to set the initial of the string to upper case.\n\n\n\n\nbdy_web$pln_area_n <- str_to_title(bdy_web$pln_area_n)\n\n\n\n3.3.3 Rename Planning Area for Boundary Dataset\nSetting same name for Planning Area fields to facilitate left join between two datasets at section 3.xxx.\n\nbdy_pa <- bdy_web %>% \n  rename(`pa` = `pln_area_n`) \n\n\n\n3.3.4 Remove Non-Alphameric Character\nThere are special character such as “_” among Age Groups’ value.\nUnable to use str_sub( ) function from stringr package as the position of “_” is varied among values.\n\n\n\n\n\n\nUsage of the code chunk below :\ngsub( ) - base - to replace “_” with space.\n\n\n\n\npop_attribute$ag <- gsub(\"_\", \n                         \" \", \n                         pop_attribute$ag, \n                         fixed = TRUE)"
  },
  {
    "objectID": "pnote/test6.html#create-data-frame-for-population-pyramids-plot",
    "href": "pnote/test6.html#create-data-frame-for-population-pyramids-plot",
    "title": "DataViz Makeover",
    "section": "3.4 Create Data Frame for Population Pyramids Plot",
    "text": "3.4 Create Data Frame for Population Pyramids Plot\n\n3.4.1 Explore with Single Planning Area\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\n\n\n\n\n\n\n\ntest0 <- pop_attribute %>% \n  filter(pa == \"Ang Mo Kio\") %>%\n  group_by(ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'ag'. You can override using the `.groups`\nargument.\n\n\n\n3.4.1.1 visualise data\n\nVisualise DataInspect Data\n\n\n\n\nShow the code\nggplot(data = test0,\n       aes(y = ag)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test Age Group Distribution\") \n\n\n\n\n\n\n\n\n\nShow the code\nunique(pop_attribute$ag)\n\n\n [1] \"0 to 4\"      \"5 to 9\"      \"10 to 14\"    \"15 to 19\"    \"20 to 24\"   \n [6] \"25 to 29\"    \"30 to 34\"    \"35 to 39\"    \"40 to 44\"    \"45 to 49\"   \n[11] \"50 to 54\"    \"55 to 59\"    \"60 to 64\"    \"65 to 69\"    \"70 to 74\"   \n[16] \"75 to 79\"    \"80 to 84\"    \"85 to 89\"    \"90 and over\"\n\n\n\n\n\n\nRemarks :\nNotice the age group “5 to 9” is placed after “45 to 49” instead of placed at 2nd value as shown under the “Inspect Data” tab.\n\n\n\n3.4.1.2 update age groups display sequence\n\n\n\n\n\n\nfor entire singapore\n\n\n\n\n\n\nUsage of the code chunk below :\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nag_sequence <- c(\"0 to 4\", \"5 to 9\", \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\", \"30 to 34\", \"35 to 39\", \"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\", \"60 to 64\", \"65 to 69\", \"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to89\", \"90 and over\")\n\npop_sgp <- pop_attribute %>%\n  group_by(ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  mutate(ag = factor(ag, levels = ag_sequence)) %>%\n  arrange(ag) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'ag'. You can override using the `.groups`\nargument.\n\n\nat Planning Area level\n\nag_sequence <- c(\"0 to 4\", \"5 to 9\", \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\", \"30 to 34\", \"35 to 39\", \"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\", \"60 to 64\", \"65 to 69\", \"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to89\", \"90 and over\")\n\npop_pa <- pop_attribute %>%\n  group_by(pa, ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  mutate(ag = factor(ag, levels = ag_sequence)) %>%\n  arrange(ag) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'pa', 'ag'. You can override using the\n`.groups` argument.\n\n\nremarks :"
  },
  {
    "objectID": "pnote/test6.html#create-9-planning-areas-data-set",
    "href": "pnote/test6.html#create-9-planning-areas-data-set",
    "title": "DataViz Makeover",
    "section": "3.5 Create 9 Planning Areas Data Set",
    "text": "3.5 Create 9 Planning Areas Data Set\n\n3.5.1 Identify Top 9 Planning Areas\nBased on top 9 highest population\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\nslice( ) - dplyr - to filter based on the first 9 rows.\n\n\n\n\n\n\n\nt9_paPop <- pop_attribute %>%\n  group_by(pa) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  ungroup()\n\nt9 <- arrange(t9_paPop, desc(t9_paPop$count_pop)) %>%\n  slice(1:9) %>%\n  select(pa)\n\n\n\n3.5.2 Filter Top 9 Filter\n\n\nShow the code\nt9_filtered <- pop_pa %>% \n  filter(pop_pa$pa %in% t9$pa)"
  },
  {
    "objectID": "pnote/test6.html#create",
    "href": "pnote/test6.html#create",
    "title": "DataViz Makeover",
    "section": "3.6 Create",
    "text": "3.6 Create\n\n\nShow the code\npop_males <- t9_filtered %>%\n  filter(sex %in%\n           c(\"Males\"))\n\n\n\n\nShow the code\npop_females <- t9_filtered %>%\n  filter(sex %in%\n           c(\"Females\"))\n\n\n\n\nShow the code\nt9_map <- bdy_pa %>%\n  mutate(`total_pop` = lengths(\n    st_intersects(bdy_pa, pop_pa))) %>%\n  mutate(`males` = lengths(\n    st_intersects(bdy_pa, pop_males))) %>%\n  mutate(`females` = lengths(\n    st_intersects(bdy_pa, pop_females)))\n\n\n\n\nShow the code\ntest3 <- pop_attribute %>%\n  group_by(pa, ag) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = ag, \n              values_from = count_pop) %>%\n  mutate(YOUNG = rowSums(.[3:6]) + \n           rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) +\n           rowSums(.[13:15])) %>%\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "pnote/test6.html#transform-data",
    "href": "pnote/test6.html#transform-data",
    "title": "DataViz Makeover",
    "section": "3.6 Transform Data",
    "text": "3.6 Transform Data"
  },
  {
    "objectID": "pnote/test6.html#transform-crs",
    "href": "pnote/test6.html#transform-crs",
    "title": "DataViz Makeover",
    "section": "3.6.1 Transform CRS",
    "text": "3.6.1 Transform CRS\n\n\n\n\n\n\nEnsure all dataframes are in the same projected CRS.\n\n3.6.1.1 transform with st_set_crs( ) function\nGenerally, there are two main steps involved.\n\n\n– retrieve CRS information\n\n\n\n\n\n\nUsage of the code chunk below :\nst_crs( ) - sf - to retrieve coordinate reference system for mpsz.\n\n\n\n\nst_crs(bdy_pa)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\n– transform CRS\n\n\n\n\n\n\nUsage of the code chunk below :\nst_transform( ) - sf - to reproject x from one coordinate system wgs84 to svy21 mathematically, which is not capable by st_set_crs().\n\n\n\n\nbdy_trans <- st_transform(bdy_pa,\n                          crs = 3414)\n\n\n\n– verify CRS\n\n\nShow the code\nst_crs(bdy_trans)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "pnote/test6.html#combine-data-sets",
    "href": "pnote/test6.html#combine-data-sets",
    "title": "DataViz Makeover",
    "section": "3.7 Combine Data Sets",
    "text": "3.7 Combine Data Sets\n\n\nShow the code\npop_pa1 <- left_join(bdy_trans, pop_pa)\n\n\nJoining with `by = join_by(pa)`\n\n\nWarning in sf_column %in% names(g): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning."
  },
  {
    "objectID": "pnote/test6.html#plot-pyramid-chart",
    "href": "pnote/test6.html#plot-pyramid-chart",
    "title": "DataViz Makeover",
    "section": "4.1 Plot Pyramid Chart",
    "text": "4.1 Plot Pyramid Chart\n\n4.1.1 Plot A Single Population Pyramid (Static)\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\n\n\npopPyr_sgp <- ggplot(pop_sgp, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npopPyr_sgp\n\n\n\n\n\n\n4.1.2 Plot A Single Population Pyramid (Interactive)\n\n\n\n\n\n\nRemark :\nThe pyramid above shows the younger generation’s lower percentage, making Singapore’s population structure a constrictive type. That means an ageing population.\nBy June 2022, 4.07 million residents population with a median age of 42.1,1 which is approximately a 19% increase from the median age of 35.3 back in the year 20022.\nAlso, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore’s adjusted gender pay gap (GPG) is at 6%3.\nMeasures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions.\n\n\n\n\n\nShow the code\nggplotly(popPyr_sgp, \n         session = \"knitr\")\n\n\n\n\n\n\n4.1.3 Plot A Single Population Pyramid (Static)\n\n\nShow the code\npopPyr_t9 <- ggplot() +\n  geom_bar(data = subset(t9_filtered, \n                         sex == \"Males\"), \n           aes(x = ag, \n               y = -count_pop, \n               fill = pa), \n           stat = \"identity\", \n           fill = \"orange\") +\n  geom_bar(data = subset(t9_filtered, \n                         sex == \"Females\"), \n           aes(x = ag, \n               y = count_pop, \n               fill = pa), \n           stat = \"identity\", \n           fill = \"steelblue\") +\n  \n  scale_y_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(150, 0, -50), \n                           seq(50, 150, 50))),\n                       \"k\")) +\n  coord_flip() +\n  facet_wrap(~pa, drop = FALSE, ncol = 3) +\n  labs (x = \"Population\", \n        y = \"Age\", \n        title = 'Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"lightblue\", \n                               \"Females\" = \"lightpink\")) \n\npopPyr_t9\n\n\n\n\n\n\n\nShow the code\nggplotly(popPyr_t9, \n         session = \"knitr\")"
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html",
    "href": "takeHome/th_ex1/th_ex1.html",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "",
    "text": "This exercise focus on using Tableau Desktop to create multiple population pyramids for Singapore based on data updated to June 2022.\n\n\n\n\n\n\n\n\nPopulation Pyramid helps to visualise the distribution of age and gender for a given location.\nThe chart can generally have three trends : 1\n\n\n\n\n\n\n\n\ntrend (shape)\ncharacter\nremarks\n\n\n\n\nExpansive\n(triangle)\n\nHigh fertility rate.\nHigh mortality rate.\n\n\nlarger percentage of young population.\nlower than average life expectancy.\nusually associate with developing nation.\n\n\n\nConstrictive\n(wider in the middle)\n\nConstant fertility rate.\nLow mortality rate.\n\n\nHigh numbers of middle aged population.\nSenior population may be larger than younger population.\nCountries with :\n\nhigher levels of social and economic development\nlarge portion of population can access to quality education and health care.2\n\n\n\n\nStationary\n(“pillar” )\n\nLow fertility rate.\nLow mortality rate.\n\n\ndepict stable population.\noften characteristic of developed nations\n\n\n\n\n\n\n\n\n\n\nAs one of the key elements for population pyramids, there are two main aspects for age groups :\n\n\n\n\n\n\n\n\nGenerally, there are two classifications, quinquennial or broad age groups (e.g. 0-14 years or 65 years and over).\nAccording to Singapore National Statistical Standards3, the quinquennial age groups (classify age in five years intervals) should be used for age distribution.\n\n\n\n\n\n\n\n\n\n\n\n\nThe amount of bins depends on the context required for the plots. Hence,\n\n\n\n\n\n\n\n\ncontext to plot population pyramids\nyoungest age group\neldest age group\n\n\n\n\npopulation\n0 - 4\n90 & Over\n\n\nresident labour force\n15 - 19\n70 & Over\n\n\nunemployed residents\n0 - 12\n55 & Over\n\n\nmarried couples in resident households\nbelow 30\n65 & Over\n\n\n\nnote : for quick reference, the labels below will be adopted in section 4 Discussion.\n\n\n\n\n\n\n\nrange\nlabel\n\n\n\n\n45-49 to 65-69\nBaby Boomer Generation\n\n\n35-39 to 40-44\nGen-X\n\n\n25-29 to 30-34\nGen-Y\n\n\n15-19 to 20 -24\nGen-Z\n\n\n\n\n\n\n\n\n\n\n\nReveal the demographic structure of Singapore at the Planning Area level by using the Age-Sex Population Pyramid method.\nDisplay nine (9) Population Pyramids in a single view.\n\nMy approach in essence :\n\nOut of this study’s 55 Singapore Planning Areas (PAs), nine are filtered based on the top 9 highest population count.\nPlot 2 types of facets i.e. grid and wrap to explore the feasibility of visual analysis\n\n\nWrite 500 words to discuss the pattern revealed by the plot."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#acquire-upload-data",
    "href": "takeHome/th_ex1/th_ex1.html#acquire-upload-data",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "2.1 Acquire & Upload Data",
    "text": "2.1 Acquire & Upload Data\n\n2.1.1 Acquire Data\n\n\n\n\n\n\nThis study will be based on demographic data set downloadable from Singstat.gov.sg.\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nData may not add up due to rounding.\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nMetadata :\n\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime - Time / Period\n\n\n\n\n\n\n\n\n\n\n2.1.2 Upload Data into Tableau Desktop\n\n\n\n\n\n\n\n\n\n\n\n\nStep-2.1 : Click “File” from the Tableau Desktop main menu and select “Open” from the drop-down options.\n\n\n\nFigure 2.1\n\n\n\n\n\n\n\n\n\n\n\nnote : If the above screen is not your landed screen, click here\n\n\n\n\n\nFret not! If Figure 2.2 is your landed screen, from the bottom left corner, click “Data Source”. You will be directed to the homepage, then perform Step-2.1.\n\n\n\nFigure 2.2\n\n\n\n\n\n\n\n\n\n\n\nStep-2.2 : Select “respopagesextod2022” to load the file into Tableau Desktop when prompted by an “Open” window. Once the data is loaded, your screen should look similar to Figure 2.3."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#wrangle-data",
    "href": "takeHome/th_ex1/th_ex1.html#wrangle-data",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "2.2 Wrangle Data",
    "text": "2.2 Wrangle Data\n\n2.2.1 Derive New Calculated Fields\n\n\n\n\n\n\n\n\n\n\n\n\nStep-2.3 : Click on the inverted triangle icon within the “Sex” field, as highlighted in Figure 2.3.\n\n\n\nFigure 2.3\n\n\n\n\n\n\n\n\n\n\n\nStep-2.4 : As shown in Figure 2.4, select “Create Calculated Field…” from the drop-down options to open an input panel, as shown in Figure 2.5.\n\n\n\nFigure 2.4\n\n\n\n\n\nFigure 2.5\n\n\n\n\n\n\n\n\n\n\n\nStep-2.5 : To create “Male Population” measured field, first change the field title to “Male Population”.\nNext, input “IF [Sex] =”Males” THEN [Pop] END”, as shown in Figure 2.6.\n\n\n\nFigure 2.6\n\n\n\n\n\n\n\n\n\n\n\nStep-2.6 : Repeat Step-2.5 but this time set the title as “Female Population”, and replace “Males” with “Females”."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#filter-top-9-planning-area-by-population",
    "href": "takeHome/th_ex1/th_ex1.html#filter-top-9-planning-area-by-population",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "2.3 Filter Top 9 Planning Area by Population",
    "text": "2.3 Filter Top 9 Planning Area by Population\n\n\n\n\n\n\n\n\n\n\n\n\nStep-2.7 : Place “PA” field on the “Rows” shelf, as shown in Figure 2.7.\n\n\n\nFigure 2.7\n\n\n\n\n\n\n\n\n\n\n\nStep-2.8 : Double click “Pop” field from the “Data” pane on the left. It will be automatically summed up on the “Rows” shelf.\n\n\n\n\n\n\n\n\n\nStep-2.9 : Right-click on the space highlighted in red (refers to Figure 2.7) above the column of the population count to sort it in “Sort descending” order. Refer to Figure 2.8.\n\n\n\nFigure 2.8\n\n\n\n\n\n\n\n\n\n\n\nStep-2.10 : Click the inverted triangle icon (next to “PA” on the “Rows” shelf) and select “Filter” to open the “Filter [PA]” window.\nNext, change “10” to “9” for the “Top” value under section “By field:”, under the “Top” tab, as shown in Figure 2.9.\n\n\n\nFigure 2.9\n\n\n\n\n\n\n\n\nFigure 2.10\n\n\nFor future references, the table below list out the regions for each of these filtered Planning Areas.\n\nTable 2.1 : List of Singapore Region for the top 9 Planning Area.\n\n\n\n\n\n\nPlanning Area\nRegion\n\n\n\n\nBedok\nEast\n\n\nTampines\nEast\n\n\nJurong West\nWest\n\n\nSengkang\nNorth-East\n\n\nWoodlands\nNorth\n\n\nHougang\nNorth-East\n\n\nYishun\nNorth\n\n\nChoa Chu Kang\nWest\n\n\nPunggol\nNorth-East"
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#trellis-plot-for-population-pyramid",
    "href": "takeHome/th_ex1/th_ex1.html#trellis-plot-for-population-pyramid",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "3.1 Trellis Plot for Population Pyramid",
    "text": "3.1 Trellis Plot for Population Pyramid\nThis section entails steps for two trellis layouts for 9 population pyramids :\n\ngrid facet - plot all pyramids in a row.\nwrap facet - plot all pyramids 3 x 3 matrix.\n\n\n3.1.1 Grid Facet - Plot by Single Row\n\n\n\n\n\n\n\n\n\n\n\n\nStep-3.1 : Select “horizontal bars” from the chart options under “Show Me” at the top right corner.\n\n\n\n\n\n\n\n\n\nStep-3.2 : Drag “Gender” to “Color” under the “Marks” card.\nNext, drag the filtered “PA” to the “Columns” shelf and place “Age Group” on the “Rows” shelf.\nThereafter, place the “Male Population” and “Female Population” fields on the “Columns” shelf. Refers to Figure 3.1.\n\n\n\nFigure 3.1\n\n\n\n\n\n\n\n\n\n\n\nStep-3.3 : Right-click the “Male Population” on the x-axis to select “Edit Axis…” function. You will be prompted with a window name “Edit Axis [Male Population]”.\n\n\n\nFigure 3.2\n\n\n\n\n\n\n\n\n\n\n\nStep-3.4 : Tick the “Reversed” check box under the “Scale” section, as shown in Figure 3.3.\nOnce reversed, the chart should look similar to Figure 3.4.\n\n\n\nFigure 3.3\n\n\n\n\n\nFigure 3.4\n\n\n\n\n\n\n\n\n\n\n\nStep-3.5 : Tick “Show mark label” via “Label” under “Marks” card.\n\n\n\nFigure 3.5\n\n\n\n\n\n\n\n\n\n\n\nStep-3.6 : Right-click the y-axis to add colour to differentiate rows for visual references. Refers to Figure 3.6.\n\n\n\nFigure 3.6\n\n\n\n\n\n\n\n\n\n\n3.1.2 Wrap Facet - Plot by 3x3 Matrix\n\n\n\n\n\n\nThere are two main parts to this approach :\n\nCreate a layout matrix that consists of parameter, index, columns and rows fields.\nPlot chart.\n\n\n3.1.2.1 create new fields required for the layout matrix\n\n\n\n\n\n\nStep-3.7 : Start with a new worksheet.\nClick the inverted triangle icon from the “Data” pane to select the “Create Parameter…” function, as highlighted in red in Figure 3.7.\n\n\n\nFigure 3.7\n\n\n\n\n\n\n\n\n\n\n\nStep-3.8 : Create a new parameter with “Total Columns” as the name, “Integer” for the “Data Type”, and set “Current Value” to 3 when prompted with the “Create Parameter” window, as shown in Figure 3.8.\n\n\n\nFigure 3.8\n\n\n\n\n\n\n\n\n\n\n\nStep-3.9 : Select “Create Calculated Field…” from the “Analysis” main menu. Refer to Figure 3.9.\n\n\n\nFigure 3.9\n\n\n\n\n\n\n\n\n\n\n\nStep-3.10 : Create calculated fields with the following input :\n\n\n\n\n\n\ninput to create new fields (refer to Figure 3.10)\n\n\n\n\nfield title : Index\ncode : INT((INDEX())%[Total Columns]^2+1)\n\n\nfield title : Column\ncode : (([Index]-1)%[Total Columns])+1\n\n\nfield title : Row\ncode : INT(([Index]-[Column])/[Total Columns])+1\n\n\n\n\n\n\nFigure 3.10\n\n\n\n\n\n\n\n3.1.2.2 set the framework to wrap the population pyramids\n\n\n\n\n\n\nStep-3.11 : Place the following fields accordingly (refers to Figure 3.11) :\n\n“PA” and “Index” to the “Detail” under “Marks” card.\n“Column” to the “Columns” shelf.\n“Row” to the “Rows” shelf.\n\n\n\n\nFigure 3.11\n\n\n\n\n\n\n\n\n\n\n\nStep-3.12 : Click the inverted triangle icon next to the “PA” (highlighted in Figure 3.11) within the “Marks” card to select the “Filter…” option.\n\n\n\n\n\n\n\n\n\nStep-3.13 : Change the value “10” to “9” and input the following formula “Sum([Pop])”, as shown in Figure 3.12.\n\n\n\nFigure 3.12\n\n\nNote : alternately, you can repeat the same step entails under Step-2.10. The output will still be the same.\n\n\n\n\n\n\n\n\n\nStep-3.14 : Change the field type from “Continuous” to “Discrete” type. Do this to both the “Column” and “Row” fields.”Without first performing this step, Tableau cannot plot a horizontal bar chart.\n\n\n\nFigure 3.13\n\n\n\n\n\n\n\n\n\n\n\nStep-3.15 : From the triangle icon, click on the “Compute Using” option to select “PA”, as shown in Figure 3.14. Do this to both the “Column” and “Row” fields.\nOnce done, 9 cubics will be laid out in the manner of 3 by 3. Refers to Figure 3.15.\n\n\n\nFigure 3.14\n\n\n\n\n\nFigure 3.15\n\n\n\n\n\n\n\n3.1.2.3 plot trellis population pyramid\n\n\n\n\n\n\nStep-3.16 : Place the following fields accordingly (refers to Figure 3.16) :\n\n“Gender” to the “Color” on the “Marks” card.\n“Male Population” and “Female Population” to the “Columns” shelf.\n“Age Group” to the “Rows” shelf.\n\nOnce placed these fields are placed, reverse the “Male Population” as entails under Step-3.4.\n\n\n\nFigure 3.16\n\n\n\n\n\n\n\n\n\n\n\nStep-3.17 : Un-tick the option “Show Header” for column “Row”, as shown in Figure 3.17.\n\n\n\nFigure 3.17"
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#create-supplementary-chart",
    "href": "takeHome/th_ex1/th_ex1.html#create-supplementary-chart",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "3.2 Create Supplementary Chart",
    "text": "3.2 Create Supplementary Chart\nThis section lists the steps to plot circles that reveal the differences in gender population for each planning area.\n\n\n\n\n\n\n\n\n\n\n\n\nStep-3.18 : Reproduce Figure 3.10.\n\n\n\n\n\n\n\n\n\nStep-3.19 : Adjust the following fields accordingly :\n\nfiltered “PA” from “Rows” to “Columns” shelf.\n“SUM(Pop)” to the “Rows” shelf.\n“Gender” to “Color” on the “Marks” card.\n\n\n\n\n\n\n\n\n\n\nStep-3.20 : Select “circle views” from the “Show Me” chart options and change the “Shape” to “Circle” on the “Marks” card.\n\n\n\n\n\n\n\n\n\nStep-3.21 : Update the y-axis via :\n“Edit Axis…” :\n\nChange the y-axis title to “Population Count”.\nSet the range to “Fixed” option.\nSet 80,000 as the “Fixed start” value.\nset 150,000 as the “Fixed end” value.\n\n“Format” :\n\nSet the “Shading” under “Default” to your preferred colour."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#create-visual-analytics-dashboard",
    "href": "takeHome/th_ex1/th_ex1.html#create-visual-analytics-dashboard",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "3.3 Create Visual Analytics Dashboard",
    "text": "3.3 Create Visual Analytics Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nStep-3.22 : Set the dashboard’s size to “Generic Desktop” and place the population pyramid trellis above, and the circles chart for gender population differences below.\n\n\n\nFigure 3.18\n\n\n\n\n\n\n\n\n\n\n\nStep-3.23 : Right-click the circles chart for the gender differences to hide it, as shown in the Figure 3.19.\n\n\n\nFigure 3.19\n\n\n\n\n\n\n\n\n\n\n\nStep-3.24 : Drag the legend to place it below the circles chart.\nSet the “Arrange Items” to “Single Row”."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#design-aspects",
    "href": "takeHome/th_ex1/th_ex1.html#design-aspects",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "Design Aspects",
    "text": "Design Aspects\n\nHorizontal References\nUsing quinquennial age groups for this study means the chart will have 19 age groups. Unlike a single population pyramid plot, for a trellis plot, this type of age group classification can be visually challenging when referring to an age group of a bar for the population pyramids that are plotted further away from the age group axis. This issue is more noticeable for the grid facet than the wrap facet.\nHence, regardless of the type of trellis plot, the background rows for the female population are coloured alternately to facilitate references horizontally across the cells. Refers to Figure 4.1. However, the background rows for the Male population are left blank to minimise the cluttering sense.\n\n\nSingle Context versus Multiple Contexts\nAs shown in Figure 4.1, these demographic plots, regardless of which type of facet, can be challenging for other contexts’ visual analysis. For example, without an additional indicator, it is difficult to derive the sum and the ratio of the employed and unemployed population for each Planning Area. Thus, this plot may not be helpful for discussions that involve allocating resources for public infrastructures or services.\nBut, the clarity and aesthetic aspects can be compromised when considering a plot for multiple contexts. Too many indicators can distract or dilute the key aspects or patterns intended to convey or highlight.\n\n\n\nFigure 4.2 : Additional chart to supplement visual analytics. Find out more from my viz on Tableau Public for a more interactive view.\n\n\n\n\nVisualise the Differences for Age Group or Gender\nEven when displaying the population figure for each bar, it can be challenging to quickly identify which Planning Area has the most prominent differences between Male and Female populations or the genders are evenly distributed. Hence, an additional chart, such as a circle plot, as shown in Figure 4.2 can facilitate a reader to identify or gauge the differences effectively."
  },
  {
    "objectID": "takeHome/th_ex1/th_ex1.html#insights",
    "href": "takeHome/th_ex1/th_ex1.html#insights",
    "title": "TRELLIS POPULATION PYRAMIDS OF TOP 9 SINGAPORE PLANNING AREAS",
    "section": "Insights",
    "text": "Insights\nAs indicated by the figures, comparing the medium-old age groups, which is age 75 or older, the female population is larger than the males across all these 9 Singapore Planning Areas.\n\nConstrictive Trend\nOnly Bedok and Jurong West have a predominantly constrictive trend pattern with a small dent around middle-aged, especially the Gen-X. The rest of the 7 Planning Areas, however, show a mixture of constrictive trends with some form of either expansive or stationary trend.\n\n\nExpansive Trend\nOn the other hand, only Punggol area shows a mixture of constrictive trends with a noticeable expansive trend observed below age 30. While the middle-aged group is the largest population, its younger generation population (below age 14) is higher than the ages 15 to 29. This indicates a higher birth rate, which is true as this developing township was re-vitalised by the Punggol 21-plus plan around the early 2010s that envisioned having 96,000 units when fully developed, attracting Gen-X and older generation, and their descendants contributed to the observed expansive trend, especially those below age 9.4\n\n\nStationary Trend\nAs shown in Figure 4.1 above, Tampines, Sengkang and Yishun are the PAs with “pillar”-like distributions. Unlike Tampines and Yishun, which have a higher Gen-Y population, Sengkang has a higher Gen-X population."
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html",
    "href": "takeHome/th_ex2/th_ex2.html",
    "title": "DataViz Makeover",
    "section": "",
    "text": "There are two main focuses for this makeover assignment, that is :\n\nCritic or feedback on the trellis plot of 9 population pyramids created by a fellow coursemate, Chen Yi Man, with consent.\nRemake and refine the trellis plot with an alternative design based on the principles and best practices learned in Lessons 1 and 2, using R packages, specifically ggplot2, ggplot2 extensions and tidyverse packages.\n\n\n\n\n\n\n\nRequirement Details for this Individual Assignment\n\n\n\n\n\n\nselect one of the Take-home Exercise 1 prepared by your classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices you had learned in Lesson 1 and 2, and remake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\nThe purpose of DataVis Makeover is to improve on the original visualisation. Focus on what works, what doesn’t work, why those things don’t work, and how you made it better. You should try stick to the fields in the data set provided and improve upon the original visualisation.\n\n\n\n\n\nThere are two main instructions for the first take-home exercise, which are to reveal the demographic structure of Singapore at the planning area level by using the age-sex pyramid method and displaying 9 selected planning areas on a single view.\nFor this section, the review will be based on clarity and aesthetics.\n\n\nWithin a short amount of time (less than a week), for a person totally new to Tableau, she was able to deliver an inspiring piece of work in the following aspects :\n\nThree (3) different depths - an overview of Singapore at a national level, followed by Singapore Planning Areas (PAs) and Sub Zones for each PA.\nCompliment the storytelling with a degree of geospatial visual analysis.\nProvide interactive features that facilitate visual analysis of the topic.\n\n\n\n\nFigure 1.1 Landing view with an overview of Singapore Population Pyramid.\n\n\n\n\n\nFigure 1.2 Display trellis plot of Singapore Population Pyramids by 55 Planning Area.\n\n\n\n\n\nFigure 1.3 Display trellis plot of Singapore Population Pyramids by subzone.\n\n\n\n\n\nHowever, in terms of clarity and aesthetic aspects, there are four (4) main rooms for improvement :\n\n\n\n\n\n\n\n\n\n\nwhat doesn’t work\nfeedback\nsuggestion\n\n\n\n\nChoice of words for the title.\n“Discovering Singapore Age Pyramid: Sex Pattern in Jun 2022”\nThe title is not conveying clear context.\n\nReaders may be mislead into the notion of this chart is based on age-related variable with sex-related value as the response variable.\nThe confusion is further enhanced by the colon character ” : “.\n\nSuggest stating the key focus upfront.\n\nIn this study, the key focus is the pattern, then followed by the supporting details such as the variables, location and time.\nFor example, “Discover Patterns of Age and Gender distribution in Singapore as of June 2022”.\n\n\n\nThe sequence of additional storyboards (landing storyboard consists of a Singapore map and a population pyramid, while the last storyboard consists of a trellis plot by sub-zones.\nThe entire approach may distract readers from the trellis plot of 9 selected PAs, which should be the main focus.\nPerhaps can reduce the storyboards to two, meaning :\n\nCombine both overview and the trellis plot of 9 selected PAs into a storyboard\nThe storyboard of the trellis for subzones can remains the same.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwhat doesn’t work\nfeedback\nsuggestion\n\n\n\n\nDisplay 55 PAs’ population pyramids.\nFor a static plot, readers won’t be able to view 55 PA’s population pyramids plotted diagonally within a single view.\nEven if it’s an interactive plot, a filter of 9 PAs should have been provided to the readers.\nFirst, filter 9 PAs by context before plotting them into a single view.\n\nFor example, the top 9 highest population count or the gender-population count.\n\n\n\n\n\n\n\n\n\n\nwhat doesn’t work\nfeedback\nsuggestion\n\n\n\n\nSingle colour for 2 different values, “Males” and “Females”.\nUnless viewed from 15-inch laptops or a bigger monitor screen, a reader can only identify which side of the bars represents males or females after scrolling down the screen.\nAssign 2 different colours for the gender variable.\n\n\nAge group is showing “Null” value, and grouped age into 10 years intervals.\nNo caption or note to clarify “Null” value.\nContext is not clear why the age is grouped into 10 years.\nFor demographic structure, should use quinquennial age groups (grouped age in 5 years intervals).\n\nClick here to find out more about ages grouping for different contexts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1.4 Proposal for Alternative Design\n\n\nRemarks :\nThis proposal sketch is done with Figma web-tool.\n\n\n\na. Context : The proposed design will inherit the context requirement from the first Take-home assignment, which is to reveal Singapore’s demographic structure with two key variables : age-groups and gender as of June 2022. It will be a trellis plot of population pyramids with wrap facet 3 by 3. The top 9 Singapore Planning Areas with the highest population counts.\nb. Title & Subtitle : The proposed design has a title consisting of the main subject, supporting details and location, while the variables and time will be under the subtitle.\nc.X-axis Label : Only show the x-axis title below the chart. The population count value will be hidden as the proportion of values to bars are too huge to be meaningful. Should the readers interested to learn more about the figures, they can refer to the data table that presenting below the plot.\nd. Y-axis Title & Text : Y-axis title will be displayed above the axis instead of next to the value. The age-group values will need to be sorted with the oldest at the top.\ne. Legend : Only the genders’ values will be displayed, which are “Males” and “Females”.\nf. Caption : It will state the data source and the year of data obtained.\n\n\n\na. X-axis labels : Only the x-axis title is shown to minimise clustering the chart with figures.\nb. Tick marks & background border lines : The colours thereof will be “mid-grey” to focus readers more on the bars.\nc. Gridlines : Only display horizontal grid lines since identifying the bars’ length from a static plot is not practical.\n(d) Colour : A pair of high-contrast colours will be assigned to the gender values. Titles and subtitles will be in various shades of grey.\n(e) Font size: The font size of the main title will be more prominent than the sub-title. This will help to set the reader’s focus on the right context when analysing the chart."
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#load-r-packages",
    "href": "takeHome/th_ex2/th_ex2.html#load-r-packages",
    "title": "DataViz Makeover",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\n\nShow the code\npacman::p_load(tidyverse, ggpubr, readxl, knitr, plotly, skimr, questionr, funModeling, ggplot2, sf, tmap, quanteda, NLP, patchwork, ggpmisc, gridExtra, kableExtra)"
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#acquire-data-source",
    "href": "takeHome/th_ex2/th_ex2.html#acquire-data-source",
    "title": "DataViz Makeover",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on demographic data set downloadable from Singstat.gov.sg.\n\nDownload “Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nData may not add up due to rounding.\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nMetadata :\n\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime - Time / Period"
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#import-data",
    "href": "takeHome/th_ex2/th_ex2.html#import-data",
    "title": "DataViz Makeover",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import Attributes Data\n\n\n\n\n\n\nThere are two (2) steps involve, which are import and inspect imported data set.\n\n3.2.1.1 import data\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\n\nShow the code\npop_attribute <- read_csv(\"data/aspatial/respopagesextod2022.csv\")\n\nproblems(pop_attribute)\n\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.1.2 inspect missing value\n\n\nShow the code\nskimr::skim(pop_attribute)\n\n\n\n\n\nData summary\n\n\n\n\nName\n\n\npop_attribute\n\n\n\n\nNumber of rows\n\n\n100928\n\n\n\n\nNumber of columns\n\n\n7\n\n\n\n\n_______________________\n\n\n\n\n\n\nColumn type frequency:\n\n\n\n\n\n\ncharacter\n\n\n5\n\n\n\n\nnumeric\n\n\n2\n\n\n\n\n________________________\n\n\n\n\n\n\nGroup variables\n\n\nNone\n\n\n\n\n\nVariable type: character\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmin\n\n\nmax\n\n\nempty\n\n\nn_unique\n\n\nwhitespace\n\n\n\n\n\n\nPA\n\n\n0\n\n\n1\n\n\n4\n\n\n23\n\n\n0\n\n\n55\n\n\n0\n\n\n\n\nSZ\n\n\n0\n\n\n1\n\n\n4\n\n\n29\n\n\n0\n\n\n332\n\n\n0\n\n\n\n\nAG\n\n\n0\n\n\n1\n\n\n6\n\n\n11\n\n\n0\n\n\n19\n\n\n0\n\n\n\n\nSex\n\n\n0\n\n\n1\n\n\n5\n\n\n7\n\n\n0\n\n\n2\n\n\n0\n\n\n\n\nTOD\n\n\n0\n\n\n1\n\n\n6\n\n\n39\n\n\n0\n\n\n8\n\n\n0\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmean\n\n\nsd\n\n\np0\n\n\np25\n\n\np50\n\n\np75\n\n\np100\n\n\nhist\n\n\n\n\n\n\nPop\n\n\n0\n\n\n1\n\n\n40.44\n\n\n125.73\n\n\n0\n\n\n0\n\n\n0\n\n\n20\n\n\n2300\n\n\n▇▁▁▁▁\n\n\n\n\nTime\n\n\n0\n\n\n1\n\n\n2022.00\n\n\n0.00\n\n\n2022\n\n\n2022\n\n\n2022\n\n\n2022\n\n\n2022\n\n\n▁▁▇▁▁\n\n\n\n\n\n\n\n\n\n3.2.1.3 inspect values\n\nunique(pop_attribute$Time)\n\n[1] 2022\n\n\n\n\nShow the code\nunique(pop_attribute$TOD)\n\n\n[1] \"HDB 1- and 2-Room Flats\"                \n[2] \"HDB 3-Room Flats\"                       \n[3] \"HDB 4-Room Flats\"                       \n[4] \"HDB 5-Room and Executive Flats\"         \n[5] \"HUDC Flats (excluding those privatised)\"\n[6] \"Condominiums and Other Apartments\"      \n[7] \"Landed Properties\"                      \n[8] \"Others\"                                 \n\n\nRemarks :\nCan remove “SZ”, “Time” and “TOD” fields as they are not needed for age-sex population pyramids."
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#data-wrangling",
    "href": "takeHome/th_ex2/th_ex2.html#data-wrangling",
    "title": "DataViz Makeover",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Change Field Names to Lowercase\n\n\n\n\n\n\nTo avoid confusion between field names used in data and discussions, change all fields’ name to lowercase.\n\n\n\n\n\n\nUsage of the code chunk below :\ntolower( ) - quanteda - to convert fields’ name into lower case.\n\n\n\n\nnames(pop_attribute) <- tolower(names(pop_attribute))\n\n\n\n\n\n\n3.3.2 Remove Non-Alphameric Character\n\n\n\n\n\n\nThere are special character such as “_” among the Age Groups’ values.\nUnable to use str_sub( ) function from stringr package as the position of “_” is varied among values.\n\n\n\n\n\n\nUsage of the code chunk below :\ngsub( ) - base - to replace “_” with space ” “.\n\n\n\n\npop_attribute$ag <- gsub(\"_\", \n                         \" \", \n                         pop_attribute$ag, \n                         fixed = TRUE)"
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#group-variables",
    "href": "takeHome/th_ex2/th_ex2.html#group-variables",
    "title": "DataViz Makeover",
    "section": "3.4 Group Variables",
    "text": "3.4 Group Variables\nBefore grouping the entire data frame, first tested with a single Planning Area.\n\n3.4.1 Explore with a Planning Area :: Bedok\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngroup_by( ) - dplyr - to group Singapore population by age and gender.\nsummarise( ) - dplyr - to count the number of residents for each group.\n\n\n\n\ntest0 <- pop_attribute %>% \n  filter(pa == \"Bedok\") %>%\n  group_by(ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  ungroup()\n\n\n\n\n\n\n3.4.2 Visualise Data\n\n\n\n\n\n\n\nVisualise Bedok DataInspect Data\n\n\n\n\nShow the code\nggplot(data = test0,\n       aes(y = ag)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test Age Group Distribution\") \n\n\n\n\n\n\n\n\n\nShow the code\nunique(pop_attribute$ag)\n\n\n [1] \"0 to 4\"      \"5 to 9\"      \"10 to 14\"    \"15 to 19\"    \"20 to 24\"   \n [6] \"25 to 29\"    \"30 to 34\"    \"35 to 39\"    \"40 to 44\"    \"45 to 49\"   \n[11] \"50 to 54\"    \"55 to 59\"    \"60 to 64\"    \"65 to 69\"    \"70 to 74\"   \n[16] \"75 to 79\"    \"80 to 84\"    \"85 to 89\"    \"90 and over\"\n\n\n\n\n\n\nRemarks :\nNotice the age group “5 to 9” is placed after “45 to 49” instead of placed at the 2nd value as shown under the “Inspect Data” tab.\n\n\n\n\n\n\n3.4.3 Update Sequence of Age Groups Display\n\n\n\n\n\n\nThe update will be applied to 2 datasets, at national level and Planning Areas level.\n\n3.4.3.1 For Population Pyramid at National Level\n\n\n\n\n\n\nUsage of the code chunk below :\narrange( ) - dplyr - to sort the rows in descending order of the counted “Returned” value of each “Sub-category”.\n\n\n\n\n\nShow the code\nag_sequence <- c(\"0 to 4\", \"5 to 9\", \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\", \"30 to 34\", \"35 to 39\", \"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\", \"60 to 64\", \"65 to 69\", \"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\", \"90 and over\")\n\npop_sgp <- pop_attribute %>%\n  group_by(ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  mutate(ag = factor(ag, levels = ag_sequence)) %>%\n  arrange(ag) %>%\n  ungroup()\n\npop_sgp <- pop_sgp %>%\n  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),\n         res = str_c(count_pop, \", \", pct))\n\n\n\n\n3.4.3.2 For Population Pyramid at Planning Area level\n\nag_sequence <- c(\"0 to 4\", \"5 to 9\", \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\", \"30 to 34\", \"35 to 39\", \"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\", \"60 to 64\", \"65 to 69\", \"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\", \"90 and over\")\n\npop_pa <- pop_attribute %>%\n  group_by(pa, ag, sex) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  mutate(ag = factor(ag, levels = ag_sequence)) %>%\n  arrange(ag) %>%\n  ungroup()\n\npop_pa <- pop_pa %>%\n  mutate(pct = scales::percent((count_pop/sum(count_pop)), accuracy = 0.01),\n         res = str_c(count_pop, \", \", pct))"
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#create-9-planning-areas-data-set",
    "href": "takeHome/th_ex2/th_ex2.html#create-9-planning-areas-data-set",
    "title": "DataViz Makeover",
    "section": "3.5 Create 9 Planning Areas Data Set",
    "text": "3.5 Create 9 Planning Areas Data Set\n\n3.5.1 Create List of Planning Areas by Population\n\n\n\n\n\n\nFilter top 9 Planning Areas based on the highest population.\n\n\n\n\n\n\nUsage of the code chunk below :\nslice( ) - dplyr - to filter based on the first 9 rows.\n\n\n\n\npop_paList <- pop_attribute %>%\n  group_by(pa) %>%\n  summarise(`count_pop` = sum(`pop`)) %>%\n  ungroup()\n\nt3 <- arrange(pop_paList, desc(pop_paList$count_pop)) %>%\n  slice(1:3) %>%\n  select(pa)\n  \nt6 <- arrange(pop_paList, desc(pop_paList$count_pop)) %>%\n  slice(4:6) %>%\n  select(pa)\n  \nt9 <- arrange(pop_paList, desc(pop_paList$count_pop)) %>%\n  slice(7:9) %>%\n  select(pa)\n\nt19 <- arrange(pop_paList, desc(pop_paList$count_pop)) %>%\n  slice(1:9) %>%\n  select(pa)\n\nRemarks :\n\nt19 will be used to plot 9 population pyramids.\nOnce t3, t6 and t9 are plotted, they will be stacked together to compare the differences with the t19 plot.\n\n\n\n\n\n\n3.5.2 Filter Planning Areas\n\n\n\n\n\n\nFilter data frame based on the list of Planning Areas created in section 3.5.1.\n\nt3_filtered <- pop_pa %>% \n  filter(pop_pa$pa %in% t3$pa) %>%\n  arrange(factor(pa, \n                 levels = c(\"Bedok\", \"Tampines\", \"Jurong West\")))\n\nt6_filtered <- pop_pa %>% \n  filter(pop_pa$pa %in% t6$pa)\n\nt9_filtered <- pop_pa %>% \n  filter(pop_pa$pa %in% t9$pa)\n\nt19_filtered <- pop_pa %>% \n  filter(pop_pa$pa %in% t19$pa)"
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#plot-pyramid-chart-static-plot",
    "href": "takeHome/th_ex2/th_ex2.html#plot-pyramid-chart-static-plot",
    "title": "DataViz Makeover",
    "section": "4.1 Plot Pyramid Chart (Static Plot)",
    "text": "4.1 Plot Pyramid Chart (Static Plot)\n\n4.1.1 Plot Population Pyramid for National Level\n\n\n\n\n\n\n\n\n\n\n\n\nUsage of the code chunk below :\ngeom_col( ) - ggplot2 - to create the bar chart with the bar length represent the actual population stats.\nscale_x_continuous( ) - ggplot2 - to modify the labels on the x-axis to provide better readability.\nifelse( ) - base - to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\n\n\n\n\n\nShow the code\npopPyr_sgp <- ggplot(pop_sgp, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex)) + \n  geom_col() +\n  scale_x_continuous(limits = c(-170000, 170000),\n    breaks = seq(-200000, 200000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(200, 0, -50), \n                           seq(50, 200, 50))),\n                       \"k\")) +\n  scale_y_discrete(expand = expansion(mult = c(0, .04))) +\n  labs (x = \"Count of Population\", \n        y = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Demographic Structure of Singapore\",\n        subtitle = \"the shape of population pyramid reflects the distribution of\\npopulation by age groups and genders based on dataset dated June 2022\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, \n                                  colour = \"#302f2f\",\n                                  face = \"bold\",\n                                  hjust = 0.5),\n        plot.subtitle = element_text(size = 8,\n                                     colour = \"#424242\",\n                                     face = \"italic\",\n                                     hjust = 0.5),\n        plot.caption = element_text(size = 8,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.title.y = element_text(angle = 0, \n                                    size = 8, \n                                    colour = \"#302f2f\",\n                                    vjust = 1.07,\n                                    hjust = 1,\n                                    margin = margin(r = -50, l = 10)),\n        axis.title.x = element_text(size = 8, \n                                    colour = \"#302f2f\"),\n        axis.text.x = element_text(size = 7,\n                                   colour = \"#424242\"),\n        axis.text.y = element_text(size = 7,\n                                   colour = \"#424242\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 7,\n                                   colour = \"#424242\"),\n        legend.title = element_text(size = 8,\n                                    colour = \"#302f2f\"),\n        panel.grid.major.y = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        legend.background = element_rect(fill = \"#f7e9cd\"),\n        legend.margin = margin(t = -10),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3)) +\n  geom_text(aes(label = pct),\n            hjust = ifelse(pop_sgp$sex == \"Males\",\n                           yes = 1.2, \n                           no = -0.2),\n            size = 2,\n            check_overlap = FALSE,\n            colour = \"#424242\") +\n  scale_fill_manual(values = c(\"Males\" = \"#FFA319FF\", \n                               \"Females\" = \"#302f2f\"))\n\npopPyr_sgp\n\n\n\n\n\nRemark :\nThe pyramid above shows the younger generation’s lower percentage, making Singapore’s population structure a constrictive type. That means an ageing population.\nBy June 2022, 4.07 million residents population with a median age of 42.1,1 which is approximately a 19% increase from the median age of 35.3 back in the year 20022.\nAlso, another observation is from 25 age onward, the female population is higher than the male population.\nAs of 2020, Singapore’s adjusted gender pay gap (GPG) is at 6%3. Measures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions.\n\n\n\n\n\n4.1.2 Plot Trellis Population Pyramid with Wrap Facet\n\n\n\n\n\n\n\n\nShow the code\npopPyr_t19.fw <- ggplot(t19_filtered, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex),\n                     width = 0.9,\n                     position = position_dodge(width = 0.9 )) + \n  geom_col() +\n  scale_y_discrete(expand = expansion(mult = c(0.04, .04))) +\n  facet_wrap(~factor(pa, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\",\n                                    \"Sengkang\", \"Woodlands\", \"Hougang\",\n                                    \"Yishun\", \"Choa Chu Kang\", \"Punggol\")),\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\") +\n  labs (x = \"Count of Population\", \n        y = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Demographic Structure - Top 9 Planning Areas by Population\",\n        subtitle = \"Compare the population pyramids' shapes that shows the distribution of age groups & genders based on dataset dated June 2022\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\\nThe details of the population count for each age-groups and gender are tabulated below.\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 22, \n                                  colour = \"#302f2f\",\n                                  face = \"bold\"),\n        plot.subtitle = element_text(size = 12,\n                                     colour = \"#424242\",\n                                     face = \"italic\",\n                                     margin = margin(0,0,10,0)),\n        plot.caption = element_text(size = 10,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 12,\n                                  face = \"bold\",\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.ticks.x = element_blank(),\n        axis.title.y = element_text(angle = 0, \n                                    size = 10,\n                                    colour = \"#302f2f\",\n                                    vjust = 1.02,\n                                    margin = margin(r = -50, l = 20)),\n        axis.title.x = element_text(size = 10,\n                                    colour = \"#302f2f\",\n                                    margin = margin(5,0,0,0)),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 10,\n                                   colour = \"#424242\",\n                                   margin = margin(r = 8)),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        plot.margin = margin(1,0.8,1,0,\"cm\"),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3),\n        legend.title = element_text(size = 10,\n                                    colour = \"#302f2f\"),\n        legend.text = element_text(size = 10,\n                                   face = \"bold\",\n                                   colour = \"#424242\"),\n        legend.background = element_rect(fill = \"#f7e9cd\"),\n        legend.margin = margin(t = -8),\n        legend.position = \"bottom\",\n        legend.justification = \"left\") +\n  scale_fill_manual(values = c(\"Males\" = \"#FFA319FF\",\n                               \"Females\" = \"#302f2f\"))\n\npopPyr_t19.fw\n\n\n\n\n\n\n\n\n\n\n4.1.3 Plot Trellis Population Pyramid with Grid Facet\n\n\n\n\n\n\n\n\nShow the code\npopPyr_t19.fg <- ggplot(t19_filtered, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex),\n                     width = 0.9,\n                     position = position_dodge(width = 0.9 )) + \n  geom_col() +\n  scale_y_discrete(expand = expansion(mult = c(0, .05))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#FFA319FF\",\n               \"Females\" = \"#302f2f\"),\n    breaks = c(\"Males\", \"Females\")) +\n  facet_grid(~factor(pa, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\",\n                                    \"Sengkang\", \"Woodlands\", \"Hougang\",\n                                    \"Yishun\", \"Choa Chu Kang\", \"Punggol\"))) +\n  labs (x = \"Count of Population\", \n        y = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Demographic Structure - Top 9 Planning Areas by Population\",\n        subtitle = \"Compare the population pyramids' shapes that shows the distribution of age groups & genders based on dataset dated June 2022\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\\nThe details of the population count for each age-groups and gender are tabulated below.\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 22, \n                                  colour = \"#302f2f\",\n                                  face = \"bold\"),\n        plot.subtitle = element_text(size = 12,\n                                     colour = \"#424242\",\n                                     face = \"italic\",\n                                     margin = margin(0,0,10,0)),\n        plot.caption = element_text(size = 10,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 12,\n                                  face = \"bold\",\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.ticks.x = element_blank(),\n        axis.title.y = element_text(angle = 0, \n                                    size = 10,\n                                    colour = \"#302f2f\",\n                                    vjust = 1.02,\n                                    margin = margin(r = -50, l = 20)),\n        axis.title.x = element_text(size = 10,\n                                    colour = \"#302f2f\",\n                                    margin = margin(5,0,0,0)),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 10,\n                                   colour = \"#424242\",\n                                   margin = margin(r = 8)),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        plot.margin = margin(1,0.8,1,0,\"cm\"),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3),\n        legend.title = element_text(size = 10,\n                                    colour = \"#302f2f\"),\n        legend.text = element_text(size = 10,\n                                   face = \"bold\",\n                                   colour = \"#424242\"),\n        legend.background = element_rect(fill = \"#f7e9cd\"),\n        legend.margin = margin(t = -8),\n        legend.position = \"bottom\",\n        legend.justification = \"left\") +\n  scale_fill_manual(values = c(\"Males\" = \"#FFA319FF\",\n                               \"Females\" = \"#302f2f\"))\n  \npopPyr_t19.fg\n\n\n\n\n\nRemark :\nUsing the same font size as the 4.1.2 plot, the text for this grid facet chart became smaller, which made it difficult to view. Hence, this chart will not be considered for the final submission."
  },
  {
    "objectID": "takeHome/th_ex2/th_ex2.html#explore-other-approach",
    "href": "takeHome/th_ex2/th_ex2.html#explore-other-approach",
    "title": "DataViz Makeover",
    "section": "4.2 Explore Other Approach",
    "text": "4.2 Explore Other Approach\n\n4.2.1 Approach #1 - Stack Multiple Grid Facets\n\n\n\n\n\n\nThere are 2 parts to this approach :\n\n1st part - plot 3 grid facets of population pyramids\n2nd part - stack the 3 grid facets with ggarrange( ) function from ggpubr package.\n\n\n4.2.1.1 plot 3 facet grids\n\nTop 3 PAsBetween Top 4 to 6 PAsBetween Top 7 to 9 PAs\n\n\n\n\nShow the code\npopPyr_t3 <- ggplot(t3_filtered,\n                    aes(x = ifelse(sex == \"Males\",\n                                   yes = -count_pop,\n                                   no = count_pop),\n                        y = ag,\n                        fill = sex),\n                    width = 0.9,\n                    position = position_dodge(width = 0.9 )) + \n  geom_col() +\n  scale_y_discrete(expand = expansion(mult = c(0, .05))) +\n  scale_fill_manual(values = c(\"Males\" = \"#FFA319FF\",\n                               \"Females\" = \"#302f2f\")) +\n  facet_grid(~factor(pa, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\"))) +\n  scale_x_continuous(limits = c(-13000, 13000),\n                     expand = expansion(mult = c(0, .04))) +\n  labs (x = \"\", \n        y = \"Age Group\",\n        title = \"Singapore Demographic Structure - Top 9 Planning Areas by Population\",\n        subtitle = \"Compare the population pyramids' shapes that shows the distribution of age groups & genders based on dataset dated June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 20, \n                                  colour = \"#302f2f\",\n                                  face = \"bold\"),\n        plot.subtitle = element_text(size = 12,\n                                     colour = \"#424242\",\n                                     face = \"italic\"),\n        plot.caption = element_text(size = 10,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 12,\n                                  face = \"bold\",\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.ticks.x = element_blank(),\n        axis.title.y = element_text(angle = 0, \n                                    size = 10,\n                                    face = \"bold\",\n                                    colour = \"#302f2f\",\n                                    vjust = 1.04,\n                                    hjust = 0.9,\n                                    margin = margin(r = -40, l = 20)),\n        axis.title.x = element_text(size = 10, \n                                    colour = \"#302f2f\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 9,\n                                   colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3),\n        plot.margin = margin(0.5,0.5,0.1,-0.2,\"cm\"),\n        legend.position = \"none\")\n\npopPyr_t3\n\n\n\n\n\n\n\n\n\nShow the code\npopPyr_t6 <- ggplot(t6_filtered, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex),\n                     width = 0.9,\n                     position = position_dodge(width = 0.9 )) + \n  geom_col() +\n  scale_y_discrete(expand = expansion(mult = c(0, .05))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#FFA319FF\",\n               \"Females\" = \"#302f2f\")) +\n  facet_grid(~factor(pa, levels = c(\"Sengkang\", \"Woodlands\", \"Hougang\"))) +\n  scale_x_continuous(limits = c(-13000, 13000),\n                     expand = expansion(mult = c(0, .04))) +\n  theme_bw() +\n  theme(strip.text = element_text(size = 12,\n                                  face = \"bold\",\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.ticks.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 9,\n                                   colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3),\n        plot.margin = margin(0.1,0.5,0.5,0.5,\"cm\"),\n        legend.position = \"none\")\n\npopPyr_t6\n\n\n\n\n\n\n\n\n\nShow the code\npopPyr_t9 <- ggplot(t9_filtered, \n                       aes(x = ifelse(sex == \"Males\",\n                                      yes = -count_pop,\n                                      no = count_pop),\n                           y = ag,\n                           fill = sex),\n                     width = 0.9,\n                     position = position_dodge(width = 0.9 )) + \n  geom_col() +\n  scale_y_discrete(expand = expansion(mult = c(0, .05))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#FFA319FF\",\n               \"Females\" = \"#302f2f\")) +\n  facet_grid(~factor(pa, levels = c(\"Yishun\", \"Choa Chu Kang\", \"Punggol\")))+\n  scale_x_continuous(limits = c(-13000, 13000),\n                     expand = expansion(mult = c(0, .04))) +\n  labs (x = \"Count of Population\",\n        fill = \"Gender\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.caption = element_text(size = 10,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 12,\n                                  face = \"bold\",\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n        axis.ticks = element_line(colour = \"#969595\",\n                                  linewidth = 0.3),\n        axis.ticks.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(size = 10, \n                                    face = \"bold\",\n                                    colour = \"#302f2f\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 9,\n                                   colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#f7e9cd\"),\n        panel.border = element_rect(colour = \"#969595\",\n                                    linewidth = 0.3),\n        plot.margin = margin(0.1,0.5,0.5,0.5,\"cm\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.title = element_text(size = 12,\n                                    face = \"bold\",\n                                    colour = \"#302f2f\"),\n        legend.text = element_text(size = 10,\n                                   colour = \"#424242\"),        \n        legend.background = element_rect(fill = \"#f7e9cd\"),\n        legend.margin = margin(t = -10),)\n\npopPyr_t9\n\n\n\n\n\n\n\n\n\n\n4.2.1.2 stack 3 grid facets into 1 column\n\nggpubr::ggarrange(\n  popPyr_t3,\n  popPyr_t6,\n  popPyr_t9,\n  align = \"v\",\n  ncol = 1)\n\n\n\n\nRemark :\nThe end result of this approach is as good as the wrap facet approach in 4.1.2, except there are 2 lines of gap that are unable to get rid of within the due time. When extra free time is available, will attempt to overlap them by changing the margin value.\n\n\n\n\n\n\n4.2.2 Approach #2 - Patch 1 chart with 1 data table\n\n\n\n\n\n\nThis approach explores using patchwork function to combine chart and table.\n\npopPyr_t3 / (gridExtra::tableGrob(t19_filtered[1:342, \n                                               c(\"pa\", \"ag\", \"sex\", \"count_pop\")]))\n\nRemark :\n\n\n\n\n\n\nIssues with this approach\n\n\n\n\n\nFigure height was set to 100 via #| fig-height: 100, but :\n\nthe displays are overlapping.\nthe chart is elongated out of proportion.\n\n\n\n\n\n\n\n\n\n\n4.2.3 Approach #3 - Split data table to smaller tables before patch with 1 chart\n\n\n\n\n\n\nBased on 4.2.2 approach, this attempt is to break down the table so that the layouts are more manageable.\n\n\nShow the code\ngroup_paAg <- t19_filtered %>%\n  group_by(pa, ag) %>%\n  pivot_wider(id_cols = c(pa, ag),\n              names_from = sex,\n              values_from = count_pop)\n\ntable_top3 <- group_paAg %>%\n  filter(pa == \"Bedok\" | pa == \"Tampines\" | pa == \"Jurong West\") %>%\n  arrange(factor(pa, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\")))\n\ntable_top6 <- group_paAg %>%\n  filter(pa == \"Sengkang\" | pa == \"Woodlands\" | pa == \"Hougang\") %>%\n  arrange(factor(pa, levels = c(\"Sengkang\", \"Woodlands\", \"Hougang\")))\n\ntable_top9 <- group_paAg %>%\n  filter(pa == \"Yishun\" | pa == \"Choa Chu Kang\" | pa == \"Punggol\") %>%\n  arrange(factor(pa, levels = c(\"Yishun\", \"Choa Chu Kang\", \"Punggol\")))\n\n\n\npopPyr_t3 / (table1_1 | table1_2 | table1_3)\n\nRemark :\nBelow is the error message when using patchwork function to place the tables below the chart.\n” Error in FUN(left, right) : operations are possible only for numeric, logical or complex types ”\n\n\n\n\n\n4.2.4 Approach #4 - Same as Approach #3 but with kableExtra package\n\n\n\n\n\n\n\ntable_display <- kable(list(table_top3, table_top6, table_top9), \"html\") %>%\n  kable_styling(font_size = 10, \n                full_width = F) %>%\n  column_spec(1, border_right = T, background = \"#e8e3e3\") %>%\n  column_spec(2, border_right = T, background  = \"#e8e3e3\") %>%\n  column_spec(3, background  = \"#e8e3e3\") %>%\n  scroll_box(width = \"700px\", height = \"200px\")\n\ntable_display\n\n\n\n\n  \n    \n\n\n \n  \n    pa \n    ag \n    Females \n    Males \n  \n \n\n  \n    Bedok \n    0 to 4 \n    4970 \n    5090 \n  \n  \n    Bedok \n    5 to 9 \n    5700 \n    5960 \n  \n  \n    Bedok \n    10 to 14 \n    6220 \n    6440 \n  \n  \n    Bedok \n    15 to 19 \n    6660 \n    6770 \n  \n  \n    Bedok \n    20 to 24 \n    7310 \n    7860 \n  \n  \n    Bedok \n    25 to 29 \n    8820 \n    9060 \n  \n  \n    Bedok \n    30 to 34 \n    10050 \n    9750 \n  \n  \n    Bedok \n    35 to 39 \n    9380 \n    8250 \n  \n  \n    Bedok \n    40 to 44 \n    10330 \n    8860 \n  \n  \n    Bedok \n    45 to 49 \n    10850 \n    9880 \n  \n  \n    Bedok \n    50 to 54 \n    10170 \n    9880 \n  \n  \n    Bedok \n    55 to 59 \n    10570 \n    10080 \n  \n  \n    Bedok \n    60 to 64 \n    11070 \n    10580 \n  \n  \n    Bedok \n    65 to 69 \n    10300 \n    9470 \n  \n  \n    Bedok \n    70 to 74 \n    8710 \n    7920 \n  \n  \n    Bedok \n    75 to 79 \n    5180 \n    4470 \n  \n  \n    Bedok \n    80 to 84 \n    3750 \n    2740 \n  \n  \n    Bedok \n    85 to 89 \n    2140 \n    1300 \n  \n  \n    Bedok \n    90 and over \n    1440 \n    660 \n  \n  \n    Tampines \n    0 to 4 \n    6300 \n    6540 \n  \n  \n    Tampines \n    5 to 9 \n    6010 \n    6430 \n  \n  \n    Tampines \n    10 to 14 \n    5680 \n    6210 \n  \n  \n    Tampines \n    15 to 19 \n    5950 \n    6330 \n  \n  \n    Tampines \n    20 to 24 \n    7580 \n    8040 \n  \n  \n    Tampines \n    25 to 29 \n    10580 \n    10500 \n  \n  \n    Tampines \n    30 to 34 \n    11830 \n    11690 \n  \n  \n    Tampines \n    35 to 39 \n    9600 \n    9130 \n  \n  \n    Tampines \n    40 to 44 \n    9090 \n    8450 \n  \n  \n    Tampines \n    45 to 49 \n    8540 \n    8010 \n  \n  \n    Tampines \n    50 to 54 \n    9400 \n    7910 \n  \n  \n    Tampines \n    55 to 59 \n    10810 \n    9480 \n  \n  \n    Tampines \n    60 to 64 \n    11310 \n    10350 \n  \n  \n    Tampines \n    65 to 69 \n    9340 \n    9140 \n  \n  \n    Tampines \n    70 to 74 \n    6200 \n    6140 \n  \n  \n    Tampines \n    75 to 79 \n    3190 \n    2720 \n  \n  \n    Tampines \n    80 to 84 \n    2420 \n    1550 \n  \n  \n    Tampines \n    85 to 89 \n    1310 \n    740 \n  \n  \n    Tampines \n    90 and over \n    890 \n    300 \n  \n  \n    Jurong West \n    0 to 4 \n    4820 \n    5010 \n  \n  \n    Jurong West \n    5 to 9 \n    5930 \n    6230 \n  \n  \n    Jurong West \n    10 to 14 \n    6980 \n    7210 \n  \n  \n    Jurong West \n    15 to 19 \n    7400 \n    7860 \n  \n  \n    Jurong West \n    20 to 24 \n    8030 \n    8640 \n  \n  \n    Jurong West \n    25 to 29 \n    9290 \n    9590 \n  \n  \n    Jurong West \n    30 to 34 \n    9450 \n    9320 \n  \n  \n    Jurong West \n    35 to 39 \n    9360 \n    8370 \n  \n  \n    Jurong West \n    40 to 44 \n    10500 \n    9610 \n  \n  \n    Jurong West \n    45 to 49 \n    9990 \n    10260 \n  \n  \n    Jurong West \n    50 to 54 \n    9560 \n    10060 \n  \n  \n    Jurong West \n    55 to 59 \n    9320 \n    9990 \n  \n  \n    Jurong West \n    60 to 64 \n    8650 \n    9110 \n  \n  \n    Jurong West \n    65 to 69 \n    7770 \n    7830 \n  \n  \n    Jurong West \n    70 to 74 \n    5520 \n    5660 \n  \n  \n    Jurong West \n    75 to 79 \n    2890 \n    2670 \n  \n  \n    Jurong West \n    80 to 84 \n    1870 \n    1470 \n  \n  \n    Jurong West \n    85 to 89 \n    900 \n    610 \n  \n  \n    Jurong West \n    90 and over \n    610 \n    200 \n  \n\n\n\n \n    \n\n\n \n  \n    pa \n    ag \n    Females \n    Males \n  \n \n\n  \n    Sengkang \n    0 to 4 \n    6900 \n    7400 \n  \n  \n    Sengkang \n    5 to 9 \n    8380 \n    8900 \n  \n  \n    Sengkang \n    10 to 14 \n    7880 \n    8180 \n  \n  \n    Sengkang \n    15 to 19 \n    6940 \n    7290 \n  \n  \n    Sengkang \n    20 to 24 \n    6640 \n    6950 \n  \n  \n    Sengkang \n    25 to 29 \n    7570 \n    7200 \n  \n  \n    Sengkang \n    30 to 34 \n    10980 \n    9360 \n  \n  \n    Sengkang \n    35 to 39 \n    12520 \n    10890 \n  \n  \n    Sengkang \n    40 to 44 \n    12140 \n    11230 \n  \n  \n    Sengkang \n    45 to 49 \n    10600 \n    10460 \n  \n  \n    Sengkang \n    50 to 54 \n    8490 \n    8680 \n  \n  \n    Sengkang \n    55 to 59 \n    7520 \n    7780 \n  \n  \n    Sengkang \n    60 to 64 \n    7250 \n    7010 \n  \n  \n    Sengkang \n    65 to 69 \n    5830 \n    5670 \n  \n  \n    Sengkang \n    70 to 74 \n    4110 \n    3780 \n  \n  \n    Sengkang \n    75 to 79 \n    2290 \n    1860 \n  \n  \n    Sengkang \n    80 to 84 \n    1460 \n    1090 \n  \n  \n    Sengkang \n    85 to 89 \n    820 \n    350 \n  \n  \n    Sengkang \n    90 and over \n    570 \n    150 \n  \n  \n    Woodlands \n    0 to 4 \n    5430 \n    5670 \n  \n  \n    Woodlands \n    5 to 9 \n    5950 \n    6320 \n  \n  \n    Woodlands \n    10 to 14 \n    6530 \n    6860 \n  \n  \n    Woodlands \n    15 to 19 \n    7360 \n    8050 \n  \n  \n    Woodlands \n    20 to 24 \n    9620 \n    10390 \n  \n  \n    Woodlands \n    25 to 29 \n    10340 \n    11100 \n  \n  \n    Woodlands \n    30 to 34 \n    9410 \n    9450 \n  \n  \n    Woodlands \n    35 to 39 \n    8600 \n    8020 \n  \n  \n    Woodlands \n    40 to 44 \n    8940 \n    8310 \n  \n  \n    Woodlands \n    45 to 49 \n    9560 \n    8920 \n  \n  \n    Woodlands \n    50 to 54 \n    10790 \n    9790 \n  \n  \n    Woodlands \n    55 to 59 \n    10030 \n    10800 \n  \n  \n    Woodlands \n    60 to 64 \n    8240 \n    8880 \n  \n  \n    Woodlands \n    65 to 69 \n    5910 \n    6450 \n  \n  \n    Woodlands \n    70 to 74 \n    4010 \n    3940 \n  \n  \n    Woodlands \n    75 to 79 \n    2210 \n    1850 \n  \n  \n    Woodlands \n    80 to 84 \n    1630 \n    1200 \n  \n  \n    Woodlands \n    85 to 89 \n    800 \n    500 \n  \n  \n    Woodlands \n    90 and over \n    440 \n    210 \n  \n  \n    Hougang \n    0 to 4 \n    4430 \n    4520 \n  \n  \n    Hougang \n    5 to 9 \n    4960 \n    4880 \n  \n  \n    Hougang \n    10 to 14 \n    4920 \n    4910 \n  \n  \n    Hougang \n    15 to 19 \n    5190 \n    5410 \n  \n  \n    Hougang \n    20 to 24 \n    6330 \n    6740 \n  \n  \n    Hougang \n    25 to 29 \n    8220 \n    8460 \n  \n  \n    Hougang \n    30 to 34 \n    9290 \n    8990 \n  \n  \n    Hougang \n    35 to 39 \n    8170 \n    7390 \n  \n  \n    Hougang \n    40 to 44 \n    7940 \n    7180 \n  \n  \n    Hougang \n    45 to 49 \n    8100 \n    7680 \n  \n  \n    Hougang \n    50 to 54 \n    8280 \n    7480 \n  \n  \n    Hougang \n    55 to 59 \n    9170 \n    8940 \n  \n  \n    Hougang \n    60 to 64 \n    9350 \n    9400 \n  \n  \n    Hougang \n    65 to 69 \n    8040 \n    7990 \n  \n  \n    Hougang \n    70 to 74 \n    5860 \n    5510 \n  \n  \n    Hougang \n    75 to 79 \n    3320 \n    2900 \n  \n  \n    Hougang \n    80 to 84 \n    2470 \n    1770 \n  \n  \n    Hougang \n    85 to 89 \n    1340 \n    780 \n  \n  \n    Hougang \n    90 and over \n    900 \n    330 \n  \n\n\n\n \n    \n\n\n \n  \n    pa \n    ag \n    Females \n    Males \n  \n \n\n  \n    Yishun \n    0 to 4 \n    5240 \n    5570 \n  \n  \n    Yishun \n    5 to 9 \n    5820 \n    6100 \n  \n  \n    Yishun \n    10 to 14 \n    5320 \n    5680 \n  \n  \n    Yishun \n    15 to 19 \n    5260 \n    5570 \n  \n  \n    Yishun \n    20 to 24 \n    6010 \n    6470 \n  \n  \n    Yishun \n    25 to 29 \n    7730 \n    7760 \n  \n  \n    Yishun \n    30 to 34 \n    9770 \n    9220 \n  \n  \n    Yishun \n    35 to 39 \n    9390 \n    8440 \n  \n  \n    Yishun \n    40 to 44 \n    8480 \n    8190 \n  \n  \n    Yishun \n    45 to 49 \n    8010 \n    7720 \n  \n  \n    Yishun \n    50 to 54 \n    7560 \n    7330 \n  \n  \n    Yishun \n    55 to 59 \n    8680 \n    8180 \n  \n  \n    Yishun \n    60 to 64 \n    8430 \n    8200 \n  \n  \n    Yishun \n    65 to 69 \n    6790 \n    6670 \n  \n  \n    Yishun \n    70 to 74 \n    4790 \n    4550 \n  \n  \n    Yishun \n    75 to 79 \n    2610 \n    2140 \n  \n  \n    Yishun \n    80 to 84 \n    1850 \n    1240 \n  \n  \n    Yishun \n    85 to 89 \n    920 \n    530 \n  \n  \n    Yishun \n    90 and over \n    550 \n    190 \n  \n  \n    Choa Chu Kang \n    0 to 4 \n    4080 \n    4260 \n  \n  \n    Choa Chu Kang \n    5 to 9 \n    4510 \n    4690 \n  \n  \n    Choa Chu Kang \n    10 to 14 \n    4670 \n    4880 \n  \n  \n    Choa Chu Kang \n    15 to 19 \n    5310 \n    5590 \n  \n  \n    Choa Chu Kang \n    20 to 24 \n    6820 \n    7270 \n  \n  \n    Choa Chu Kang \n    25 to 29 \n    8250 \n    8700 \n  \n  \n    Choa Chu Kang \n    30 to 34 \n    7550 \n    7390 \n  \n  \n    Choa Chu Kang \n    35 to 39 \n    6530 \n    6200 \n  \n  \n    Choa Chu Kang \n    40 to 44 \n    6550 \n    5920 \n  \n  \n    Choa Chu Kang \n    45 to 49 \n    6760 \n    6250 \n  \n  \n    Choa Chu Kang \n    50 to 54 \n    7900 \n    6860 \n  \n  \n    Choa Chu Kang \n    55 to 59 \n    8270 \n    8340 \n  \n  \n    Choa Chu Kang \n    60 to 64 \n    6480 \n    7120 \n  \n  \n    Choa Chu Kang \n    65 to 69 \n    4780 \n    5200 \n  \n  \n    Choa Chu Kang \n    70 to 74 \n    3140 \n    3170 \n  \n  \n    Choa Chu Kang \n    75 to 79 \n    1690 \n    1480 \n  \n  \n    Choa Chu Kang \n    80 to 84 \n    1250 \n    800 \n  \n  \n    Choa Chu Kang \n    85 to 89 \n    710 \n    380 \n  \n  \n    Choa Chu Kang \n    90 and over \n    430 \n    150 \n  \n  \n    Punggol \n    0 to 4 \n    6940 \n    7090 \n  \n  \n    Punggol \n    5 to 9 \n    7660 \n    8240 \n  \n  \n    Punggol \n    10 to 14 \n    6070 \n    6700 \n  \n  \n    Punggol \n    15 to 19 \n    4860 \n    4950 \n  \n  \n    Punggol \n    20 to 24 \n    3900 \n    4170 \n  \n  \n    Punggol \n    25 to 29 \n    4890 \n    4110 \n  \n  \n    Punggol \n    30 to 34 \n    9370 \n    7330 \n  \n  \n    Punggol \n    35 to 39 \n    11140 \n    9640 \n  \n  \n    Punggol \n    40 to 44 \n    9820 \n    9630 \n  \n  \n    Punggol \n    45 to 49 \n    7770 \n    8380 \n  \n  \n    Punggol \n    50 to 54 \n    5370 \n    5890 \n  \n  \n    Punggol \n    55 to 59 \n    4340 \n    4700 \n  \n  \n    Punggol \n    60 to 64 \n    3680 \n    3570 \n  \n  \n    Punggol \n    65 to 69 \n    3260 \n    2880 \n  \n  \n    Punggol \n    70 to 74 \n    2660 \n    2190 \n  \n  \n    Punggol \n    75 to 79 \n    1370 \n    1140 \n  \n  \n    Punggol \n    80 to 84 \n    880 \n    670 \n  \n  \n    Punggol \n    85 to 89 \n    420 \n    240 \n  \n  \n    Punggol \n    90 and over \n    270 \n    80 \n  \n\n\n\n \n  \n\n\n\n\n\n\npopPyr_t3 / table_display\n\nRemark :\nBelow is the error message when using patchwork function to place the kable tables below the chart.\n” Error in `ggplot_add()`:\n! Can’t add `e2` to a <ggplot> object. ”\n\n\n\n\n\n4.2.5 Approach #5 Combine chart with ggpubr tables\n\n\n\n\n\n\nThere are 3 parts to this approach :\n\n1st part - create tables with ggtexttable( ) function from the ggpubr package.\n2nd part - align the 3 tables horizontally with ggarrange( ).\n3rd part - place the 2nd part below the trellis plot of 4.1.2.\n\n\n4.2.5.1 create gg tables\n\ntable_t3 <- ggtexttable(table_top3, rows = NULL, theme = ttheme(\"mOrange\"))\ntable_t6 <- ggtexttable(table_top6, rows = NULL, theme = ttheme(\"mOrange\"))\ntable_t9 <- ggtexttable(table_top9, rows = NULL, theme = ttheme(\"mOrange\"))\n\n\n\n4.2.5.2 align gg tables horizontally\n\ntables <- ggarrange(table_t3, table_t6, table_t9,\n                    nrow = 1, ncol = 3, align = \"h\")\n\ntables\n\n\n\n\n\n\n4.2.5.3 align trellis plot with the tables vertically\n\nggarrange(popPyr_t19.fw,\n          NULL,\n          tables, \n          ncol = 1, \n          nrow = 3, \n          align = \"v\",\n          heights = c(1, 0, 1)) +\n  theme(plot.margin = margin(0.5,0,0.5,0, \"cm\"))\n\n\n\n\nRemark :\nTo keep the readers’ focus on the chart’s context, all the x-axis values and other information details displayed in 4.1.1 are removed from the trellis plot. Those removed information can be referred to in the chart below."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html",
    "href": "takeHome/th_ex3/th_ex3.html",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "",
    "text": "The main focus of this visual analytics assignment is to uncover salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nThe focus should be on 3-ROOM, 4-ROOM and 5-ROOM types and either focus on one housing type or multiple housing types. The study period should be in the year 2022.\n\n\nResidential towns and estates in Singapore."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#load-r-packages",
    "href": "takeHome/th_ex3/th_ex3.html#load-r-packages",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggstatsplot, tidyverse, gganimate, gifski, ggiraph, performance, lmtest, car, FunnelPlotR, plotly)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#acquire-data-source",
    "href": "takeHome/th_ex3/th_ex3.html#acquire-data-source",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on demographic data set downloadable from Data.gov.sg.\n\nDownload “Resale flat prices based on registration 2017 onwards” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nThe data used in this study is based on the date of registration instead of the date of approval for the resale transactions.\nData last updated on 6 February 2023.\nThe data sourced from SIngapore Housing and Development Board."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#import-data",
    "href": "takeHome/th_ex3/th_ex3.html#import-data",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attributes data\nThere are two (2) steps involve, which are import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nresale_prices <- read_csv(\"data/resaleFlatPrices2017.csv\")\n\nproblems(resale_prices)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Inspect missing values\n\n\nShow the code\nskimr::skim(resale_prices)\n\n\n\nData summary\n\n\nName\nresale_prices\n\n\nNumber of rows\n146338\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth\n0\n1\n7\n7\n0\n74\n0\n\n\ntown\n0\n1\n5\n15\n0\n26\n0\n\n\nflat_type\n0\n1\n6\n16\n0\n7\n0\n\n\nblock\n0\n1\n1\n4\n0\n2653\n0\n\n\nstreet_name\n0\n1\n7\n20\n0\n564\n0\n\n\nstorey_range\n0\n1\n8\n8\n0\n17\n0\n\n\nflat_model\n0\n1\n4\n22\n0\n21\n0\n\n\nremaining_lease\n0\n1\n8\n18\n0\n659\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nfloor_area_sqm\n0\n1\n97.61\n24.08\n31\n82\n94\n113\n249\n▃▇▃▁▁\n\n\nlease_commence_date\n0\n1\n1995.51\n13.73\n1966\n1985\n1996\n2007\n2019\n▂▇▅▆▇\n\n\nresale_price\n0\n1\n478069.31\n165486.53\n140000\n358000\n448000\n565000\n1418000\n▆▇▂▁▁\n\n\n\n\n\n\n\n3.2.3 Explore variable types\n\n\nShow the code\nglimpse(resale_prices, 60)\n\n\nRows: 146,338\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"A…\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"6…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", …\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, …\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 year…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000…\n\n\n\n\n3.2.4 Identify unique values for key variables\n\n3.2.4.1 Variable :: “flat_type”\n\nunique(resale_prices$flat_type)\n\n[1] \"2 ROOM\"           \"3 ROOM\"           \"4 ROOM\"           \"5 ROOM\"          \n[5] \"EXECUTIVE\"        \"1 ROOM\"           \"MULTI-GENERATION\"\n\n\n\n\n3.2.4.2 Variable :: “town”\n\n\nShow the code\nunique(resale_prices$town)\n\n\n [1] \"ANG MO KIO\"      \"BEDOK\"           \"BISHAN\"          \"BUKIT BATOK\"    \n [5] \"BUKIT MERAH\"     \"BUKIT PANJANG\"   \"BUKIT TIMAH\"     \"CENTRAL AREA\"   \n [9] \"CHOA CHU KANG\"   \"CLEMENTI\"        \"GEYLANG\"         \"HOUGANG\"        \n[13] \"JURONG EAST\"     \"JURONG WEST\"     \"KALLANG/WHAMPOA\" \"MARINE PARADE\"  \n[17] \"PASIR RIS\"       \"PUNGGOL\"         \"QUEENSTOWN\"      \"SEMBAWANG\"      \n[21] \"SENGKANG\"        \"SERANGOON\"       \"TAMPINES\"        \"TOA PAYOH\"      \n[25] \"WOODLANDS\"       \"YISHUN\"         \n\n\n\n\n3.2.4.3 Variable :: “resale_price”\nIdentify the maximum and minimum values for this continuous variable.\n\n\nShow the code\nsummary(resale_prices$resale_price)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 140000  358000  448000  478069  565000 1418000 \n\n\n\n\n3.2.4.4 Variable :: “storey_range”\nIdentify the highest floor and the lowest floor.\n\n\nShow the code\nunique(resale_prices$storey_range)\n\n\n [1] \"10 TO 12\" \"01 TO 03\" \"04 TO 06\" \"07 TO 09\" \"13 TO 15\" \"19 TO 21\"\n [7] \"22 TO 24\" \"16 TO 18\" \"34 TO 36\" \"28 TO 30\" \"37 TO 39\" \"49 TO 51\"\n[13] \"25 TO 27\" \"40 TO 42\" \"31 TO 33\" \"46 TO 48\" \"43 TO 45\"\n\n\nShow the code\nmin(unique(resale_prices$storey_range))\n\n\n[1] \"01 TO 03\"\n\n\nShow the code\nmax(unique(resale_prices$storey_range))\n\n\n[1] \"49 TO 51\"\n\n\nRemarks :\n“10 TO 12” is listed as the first value instead of “01 TO 03” and “49 TO 51” listed before 5 ranges of storeys. Need to plot a chart to visualise the displayed sequence.\n\n\n3.2.4.5 Variable :: “floor_area_sqm”\n\n\nShow the code\nsummary(resale_prices$floor_area_sqm)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  31.00   82.00   94.00   97.61  113.00  249.00 \n\n\n\n\n3.2.4.6 Variable :: “flat_model”\n\n\nShow the code\nunique(resale_prices$flat_model)\n\n\n [1] \"Improved\"               \"New Generation\"         \"DBSS\"                  \n [4] \"Standard\"               \"Apartment\"              \"Simplified\"            \n [7] \"Model A\"                \"Premium Apartment\"      \"Adjoined flat\"         \n[10] \"Model A-Maisonette\"     \"Maisonette\"             \"Type S1\"               \n[13] \"Type S2\"                \"Model A2\"               \"Terrace\"               \n[16] \"Improved-Maisonette\"    \"Premium Maisonette\"     \"Multi Generation\"      \n[19] \"Premium Apartment Loft\" \"2-room\"                 \"3Gen\"                  \n\n\n\n\n3.2.4.7 Variable :: “remaining_lease”\n\n\nShow the code\nmin(unique(resale_prices$remaining_lease))\n\n\n[1] \"43 years\"\n\n\nShow the code\nmax(unique(resale_prices$remaining_lease))\n\n\n[1] \"97 years 09 months\"\n\n\nRemarks :\nThe values are inconsistent. For further analysis, the values will need to be converted into entirely monthly values.\n\n\n\n3.2.5 Inspect plotted sequence\n\n3.2.5.1 Variable :: “month”\n\nggplot(data = resale_prices,\n       aes(y = month)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test Month Displayed Sequence\") \n\n\n\n\n\n\n3.2.5.2 Variable :: “storey_range”\n\nggplot(data = resale_prices,\n       aes(y = storey_range)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test storey Range Sequence\")\n\n\n\n\nRemarks :\nBoth sequences were plotted continuously."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#data-wrangling",
    "href": "takeHome/th_ex3/th_ex3.html#data-wrangling",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Split “month” variable\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nseparate_wider_delim( ) - tidyr - to separate a column into “year” and “month” columns with a regular expression.\n\n\n\n\nresale_prices <- resale_prices %>%\n  separate_wider_delim(month, \n                       delim = \"-\", \n                       names = c(\"year\", \"month\"))\n\n\n\n3.3.2 Filter data\n\n3.3.2.1 Filter data based on year 2022 & 3 flat types\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nfilter( ) - dplyr - to filter for data falls within year 2022 and 3 types of flat with the usage of “&”.\n\n\n\n\nprices2022 <- resale_prices %>%\n  filter(`year` == 2022 & `flat_type` == c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n\n\n3.3.2.2 Inspect output\n\n\nShow the code\nunique(prices2022$flat_type)\n\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\nShow the code\nunique(prices2022$year)\n\n\n[1] \"2022\"\n\n\n\n\n\n3.3.3 Convert values for “Remaining Lease”\n\n3.3.3.1 Attempts to convert all values to months\n\n\nAttempt#1\n\ntest <- prices2022 %>% \n  separate(remaining_lease, into = c(\"a\",\"b\",\"c\",\"d\"), sep = \" \")\n\nRemarks :\nWarning message -\nWarning: Expected 4 pieces. Missing pieces filled with `NA` in 2247 rows [4, 22, 23, 35, 39, 40, 46, 59, 76, 90, 101, 102, 124, 133, 146, 149, 150, 151, 162, 164, ...].\n\n\nAttempt#2\n\ntest1 <- prices2022 %>%\n  mutate(year_lease = str_extract(`remaining_lease`, \"[0-9]{1,2}\"),\n         month_lease  = str_extract(`remaining_lease`, \"[0-9]{10,11}\"))\n\nglimpse(test1[13:14], 50)\n\nRemarks :\nThis approach returned “NA” for entire “month_lease” column.\n\n\nAttempt#3\n\ntest2 <- prices2022 %>%\n  mutate(yearlease = str_extract_all(prices2022$remaining_lease, \"([0-9][0-9]{2})\"))\n\nglimpse(test2[,13], 50)\n\nRemarks :\nThe approach above is a dead end approach.\nTook a break and then chance upon this Tidy’s approach below from Stackoverflow (Robert L. 2022).\n\n\nAttempt#4\n\ntest3 <- str_split_fixed(prices2022$remaining_lease, \" \", 4) %>% \n  data.frame() %>% \n  rename(v1 = X1, v2 = X2, v3 = X3, v4 = X4) %>%\n  select (-c(v2, v4)) %>%\n  mutate(v3 = ifelse(v3 == \"\", 0, v3))\n\nglimpse(test3, 50)\n\nRemarks :\nFurther exploration needed based on the attempt#4’s approach.\n\n\nAttempt #4.1 with unTidy’s method\n\ntest3.1 <- as.data.frame(apply(test3, 2, as.numeric))\n\nglimpse(test3.1, 50)\n\nRemarks :\nFound this method without using Tidyverse function. Code chunk credit to Joachim S. 20221.\n\n\nAttempt #4.2 with Tidy’s method\n\ntest3.2 <- test3 %>% mutate_if(is.character, as.numeric)\n\nglimpse(test3.2, 50)\n\nRemarks :\nFound this code chunk recommended by Zach, 20222.\n\n\n3.3.3.2 Convert values\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nbind_cols( ) - dplyr - to bind prices2022 with new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\n\n\n\n\nprices_lease2022 <- bind_cols(prices2022,\n                              (str_split_fixed(prices2022$remaining_lease, \n                                           \" \", \n                                           4) %>% \n                             data.frame() %>% \n                             rename(year_lease = X1, \n                                    omit1 = X2, \n                                    month_lease = X3, \n                                    omit2 = X4) %>%\n                             select (-c(omit1, omit2)) %>%\n                             mutate(month_lease = \n                                      ifelse(month_lease == \"\", 0, \n                                             month_lease)) %>% \n                             mutate_if(is.character, as.numeric))\n                          ) %>%\n  mutate (remaining_lease_months = year_lease*12 + month_lease)\n\n\n\n3.3.3.3 Inspect output\n\n\nShow the code\nsummary(prices_lease2022$remaining_lease_months)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  517.0   741.0   896.0   894.2  1097.0  1156.0 \n\n\n\n\n\n3.3.4 Convert Case\n\n3.3.4.1 Variable :: town\nConvert all upper case to only the initial.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_sentence( ) - stringr - to convert “TOWN” to “Town”.\n\n\n\n\n\nShow the code\nprices_lease2022$town <- str_to_title(prices_lease2022$town)\n\n\n\n\n3.3.4.2 Variable :: flat_type\n\n\nShow the code\nprices_lease2022$flat_type <- str_to_sentence(prices_lease2022$flat_type)\n\n\nRemarks :\nAlternately, can use str_to_lower( ) function to deliver the same output. But, for future references, decided to use str_to_sentence( ) function instead.\n\n\n3.3.4.3 Variable :: storey_range\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_lower( ) - stringr - to convert “TO” to “to”.\n\n\n\n\n\nShow the code\nprices_lease2022$storey_range <- str_to_lower(prices_lease2022$storey_range)\n\n\nRemarks :\nCan avoid this step if upper case of insignificant text is acceptable or tolerable among the values.\n\n\n\n3.3.5 Derive new variable and update variable type\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_sub( ) - stringr - to extract last 2 characters of the string (Xu, 2011)3.\n\n\n\nDerive 2 variables to capture the price per square meter and price per remaining lease months.\n\nprice_trim <- prices_lease2022 %>%\n  mutate(`price_psqm` = as.numeric(round(resale_price/floor_area_sqm, 2)),\n         `price_prlm` = as.numeric(round(resale_price/remaining_lease_months, 2)),\n         `storey_range` = as.numeric(str_sub(storey_range, -2,-1)),\n         `month` = as.numeric(month),\n         `remaining_lease_months` = as.numeric(remaining_lease_months),\n         `resale_price` = as.numeric(resale_price)) %>%\n  select(month, town, flat_type, storey_range, flat_model, floor_area_sqm, remaining_lease_months, price_prlm, price_psqm, resale_price)\n\nglimpse(price_trim, 70)\n\nRows: 8,142\nColumns: 10\n$ month                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ town                   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ flat_type              <chr> \"3 room\", \"3 room\", \"3 room\", \"3 room…\n$ storey_range           <dbl> 9, 3, 6, 12, 3, 15, 6, 6, 9, 9, 3, 6,…\n$ flat_model             <chr> \"New Generation\", \"New Generation\", \"…\n$ floor_area_sqm         <dbl> 68, 83, 67, 75, 82, 67, 67, 67, 73, 6…\n$ remaining_lease_months <dbl> 696, 679, 673, 685, 685, 741, 684, 67…\n$ price_prlm             <dbl> 485.63, 530.19, 573.55, 543.07, 537.2…\n$ price_psqm             <dbl> 4970.59, 4337.35, 5761.19, 4960.00, 4…\n$ resale_price           <dbl> 338000, 360000, 386000, 372000, 36800…\n\n\n\n3.3.5.2 Update variable type for funnel plot\nConvert all the character variables to a factor type.\n\n\nShow the code\nprice3R_fp <- price_trim %>%\n  filter(flat_type %in% \"3 room\") %>%\n  select(-flat_type) %>%\n  mutate_if(is.character, \n            as.factor)\n\nglimpse(price3R_fp, 60)\n\n\nRows: 2,121\nColumns: 9\n$ month                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ town                   <fct> Ang Mo Kio, Ang Mo Kio, Ang…\n$ storey_range           <dbl> 9, 3, 6, 12, 3, 15, 6, 6, 9…\n$ flat_model             <fct> New Generation, New Generat…\n$ floor_area_sqm         <dbl> 68, 83, 67, 75, 82, 67, 67,…\n$ remaining_lease_months <dbl> 696, 679, 673, 685, 685, 74…\n$ price_prlm             <dbl> 485.63, 530.19, 573.55, 543…\n$ price_psqm             <dbl> 4970.59, 4337.35, 5761.19, …\n$ resale_price           <dbl> 338000, 360000, 386000, 372…\n\n\n\n\n3.3.5.3 Compute statistical variables\n\n\nShow the code\nprice3R_stats <- price_trim %>%\n  filter(flat_type %in% \"3 room\") %>%\n  select(-flat_type) %>%\n  group_by(flat_model) %>%\n  summarise(n = n(),\n            mean = mean(price_psqm),\n            sd = sd(price_psqm)) %>%\n  mutate(se = sd/sqrt(n-1),\n         low_ci = mean - qt(1 - (0.05 / 2), n-1)*se,\n         upp_ci = mean + qt(1 - (0.05 / 2), n-1)*se)\n\nglimpse(price3R_stats, 70)\n\n\nRows: 8\nColumns: 7\n$ flat_model <chr> \"DBSS\", \"Improved\", \"Model A\", \"New Generation\", …\n$ n          <int> 22, 512, 649, 646, 82, 86, 120, 4\n$ mean       <dbl> 8295.134, 5330.554, 6342.309, 5228.273, 7324.741,…\n$ sd         <dbl> 784.9586, 739.2933, 1503.0235, 480.5173, 1565.921…\n$ se         <dbl> 171.29201, 32.70441, 59.04434, 18.92035, 173.9912…\n$ low_ci     <dbl> 7938.913, 5266.302, 6226.367, 5191.120, 6978.553,…\n$ upp_ci     <dbl> 8651.355, 5394.805, 6458.250, 5265.426, 7670.929,…\n\n\nShow the code\nmin(price3R_stats$low_ci)\n\n\n[1] 5159.576\n\n\nShow the code\nmax(price3R_stats$upp_ci)\n\n\n[1] 11219.93\n\n\n\n\n\n3.3.6 Pivot data\n\n3.3.6.1 Filter for “3 room”\n\nrooms3 <- price_trim %>%\n  filter(flat_type %in% \"3 room\") %>%\n  select(-flat_type) %>%\n  group_by(town, flat_model) %>%\n  arrange(storey_range)\n\n\n\n3.3.6.2 Pivot data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\npivot_wider( ) - tidyr - to expand the data frame with values from specified variable.\n\n\n\n\n\nShow the code\nrooms3_pw <- rooms3 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_model, storey_range),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#visualise-data-with-lines-plot",
    "href": "takeHome/th_ex3/th_ex3.html#visualise-data-with-lines-plot",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.1 Visualise data with lines plot",
    "text": "4.1 Visualise data with lines plot\n\nlines_group <- ggplot(rooms3, \n                aes(x = price_psqm,\n                    y = storey_range,\n                    group = flat_model)) + \n  geom_line(aes(color = flat_model)) +\n  geom_point(aes(color = flat_model))\n\nlines_group"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#trellis-plot",
    "href": "takeHome/th_ex3/th_ex3.html#trellis-plot",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.2 Trellis plot",
    "text": "4.2 Trellis plot\n\npoint_lines <- ggplot(rooms3, \n                aes(x = price_psqm,\n                    y = storey_range,\n                    group = flat_model)) + \n  geom_line(aes(color = flat_model)) +\n  geom_point(aes(color = flat_model)) +\n  ylim(\"01 to 03\", \"04 to 06\", \"07 to 09\", \"10 to 12\", \"13 to 15\", \"16 to 18\", \"19 to 21\", \"22 to 24\", \"25 to 27\", \"28 to 30\", \"31 to 33\", \"34 to 36\", \"37 to 39\", \"40 to 42\", \"43 to 45\", \"46 to 48\", \"49 to 51\") + \n  facet_wrap(~factor(town, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\",\n                                    \"Sengkang\", \"Woodlands\", \"Hougang\",\n                                    \"Yishun\", \"Choa Chu Kang\", \"Punggol\", \"Geylang\")),\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\") +\n  theme_bw() + \n  scale_x_continuous(breaks = seq(2500, 15000, 2500)) +\n  theme(legend.position = \"bottom\",\n        legend.justification = \"left\")\n\npoint_lines\n\n\n\n\n\npoint_lines + \n  transition_time(month) +\n  ease_aes('linear') +\n  labs (subtitle = 'Month: {frame_time}')"
  },
  {
    "objectID": "handsOn_ex5.1.html#wrangle-data",
    "href": "handsOn_ex5.1.html#wrangle-data",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "3.3 Wrangle Data",
    "text": "3.3 Wrangle Data\n\n\nShow the code\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year)) %>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8])) %>%\n  mutate(ACTIVE = rowSums(.[9:16])) %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018) %>%\n  filter(TOTAL > 0)"
  },
  {
    "objectID": "handsOn_ex5.1.html#create-static-ternary-plot",
    "href": "handsOn_ex5.1.html#create-static-ternary-plot",
    "title": "Ternary Plot for Singapore Population Structure",
    "section": "4.1 Create static ternary plot",
    "text": "4.1 Create static ternary plot\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nggtern( ) - ggtern - to create ternary diagram.\nFor ggtern version 1.0, there are 8 types of geometries supported (may revised in latter version) :\n\n`point`, `path`, `segment`, `polygon`, `smooth`, `text`, `density2d`, `rug`\n\n\n\n\n\n\nShow the code\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point()\n\n\n\n\n\n\nggtern(data = agpop_mutated, \n       aes(x = YOUNG,\n           y = ACTIVE,\n           z = OLD)) +\n  geom_point() +\n  labs(title = \"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\nRemarks :\nplot_ly( ) function is not able to port ggtern chart into ggplot2. A native function will be required to do so."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html",
    "href": "takeHome/th_ex3/th_ex3v1.1.html",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "",
    "text": "There are x main focuses for this visual analytics assignment, that is :\n\n\n\n\n\n\nRequirement Details for this Individual Assignment\n\n\n\n\n\n\n\n\n\n\n\n\n\n<text>"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#load-r-packages",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#load-r-packages",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggstatsplot, tidyverse, gganimate, gifski, ggiraph, performance)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#acquire-data-source",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#acquire-data-source",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on demographic data set downloadable from Data.gov.sg.\n\nDownload “Resale flat prices based on registration 2017 onwards” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nThe data used in this study is based on the date of registration instead of the date of approval for the resale transactions.\nData last updated on 6 February 2023.\nThe data sourced from SIngapore Housing and Development Board.\nMetadata :"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#import-data",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#import-data",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attributes data\nThere are two (2) steps involve, which are import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nresale_prices <- read_csv(\"data/resaleFlatPrices2017.csv\")\n\nproblems(resale_prices)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Inspect missing values\n\n\nShow the code\nskimr::skim(resale_prices)\n\n\n\nData summary\n\n\nName\nresale_prices\n\n\nNumber of rows\n146338\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth\n0\n1\n7\n7\n0\n74\n0\n\n\ntown\n0\n1\n5\n15\n0\n26\n0\n\n\nflat_type\n0\n1\n6\n16\n0\n7\n0\n\n\nblock\n0\n1\n1\n4\n0\n2653\n0\n\n\nstreet_name\n0\n1\n7\n20\n0\n564\n0\n\n\nstorey_range\n0\n1\n8\n8\n0\n17\n0\n\n\nflat_model\n0\n1\n4\n22\n0\n21\n0\n\n\nremaining_lease\n0\n1\n8\n18\n0\n659\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nfloor_area_sqm\n0\n1\n97.61\n24.08\n31\n82\n94\n113\n249\n▃▇▃▁▁\n\n\nlease_commence_date\n0\n1\n1995.51\n13.73\n1966\n1985\n1996\n2007\n2019\n▂▇▅▆▇\n\n\nresale_price\n0\n1\n478069.31\n165486.53\n140000\n358000\n448000\n565000\n1418000\n▆▇▂▁▁\n\n\n\n\n\n\n\n3.2.3 Explore variable types\n\n\nShow the code\nglimpse(resale_prices, 60)\n\n\nRows: 146,338\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"A…\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"6…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", …\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, …\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 year…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000…\n\n\nRemarks :\nNo missing values.\nMay need to wrangle values for -\n\nremove year for “month” after filtered.\nconvert values for “remaining_lease” to entirely months value.\n\n\n\n3.2.4 Explore unique values for\n\n3.2.4.1 Variable :: “flat_type”\n\nunique(resale_prices$flat_type)\n\n[1] \"2 ROOM\"           \"3 ROOM\"           \"4 ROOM\"           \"5 ROOM\"          \n[5] \"EXECUTIVE\"        \"1 ROOM\"           \"MULTI-GENERATION\"\n\n\n\n\n3.2.4.2 Variable :: “town”\n\n\nShow the code\nunique(resale_prices$town)\n\n\n [1] \"ANG MO KIO\"      \"BEDOK\"           \"BISHAN\"          \"BUKIT BATOK\"    \n [5] \"BUKIT MERAH\"     \"BUKIT PANJANG\"   \"BUKIT TIMAH\"     \"CENTRAL AREA\"   \n [9] \"CHOA CHU KANG\"   \"CLEMENTI\"        \"GEYLANG\"         \"HOUGANG\"        \n[13] \"JURONG EAST\"     \"JURONG WEST\"     \"KALLANG/WHAMPOA\" \"MARINE PARADE\"  \n[17] \"PASIR RIS\"       \"PUNGGOL\"         \"QUEENSTOWN\"      \"SEMBAWANG\"      \n[21] \"SENGKANG\"        \"SERANGOON\"       \"TAMPINES\"        \"TOA PAYOH\"      \n[25] \"WOODLANDS\"       \"YISHUN\"         \n\n\n\n\n3.2.4.3 Variable :: “resale_price”\nIdentify the maximum and minimum values for this continuous variable.\n\n\nShow the code\nsummary(resale_prices$resale_price)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 140000  358000  448000  478069  565000 1418000 \n\n\n\n\n3.2.4.4 Variable :: “storey_range”\n\n\nShow the code\nunique(resale_prices$storey_range)\n\n\n [1] \"10 TO 12\" \"01 TO 03\" \"04 TO 06\" \"07 TO 09\" \"13 TO 15\" \"19 TO 21\"\n [7] \"22 TO 24\" \"16 TO 18\" \"34 TO 36\" \"28 TO 30\" \"37 TO 39\" \"49 TO 51\"\n[13] \"25 TO 27\" \"40 TO 42\" \"31 TO 33\" \"46 TO 48\" \"43 TO 45\"\n\n\nShow the code\nmin(unique(resale_prices$storey_range))\n\n\n[1] \"01 TO 03\"\n\n\nShow the code\nmax(unique(resale_prices$storey_range))\n\n\n[1] \"49 TO 51\"\n\n\nRemarks :\n“10 TO 12” listed as first value instead of “01 TO 03”. Need to visualise the displayed sequence.\n\n\n3.2.4.5 Variable :: “floor_area_sqm”\n\n\nShow the code\nunique(resale_prices$floor_area_sqm)\n\n\n  [1]  44.0  67.0  68.0  73.0  74.0  82.0  81.0  92.0  91.0  94.0  98.0  97.0\n [13]  99.0  90.0 117.0 119.0 118.0 112.0 121.0 147.0  45.0  59.0  63.0  70.0\n [25]  60.0  65.0  75.0  66.0  84.0  93.0 104.0 105.0 120.0 130.0 132.0 115.0\n [37] 122.0 137.0 139.0 143.0 146.0 145.0 141.0  64.0  83.0 108.0  95.0 123.0\n [49]  69.0 103.0 102.0 100.0 107.0  86.0 101.0 150.0 155.0 144.0  34.0  51.0\n [61]  54.0  58.0  76.0  88.0  77.0 106.0  85.0  89.0 134.0 110.0 111.0 151.0\n [73]  55.0 113.0 126.0 124.0 131.0 142.0  42.0  46.0  56.0  61.0  57.0  72.0\n [85] 109.0  47.0  96.0 116.0 128.0 140.0 148.0 156.0 157.0  71.0  52.0  79.0\n [97] 129.0 133.0 125.0  48.0  62.0 114.0  87.0 127.0 161.0 165.0  50.0 153.0\n[109]  43.0 138.0 164.0 163.0 136.0 149.0  80.0 154.0 152.0  37.0  78.0 135.0\n[121] 170.0 192.0 182.0  31.0  49.0  53.0  60.3 176.0 177.0 189.0  40.0 166.0\n[133] 184.0 173.0 169.0 181.0 158.0  41.0 159.0 215.0 174.0  63.1 179.0 162.0\n[145]  83.1 172.0 168.0 160.0 249.0 185.0  38.0 178.0 171.0 237.0 183.0 190.0\n[157] 175.0 188.0 187.0  35.0 186.0  39.0 243.0 199.0 222.0 210.0 241.0 167.0\n[169] 180.0\n\n\n\n\n3.2.4.6 Variable :: “flat_model”\n\n\nShow the code\nunique(resale_prices$flat_model)\n\n\n [1] \"Improved\"               \"New Generation\"         \"DBSS\"                  \n [4] \"Standard\"               \"Apartment\"              \"Simplified\"            \n [7] \"Model A\"                \"Premium Apartment\"      \"Adjoined flat\"         \n[10] \"Model A-Maisonette\"     \"Maisonette\"             \"Type S1\"               \n[13] \"Type S2\"                \"Model A2\"               \"Terrace\"               \n[16] \"Improved-Maisonette\"    \"Premium Maisonette\"     \"Multi Generation\"      \n[19] \"Premium Apartment Loft\" \"2-room\"                 \"3Gen\"                  \n\n\n\n\n3.2.4.7 Variable :: “remaining_lease”\n\n\nShow the code\nmin(unique(resale_prices$remaining_lease))\n\n\n[1] \"43 years\"\n\n\nShow the code\nmax(unique(resale_prices$remaining_lease))\n\n\n[1] \"97 years 09 months\"\n\n\nRemarks :\nThe years value consists of 2 characters - wrangling direction.\n\n\n\n3.2.5 Reveal sequence displayed in chart\n\n3.2.5.1 Variable :: “month”\n\nggplot(data = resale_prices,\n       aes(y = month)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test Month Sequence\") \n\n\n\n\n\n\n3.2.5.2 Variable :: “storey_range”\n\nggplot(data = resale_prices,\n       aes(y = storey_range)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test storey Range Sequence\")"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#data-wrangling",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#data-wrangling",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Split “month” variable\nInstead of removing “year” or trimming it for the “month” value, split and retain the “year” info as a separate variable.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nseparate_wider_delim( ) - tidyr - to separate a column into multiple columns with a regular expression.\n\n\n\n\nresale_prices <- resale_prices %>%\n  separate_wider_delim(month, \n                       delim = \"-\", \n                       names = c(\"year\", \"month\"))\n\n\n\n3.3.2 Filter data\n\n3.3.2.1 Filter for 2022 & 3 types of flat data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nfilter( ) - dplyr - to filter for data falls within year 2022 and 3 types of flat with the usage of “&”.\n\n\n\n\nprices2022 <- resale_prices %>%\n  filter(`year` == 2022 & `flat_type` == c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n\n\n3.3.2.2 Inspect output\n\n\nShow the code\nunique(prices2022$flat_type)\n\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\n\n\n\n3.3.3 Convert values for “Remaining Lease”\n\n3.3.3.1 Attempts to convert the values to months\n\n\nAttempt#1\n\ntest <- prices2022 %>% \n  separate(remaining_lease, into = c(\"a\",\"b\",\"c\",\"d\"), sep = \" \")\n\nRemarks :\nWarning message -\nWarning: Expected 4 pieces. Missing pieces filled with `NA` in 2247 rows [4, 22, 23, 35, 39, 40, 46, 59, 76, 90, 101, 102, 124, 133, 146, 149, 150, 151, 162, 164, ...].\n\n\nAttempt#2\n\ntest1 <- prices2022 %>%\n  mutate(year_lease = str_extract(`remaining_lease`, \"[0-9]{1,2}\"),\n         month_lease  = str_extract(`remaining_lease`, \"[0-9]{10,11}\"))\n\nglimpse(test1[13:14], 50)\n\nRows: 8,142\nColumns: 2\n$ year_lease  <chr> \"58\", \"56\", \"56\", \"57\", \"57\"…\n$ month_lease <chr> NA, NA, NA, NA, NA, NA, NA, …\n\n\nRemarks :\nThis approach returned “NA” for entire “month_lease” column.\n\n\nAttempt#3\n\ntest2 <- prices2022 %>%\n  mutate(yearlease = str_extract_all(prices2022$remaining_lease, \"([0-9][0-9]{2})\"))\n\nglimpse(test2[,13], 50)\n\nRows: 8,142\nColumns: 1\n$ yearlease <list> <>, <>, <>, <>, <>, <>, <>, <…\n\n\nRemarks :\nThis is the dead end approach.\nTook a break and then chance upon this Tidy’s approach below from Robert L. 2022 via Stackoverflow.\n\n\nAttempt#4\n\ntest3 <- str_split_fixed(prices2022$remaining_lease, \" \", 4) %>% \n  data.frame() %>% \n  rename(v1 = X1, v2 = X2, v3 = X3, v4 = X4) %>%\n  select (-c(v2, v4)) %>%\n  mutate(v3 = ifelse(v3 == \"\", 0, v3))\n\nglimpse(test3, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <chr> \"58\", \"56\", \"56\", \"57\", \"57\", \"61\", \"…\n$ v3 <chr> \"0\", \"07\", \"01\", \"01\", \"01\", \"09\", \"0…\n\n\n\n\nAttempt #4.1 with unTidy’s method\n\ntest3.1 <- as.data.frame(apply(test3, 2, as.numeric))\n\nglimpse(test3.1, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <dbl> 58, 56, 56, 57, 57, 61, 57, 56, 56, 5…\n$ v3 <dbl> 0, 7, 1, 1, 1, 9, 0, 1, 1, 3, 9, 4, 0…\n\n\nRemarks :\nFound this method without using Tidyverse function. Code chunk credit to Joachim S. 20221.\n\n\nAttempt #4.2 with Tidy’s method\n\ntest3.2 <- test3 %>% mutate_if(is.character, as.numeric)\n\nglimpse(test3.2, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <dbl> 58, 56, 56, 57, 57, 61, 57, 56, 56, 5…\n$ v3 <dbl> 0, 7, 1, 1, 1, 9, 0, 1, 1, 3, 9, 4, 0…\n\n\nRemarks :\nFound this code chunk recommended by Zach, 20222.\nAfter 2/3 of a day in searching for a clean Tidy’s function, can have a peace in mind!!\n\n\n3.3.3.2 Convert “remaining_lease” variable\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nbind_cols( ) - dplyr - to bind prices2022 with new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\n\n\n\n\nprices_lease2022 <- bind_cols(prices2022, \n                          (str_split_fixed(prices2022$remaining_lease, \n                                           \" \", \n                                           4) %>% \n                             data.frame() %>% \n                             rename(year_lease = X1, \n                                    omit1 = X2, \n                                    month_lease = X3, \n                                    omit2 = X4) %>%\n                             select (-c(omit1, omit2)) %>%\n                             mutate(month_lease = \n                                      ifelse(month_lease == \"\", 0, \n                                             month_lease)) %>% \n                             mutate_if(is.character, as.numeric))\n                          ) %>%\n  mutate (remaining_lease_months = year_lease*12 + month_lease)\n\n\n\n3.3.3.3 Inspect output\n\n\nShow the code\nsummary(prices_lease2022$remaining_lease_months)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  517.0   741.0   896.0   894.2  1097.0  1156.0 \n\n\n\n\n\n3.3.4 Convert Upper Case\n\n3.3.4.1 Variable :: town\nConvert all upper case to only the initial.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_sentence( ) - stringr - to convert “TOWN” to “Town”.\n\n\n\n\n\nShow the code\nprices_lease2022$town <- str_to_title(prices_lease2022$town)\n\n\n\n\n3.3.4.2 Variable :: flat_type\n\n\nShow the code\nprices_lease2022$flat_type <- str_to_sentence(prices_lease2022$flat_type)\n\n\nRemarks :\nAlternately, can use str_to_lower( ) function to deliver the same output. But, for future references, decided to use str_to_sentence( ) function instead.\n\n\n3.3.4.3 Variable :: storey_range\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_lower( ) - stringr - to convert “TO” to “to”.\n\n\n\n\n\nShow the code\nprices_lease2022$storey_range <- str_to_lower(prices_lease2022$storey_range)\n\n\nRemarks :\nCan avoid this step if upper case of insignificant text is acceptable or tolerable among the values.\n\n\n\n3.3.5 Set Display\n\nstorey_sequence <- c(\"01 to 03\", \"04 to 06\", \"07 to 09\", \"10 to 12\", \"13 to 15\", \"16 to 18\", \"19 to 21\", \"22 to 24\", \"25 to 27\", \"28 to 30\", \"31 to 33\", \"34 to 36\", \"37 to 39\", \"40 to 42\", \"43 to 45\", \"46 to 48\", \"49 to 51\")\n\n\n\n3.3.6 Derive new variable and update variable type\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_sub( ) - stringr - to expand the data frame with values from specified variable.\n\n\n\nDerive 2 variables to capture the price per square meter and price per remaining lease months.\n\nprice_trim <- prices_lease2022 %>%\n  mutate(`price_psqm` = as.numeric(round(resale_price/floor_area_sqm, 2)),\n         `price_prlm` = as.numeric(round(resale_price/remaining_lease_months, 2)),\n         `storey_range` = as.numeric(str_sub(storey_range, -2,-1)),\n         `month` = as.numeric(month),\n         `remaining_lease_months` = as.numeric(remaining_lease_months),\n         `resale_price` = as.numeric(resale_price)) %>%\n  select(month, town, flat_type, storey_range, flat_model, remaining_lease_months, price_prlm, price_psqm, resale_price)\n\nglimpse(price_trim, 70)\n\nRows: 8,142\nColumns: 9\n$ month                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ town                   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ flat_type              <chr> \"3 room\", \"3 room\", \"3 room\", \"3 room…\n$ storey_range           <dbl> 9, 3, 6, 12, 3, 15, 6, 6, 9, 9, 3, 6,…\n$ flat_model             <chr> \"New Generation\", \"New Generation\", \"…\n$ remaining_lease_months <dbl> 696, 679, 673, 685, 685, 741, 684, 67…\n$ price_prlm             <dbl> 485.63, 530.19, 573.55, 543.07, 537.2…\n$ price_psqm             <dbl> 4970.59, 4337.35, 5761.19, 4960.00, 4…\n$ resale_price           <dbl> 338000, 360000, 386000, 372000, 36800…\n\n\n\n\n3.3.7 Filter, group & pivot data\n\n3.3.7.1 Filter for “3 room”\n\nrooms3 <- price_trim %>%\n  filter(flat_type %in% \"3 room\") %>%\n  select(-flat_type) %>%\n  group_by(town, flat_model) %>%\n  arrange(storey_range)\n\n\nrooms3 <- rooms3 %>% group_by(storey_range) %>% arrange(storey_range)\n\ntest5$flat_type <- as.numeric(str_sub(test5$flat_type, 1,1))\n\n\n\n3.3.7.2 Group and pivot data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\npivot_wider( ) - tidyr - to expand the data frame with values from specified variable.\n\n\n\n\n\nShow the code\nrooms3_pw <- rooms3 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_model, storey_range),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean)\n\n\n\n\ntest_type_sqm <- prices_lease2022 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_type, floor_area_sqm),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean)\n\n\ntest_per_sqm <- prices_lease2022 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_type, floor_area_sqm),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean,\n              names_vary = \"slowest\")\n\n\ngroup_town <- prices_lease2022 %>% \n  group_by(town, flat_type) %>%\n  summarise(`average_price` = mean(`resale_price`),\n            `average_fasqm` = mean(`floor_area_sqm`),\n            `mode_fasqm` = mode(`floor_area_sqm`),\n            `price_psqm` = `average_price`/`average_fasqm`) %>%\n  ungroup()\n\n\namk_3rooms <- prices_lease2022 %>%\n  filter(town == \"Ang Mo Kio\" & flat_type == \"3 room\")"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#one-sample-test",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#one-sample-test",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.1 One Sample Test",
    "text": "4.1 One Sample Test\nDistribution of price per square metre for 3 rooms type.\n\nset.seed(1234)\n\ngghistostats(\n  data = rooms3,\n  x = price_psqm,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"Price\"\n)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#two-sample-mean-test",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#two-sample-mean-test",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.2 Two Sample Mean Test",
    "text": "4.2 Two Sample Mean Test\n\n4.2.1 One-way ANOVA Test\n\n4.2.1.1 Price per square metre by flat model\nTo visualise the correlation between 1 continues variable and 1 discret variable.\n\nggbetweenstats(data = rooms3,\n               x = flat_model,\n               y = price_psqm,\n               type = \"p\",\n               mean.ci = TRUE,\n               pairwise.comparisons = TRUE,\n               pairwise.display = \"s\",\n               p.adjust.method = \"fdr\",\n               messages = FALSE)\n\n\n\n\n\n\n\n4.2.2 Significant Test of Correlation\n\n4.2.2.1 Price per square metre by flat model\n\nggscatterstats(data = rooms3,\n               x = flat_model,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.2.2.2 Price per square metre by storey_range\n\nggscatterstats(data = rooms3,\n               x = storey_range,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.2.2.3 Price per square metre by town\n\nggscatterstats(data = rooms3,\n               x = town,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.2.2.2 Price per square metre by month\n\nggscatterstats(data = rooms3,\n               x = month,\n               y = price_psqm,\n               marginal = FALSE)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.1.html#visualise-model",
    "href": "takeHome/th_ex3/th_ex3v1.1.html#visualise-model",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.3 Visualise Model",
    "text": "4.3 Visualise Model\n\n4.3.1 Check Multicolinearity\nUsing lm( ) function stats package to fit linear model.\n\nmodel <- lm(formula = resale_price ~ remaining_lease_months + storey_range + month + price_psqm + price_prlm, \n            data = rooms3)\n\nsummary(model)\n\n\nCall:\nlm(formula = resale_price ~ remaining_lease_months + storey_range + \n    month + price_psqm + price_prlm, data = rooms3)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-82768 -10723   1142   8816  62163 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)            -2.544e+05  3.755e+03 -67.750  < 2e-16 ***\nremaining_lease_months  3.155e+02  4.211e+00  74.941  < 2e-16 ***\nstorey_range            2.943e+02  6.967e+01   4.225  2.5e-05 ***\nmonth                  -2.233e+02  9.572e+01  -2.333   0.0197 *  \nprice_psqm              2.233e+01  6.327e-01  35.288  < 2e-16 ***\nprice_prlm              5.238e+02  6.527e+00  80.242  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15070 on 2115 degrees of freedom\nMultiple R-squared:  0.9681,    Adjusted R-squared:  0.968 \nF-statistic: 1.283e+04 on 5 and 2115 DF,  p-value: < 2.2e-16\n\n\n\n\n4.3.2 Visualise Multicolinearity Check\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n4.3.2.1 Complete model check\n\n\nShow the code\ncheck_model(model)\n\n\n\n\n\n\n\nroom3 <- rooms3 %>%\n  mutate(price_bins = cut(price_psqm, \n                          breaks = c(0, 60, 75, 85, 100))\n  )\n\n\nggbarstats(room3,\n           x = price_bins,\n           y = flat_model)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html",
    "href": "takeHome/th_ex3/th_ex3v1.0.html",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "",
    "text": "There are x main focuses for this visual analytics assignment, that is :\n\n\n\n\n\n\nRequirement Details for this Individual Assignment\n\n\n\n\n\n\n\n\n\n\n\n\n\n<text>"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#load-r-packages",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#load-r-packages",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "2.1 Load R Packages",
    "text": "2.1 Load R Packages\n\npacman::p_load(ggstatsplot, tidyverse, gganimate, gifski, ggiraph, performance)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#acquire-data-source",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#acquire-data-source",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.1 Acquire Data Source",
    "text": "3.1 Acquire Data Source\nThis study will be based on demographic data set downloadable from Data.gov.sg.\n\nDownload “Resale flat prices based on registration 2017 onwards” in CSV format.\n\n\n\n\n\n\n\nHighlights of the data set\n\n\n\n\n\n\nThe data used in this study is based on the date of registration instead of the date of approval for the resale transactions.\nData last updated on 6 February 2023.\nThe data sourced from SIngapore Housing and Development Board.\nMetadata :"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#import-data",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#import-data",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import attributes data\nThere are two (2) steps involve, which are import and inspect imported data set.\n\n\n\n\n\n\nUsage of the code chunk below :\nread_csv( ) - readr - to read CSV file into a tibble.\nproblems( ) - readr - to reveal any parsing errors when importing the CSV file.\n\n\n\n\nresale_prices <- read_csv(\"data/resaleFlatPrices2017.csv\")\n\nproblems(resale_prices)\n\n# A tibble: 0 × 5\n# … with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n\n\n\n\n3.2.2 Inspect missing values\n\n\nShow the code\nskimr::skim(resale_prices)\n\n\n\nData summary\n\n\nName\nresale_prices\n\n\nNumber of rows\n146338\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth\n0\n1\n7\n7\n0\n74\n0\n\n\ntown\n0\n1\n5\n15\n0\n26\n0\n\n\nflat_type\n0\n1\n6\n16\n0\n7\n0\n\n\nblock\n0\n1\n1\n4\n0\n2653\n0\n\n\nstreet_name\n0\n1\n7\n20\n0\n564\n0\n\n\nstorey_range\n0\n1\n8\n8\n0\n17\n0\n\n\nflat_model\n0\n1\n4\n22\n0\n21\n0\n\n\nremaining_lease\n0\n1\n8\n18\n0\n659\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nfloor_area_sqm\n0\n1\n97.61\n24.08\n31\n82\n94\n113\n249\n▃▇▃▁▁\n\n\nlease_commence_date\n0\n1\n1995.51\n13.73\n1966\n1985\n1996\n2007\n2019\n▂▇▅▆▇\n\n\nresale_price\n0\n1\n478069.31\n165486.53\n140000\n358000\n448000\n565000\n1418000\n▆▇▂▁▁\n\n\n\n\n\n\n\n3.2.3 Explore variable types\n\n\nShow the code\nglimpse(resale_prices, 60)\n\n\nRows: 146,338\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"A…\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"6…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", …\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, …\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 year…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000…\n\n\nRemarks :\nNo missing values.\nMay need to wrangle values for -\n\nremove year for “month” after filtered.\nconvert values for “remaining_lease” to entirely months value.\n\n\n\n3.2.4 Explore unique values for\n\n3.2.4.1 Variable :: “flat_type”\n\nunique(resale_prices$flat_type)\n\n[1] \"2 ROOM\"           \"3 ROOM\"           \"4 ROOM\"           \"5 ROOM\"          \n[5] \"EXECUTIVE\"        \"1 ROOM\"           \"MULTI-GENERATION\"\n\n\n\n\n3.2.4.2 Variable :: “town”\n\n\nShow the code\nunique(resale_prices$town)\n\n\n [1] \"ANG MO KIO\"      \"BEDOK\"           \"BISHAN\"          \"BUKIT BATOK\"    \n [5] \"BUKIT MERAH\"     \"BUKIT PANJANG\"   \"BUKIT TIMAH\"     \"CENTRAL AREA\"   \n [9] \"CHOA CHU KANG\"   \"CLEMENTI\"        \"GEYLANG\"         \"HOUGANG\"        \n[13] \"JURONG EAST\"     \"JURONG WEST\"     \"KALLANG/WHAMPOA\" \"MARINE PARADE\"  \n[17] \"PASIR RIS\"       \"PUNGGOL\"         \"QUEENSTOWN\"      \"SEMBAWANG\"      \n[21] \"SENGKANG\"        \"SERANGOON\"       \"TAMPINES\"        \"TOA PAYOH\"      \n[25] \"WOODLANDS\"       \"YISHUN\"         \n\n\n\n\n3.2.4.3 Variable :: “resale_price”\nIdentify the maximum and minimum values for this continuous variable.\n\n\nShow the code\nsummary(resale_prices$resale_price)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 140000  358000  448000  478069  565000 1418000 \n\n\n\n\n3.2.4.4 Variable :: “storey_range”\n\n\nShow the code\nunique(resale_prices$storey_range)\n\n\n [1] \"10 TO 12\" \"01 TO 03\" \"04 TO 06\" \"07 TO 09\" \"13 TO 15\" \"19 TO 21\"\n [7] \"22 TO 24\" \"16 TO 18\" \"34 TO 36\" \"28 TO 30\" \"37 TO 39\" \"49 TO 51\"\n[13] \"25 TO 27\" \"40 TO 42\" \"31 TO 33\" \"46 TO 48\" \"43 TO 45\"\n\n\nShow the code\nmin(unique(resale_prices$storey_range))\n\n\n[1] \"01 TO 03\"\n\n\nShow the code\nmax(unique(resale_prices$storey_range))\n\n\n[1] \"49 TO 51\"\n\n\nRemarks :\n“10 TO 12” listed as first value instead of “01 TO 03”. Need to visualise the displayed sequence.\n\n\n3.2.4.5 Variable :: “floor_area_sqm”\n\n\nShow the code\nunique(resale_prices$floor_area_sqm)\n\n\n  [1]  44.0  67.0  68.0  73.0  74.0  82.0  81.0  92.0  91.0  94.0  98.0  97.0\n [13]  99.0  90.0 117.0 119.0 118.0 112.0 121.0 147.0  45.0  59.0  63.0  70.0\n [25]  60.0  65.0  75.0  66.0  84.0  93.0 104.0 105.0 120.0 130.0 132.0 115.0\n [37] 122.0 137.0 139.0 143.0 146.0 145.0 141.0  64.0  83.0 108.0  95.0 123.0\n [49]  69.0 103.0 102.0 100.0 107.0  86.0 101.0 150.0 155.0 144.0  34.0  51.0\n [61]  54.0  58.0  76.0  88.0  77.0 106.0  85.0  89.0 134.0 110.0 111.0 151.0\n [73]  55.0 113.0 126.0 124.0 131.0 142.0  42.0  46.0  56.0  61.0  57.0  72.0\n [85] 109.0  47.0  96.0 116.0 128.0 140.0 148.0 156.0 157.0  71.0  52.0  79.0\n [97] 129.0 133.0 125.0  48.0  62.0 114.0  87.0 127.0 161.0 165.0  50.0 153.0\n[109]  43.0 138.0 164.0 163.0 136.0 149.0  80.0 154.0 152.0  37.0  78.0 135.0\n[121] 170.0 192.0 182.0  31.0  49.0  53.0  60.3 176.0 177.0 189.0  40.0 166.0\n[133] 184.0 173.0 169.0 181.0 158.0  41.0 159.0 215.0 174.0  63.1 179.0 162.0\n[145]  83.1 172.0 168.0 160.0 249.0 185.0  38.0 178.0 171.0 237.0 183.0 190.0\n[157] 175.0 188.0 187.0  35.0 186.0  39.0 243.0 199.0 222.0 210.0 241.0 167.0\n[169] 180.0\n\n\n\n\n3.2.4.6 Variable :: “flat_model”\n\n\nShow the code\nunique(resale_prices$flat_model)\n\n\n [1] \"Improved\"               \"New Generation\"         \"DBSS\"                  \n [4] \"Standard\"               \"Apartment\"              \"Simplified\"            \n [7] \"Model A\"                \"Premium Apartment\"      \"Adjoined flat\"         \n[10] \"Model A-Maisonette\"     \"Maisonette\"             \"Type S1\"               \n[13] \"Type S2\"                \"Model A2\"               \"Terrace\"               \n[16] \"Improved-Maisonette\"    \"Premium Maisonette\"     \"Multi Generation\"      \n[19] \"Premium Apartment Loft\" \"2-room\"                 \"3Gen\"                  \n\n\n\n\n3.2.4.7 Variable :: “remaining_lease”\n\n\nShow the code\nmin(unique(resale_prices$remaining_lease))\n\n\n[1] \"43 years\"\n\n\nShow the code\nmax(unique(resale_prices$remaining_lease))\n\n\n[1] \"97 years 09 months\"\n\n\nRemarks :\nThe years value consists of 2 characters - wrangling direction.\n\n\n\n3.2.5 Reveal sequence displayed in chart\n\n3.2.5.1 Variable :: “month”\n\nggplot(data = resale_prices,\n       aes(y = month)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test Month Sequence\") \n\n\n\n\n\n\n3.2.5.2 Variable :: “storey_range”\n\nggplot(data = resale_prices,\n       aes(y = storey_range)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test storey Range Sequence\")"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#data-wrangling",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#data-wrangling",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Split “month” variable\nInstead of removing “year” or trimming it for the “month” value, split and retain the “year” info as a separate variable.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nseparate_wider_delim( ) - tidyr - to separate a column into multiple columns with a regular expression.\n\n\n\n\nresale_prices <- resale_prices %>%\n  separate_wider_delim(month, \n                       delim = \"-\", \n                       names = c(\"year\", \"month\"))\n\n\n\n3.3.2 Filter data\n\n3.3.2.1 Filter for 2022 & 3 types of flat data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nfilter( ) - dplyr - to filter for data falls within year 2022 and 3 types of flat with the usage of “&”.\n\n\n\n\nprices2022 <- resale_prices %>%\n  filter(`year` == 2022 & `flat_type` == c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n\n\n3.3.2.2 Inspect output\n\n\nShow the code\nunique(prices2022$flat_type)\n\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\n\n\n\n3.3.3 Convert values for “Remaining Lease”\n\n3.3.3.1 Attempts to convert the values to months\n\n\nAttempt#1\n\ntest <- prices2022 %>% \n  separate(remaining_lease, into = c(\"a\",\"b\",\"c\",\"d\"), sep = \" \")\n\nRemarks :\nWarning message -\nWarning: Expected 4 pieces. Missing pieces filled with `NA` in 2247 rows [4, 22, 23, 35, 39, 40, 46, 59, 76, 90, 101, 102, 124, 133, 146, 149, 150, 151, 162, 164, ...].\n\n\nAttempt#2\n\ntest1 <- prices2022 %>%\n  mutate(year_lease = str_extract(`remaining_lease`, \"[0-9]{1,2}\"),\n         month_lease  = str_extract(`remaining_lease`, \"[0-9]{10,11}\"))\n\nglimpse(test1[13:14], 50)\n\nRows: 8,142\nColumns: 2\n$ year_lease  <chr> \"58\", \"56\", \"56\", \"57\", \"57\"…\n$ month_lease <chr> NA, NA, NA, NA, NA, NA, NA, …\n\n\nRemarks :\nThis approach returned “NA” for entire “month_lease” column.\n\n\nAttempt#3\n\ntest2 <- prices2022 %>%\n  mutate(yearlease = str_extract_all(prices2022$remaining_lease, \"([0-9][0-9]{2})\"))\n\nglimpse(test2[,13], 50)\n\nRows: 8,142\nColumns: 1\n$ yearlease <list> <>, <>, <>, <>, <>, <>, <>, <…\n\n\nRemarks :\nThis is the dead end approach.\nTook a break and then chance upon this Tidy’s approach below from Robert L. 2022 via Stackoverflow.\n\n\nAttempt#4\n\ntest3 <- str_split_fixed(prices2022$remaining_lease, \" \", 4) %>% \n  data.frame() %>% \n  rename(v1 = X1, v2 = X2, v3 = X3, v4 = X4) %>%\n  select (-c(v2, v4)) %>%\n  mutate(v3 = ifelse(v3 == \"\", 0, v3))\n\nglimpse(test3, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <chr> \"58\", \"56\", \"56\", \"57\", \"57\", \"61\", \"…\n$ v3 <chr> \"0\", \"07\", \"01\", \"01\", \"01\", \"09\", \"0…\n\n\n\n\nAttempt #4.1 with unTidy’s method\n\ntest3.1 <- as.data.frame(apply(test3, 2, as.numeric))\n\nglimpse(test3.1, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <dbl> 58, 56, 56, 57, 57, 61, 57, 56, 56, 5…\n$ v3 <dbl> 0, 7, 1, 1, 1, 9, 0, 1, 1, 3, 9, 4, 0…\n\n\nRemarks :\nFound this method without using Tidyverse function. Code chunk credit to Joachim S. 20221.\n\n\nAttempt #4.2 with Tidy’s method\n\ntest3.2 <- test3 %>% mutate_if(is.character, as.numeric)\n\nglimpse(test3.2, 50)\n\nRows: 8,142\nColumns: 2\n$ v1 <dbl> 58, 56, 56, 57, 57, 61, 57, 56, 56, 5…\n$ v3 <dbl> 0, 7, 1, 1, 1, 9, 0, 1, 1, 3, 9, 4, 0…\n\n\nRemarks :\nFound this code chunk recommended by Zach, 20222.\nAfter 2/3 of a day in searching for a clean Tidy’s function, can have a peace in mind!!\n\n\n3.3.3.2 Convert “remaining_lease” variable\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nbind_cols( ) - dplyr - to bind prices2022 with new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\nstr_split_fixed( ) - stringr - to split up “remaining_lease” into 4 new columns.\n\n\n\n\nprices_lease2022 <- bind_cols(prices2022, \n                          (str_split_fixed(prices2022$remaining_lease, \n                                           \" \", \n                                           4) %>% \n                             data.frame() %>% \n                             rename(year_lease = X1, \n                                    omit1 = X2, \n                                    month_lease = X3, \n                                    omit2 = X4) %>%\n                             select (-c(omit1, omit2)) %>%\n                             mutate(month_lease = \n                                      ifelse(month_lease == \"\", 0, \n                                             month_lease)) %>% \n                             mutate_if(is.character, as.numeric))\n                          ) %>%\n  mutate (remaining_lease_months = year_lease*12 + month_lease)\n\n\n\n3.3.3.3 Inspect output\n\n\nShow the code\nsummary(prices_lease2022$remaining_lease_months)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  517.0   741.0   896.0   894.2  1097.0  1156.0 \n\n\n\n\n\n3.3.4 Convert Upper Case\n\n3.3.4.1 Variable :: town\nConvert all upper case to only the initial.\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_sentence( ) - stringr - to convert “TOWN” to “Town”.\n\n\n\n\n\nShow the code\nprices_lease2022$town <- str_to_title(prices_lease2022$town)\n\n\n\n\n3.3.4.2 Variable :: flat_type\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_sentence( ) - stringr - to convert “ROOM” to “room”.\n\n\n\n\n\nShow the code\nprices_lease2022$flat_type <- str_to_sentence(prices_lease2022$flat_type)\n\n\nRemarks :\nAlternately, can use str_to_lower( ) function to deliver the same output. But, for future references, decided to use str_to_sentence( ) function instead.\n\n\n3.3.4.3 Variable :: storey_range\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nstr_to_lower( ) - stringr - to convert “TO” to “to”.\n\n\n\n\n\nShow the code\nprices_lease2022$storey_range <- str_to_lower(prices_lease2022$storey_range)\n\n\nRemarks :\nCan avoid this step if upper case of insignificant text is acceptable or tolerable among the values.\n\n\n\n3.3.5 Set Display\n\nstorey_sequence <- c(\"01 to 03\", \"04 to 06\", \"07 to 09\", \"10 to 12\", \"13 to 15\", \"16 to 18\", \"19 to 21\", \"22 to 24\", \"25 to 27\", \"28 to 30\", \"31 to 33\", \"34 to 36\", \"37 to 39\", \"40 to 42\", \"43 to 45\", \"46 to 48\", \"49 to 51\")\n\n\n\n3.3.6 Derive New Variable\nDerive 2 variables to capture the price per square meter and price per remaining lease months.\n\nprice_trim <- prices_lease2022 %>%\n  mutate(`price_psqm` = as.numeric(round(resale_price/floor_area_sqm, 2)),\n         `price_prlm` = as.integer(round(resale_price/remaining_lease_months, 2)),\n         `storey_range` = factor(storey_range, levels = storey_sequence),\n         `month` = as.integer(month),\n         `remaining_lease_months` = as.integer(remaining_lease_months),\n         `resale_price` = as.integer(resale_price)) %>%\n  select(month, town, flat_type, storey_range, flat_model, remaining_lease_months, price_prlm, price_psqm, resale_price)\n\nglimpse(price_trim, 70)\n\nRows: 8,142\nColumns: 9\n$ month                  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ town                   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ flat_type              <chr> \"3 room\", \"3 room\", \"3 room\", \"3 room…\n$ storey_range           <fct> 07 to 09, 01 to 03, 04 to 06, 10 to 1…\n$ flat_model             <chr> \"New Generation\", \"New Generation\", \"…\n$ remaining_lease_months <int> 696, 679, 673, 685, 685, 741, 684, 67…\n$ price_prlm             <int> 485, 530, 573, 543, 537, 516, 500, 54…\n$ price_psqm             <dbl> 4970.59, 4337.35, 5761.19, 4960.00, 4…\n$ resale_price           <int> 338000, 360000, 386000, 372000, 36800…\n\n\n\nrooms3 <- price_trim %>%\n  filter(flat_type %in% \"3 room\") %>%\n  select(-flat_type) %>%\n  group_by(storey_range, flat_model, month, town)\n\n\nrooms3 <- rooms3 %>% group_by(storey_range) %>% arrange(storey_range)\n\n\n\n3.3.6 Group & Pivot data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\npivot_wider( ) - tidyr - to expand the data frame with values from specified variable.\n\n\n\n\n\nShow the code\ntest5 <- price_trim %>%\n  filter(flat_type %in% \"3 room\")\n\n\n`storey_range` = factor(storey_range, levels = storey_sequence),\n`month` = as.integer(month),\n`remaining_lease_months` = as.integer(remaining_lease_months),\n`resale_price` = as.integer(resale_price))\n\n\nShow the code\ntest4 <- prices_lease2022 %>%\n  mutate(`price_psqm` = as.integer(round(resale_price/floor_area_sqm, 2)),\n         `price_prlm` = as.integer(round(resale_price/remaining_lease_months, 2))) %>%\n  select(town, month, flat_type, storey_range, flat_model, remaining_lease_months, price_prlm, price_psqm, resale_price)\n\n\n\ntest5 <- prices_lease2022 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_type, floor_area_sqm),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean)\n\n\ntest_type_sqm <- prices_lease2022 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_type, floor_area_sqm),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean)\n\n\ntest_per_sqm <- prices_lease2022 %>%\n  pivot_wider(id_cols = town,\n              names_from = c(flat_type, floor_area_sqm),\n              values_from = resale_price,\n              values_fill = 0,\n              values_fn = mean,\n              names_vary = \"slowest\")\n\n\ngroup_town <- prices_lease2022 %>% \n  group_by(town, flat_type) %>%\n  summarise(`average_price` = mean(`resale_price`),\n            `average_fasqm` = mean(`floor_area_sqm`),\n            `mode_fasqm` = mode(`floor_area_sqm`),\n            `price_psqm` = `average_price`/`average_fasqm`) %>%\n  ungroup()\n\nmlv(net_paid, method='mfv')\n\namk_3rooms <- prices_lease2022 %>%\n  filter(town == \"Ang Mo Kio\" & flat_type == \"3 room\")"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#visualise-data-with-lines-plot",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#visualise-data-with-lines-plot",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.1 Visualise data with lines plot",
    "text": "4.1 Visualise data with lines plot\n\nlines_group <- ggplot(rooms3, \n                aes(x = price_psqm,\n                    y = storey_range,\n                    group = flat_model)) + \n  geom_line(aes(color = flat_model)) +\n  geom_point(aes(color = flat_model))\n\nlines_group"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3v1.0.html#trellis-plot",
    "href": "takeHome/th_ex3/th_ex3v1.0.html#trellis-plot",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.2 Trellis plot",
    "text": "4.2 Trellis plot\n\npoint_lines <- ggplot(rooms3, \n                aes(x = price_psqm,\n                    y = storey_range,\n                    group = flat_model)) + \n  geom_line(aes(color = flat_model)) +\n  geom_point(aes(color = flat_model)) +\n  ylim(\"01 to 03\", \"04 to 06\", \"07 to 09\", \"10 to 12\", \"13 to 15\", \"16 to 18\", \"19 to 21\", \"22 to 24\", \"25 to 27\", \"28 to 30\", \"31 to 33\", \"34 to 36\", \"37 to 39\", \"40 to 42\", \"43 to 45\", \"46 to 48\", \"49 to 51\") + \n  facet_wrap(~factor(town, levels = c(\"Bedok\", \"Tampines\", \"Jurong West\",\n                                    \"Sengkang\", \"Woodlands\", \"Hougang\",\n                                    \"Yishun\", \"Choa Chu Kang\", \"Punggol\", \"Geylang\")),\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\") +\n  theme_bw() + \n  scale_x_continuous(breaks = seq(2500, 15000, 2500)) +\n  theme(legend.position = \"bottom\",\n        legend.justification = \"left\")\n\npoint_lines\n\n\n\n\n\npoint_lines + \n  transition_time(month) +\n  ease_aes('linear') +\n  labs (subtitle = 'Month: {frame_time}')"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#one-sample-test",
    "href": "takeHome/th_ex3/th_ex3.html#one-sample-test",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "4.3 One Sample Test",
    "text": "4.3 One Sample Test\nDistribution of price per square metre for 3 rooms type.\n\nset.seed(1234)\n\ngghistostats(data = rooms3,\n             x = price_psqm,\n             type = \"bayes\",\n             test.value = 60,\n             xlab = \"Price\")"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#one-sample-test-1",
    "href": "takeHome/th_ex3/th_ex3.html#one-sample-test-1",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.1 One Sample Test",
    "text": "4.1 One Sample Test\nDistribution of price per square metre for 3 rooms type.\n\nset.seed(1234)\n\ngghistostats(\n  data = rooms3,\n  x = price_psqm,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"Price\"\n)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#two-samples-mean-test",
    "href": "takeHome/th_ex3/th_ex3.html#two-samples-mean-test",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "4.4 Two Samples Mean Test",
    "text": "4.4 Two Samples Mean Test\n\n4.4.1 Compute Bartlett Test\nAs shown in 4.1 plot, the data is normally distributed. Hence, Bartlett test is performed to determine homogeneity of variance. The output will help to determine the ANOVA test proceed with parametric (p) or non-parametric (np).\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nbartlett.test( ) - stats - to reveal the homogeneity of variances.\n\n\n\n\n\nShow the code\nbartlett.test(price_psqm ~ flat_model, \n              data = rooms3)\n\n\n\n    Bartlett test of homogeneity of variances\n\ndata:  price_psqm by flat_model\nBartlett's K-squared = 878.84, df = 7, p-value < 2.2e-16\n\n\nRemarks :\nThe p-value is smaller than the significance level of 0.05, which means the assumption for homogeneity of variance is violated.4 This can be interpreted as statistically proven significant differences between price per square metre for different types of 3-room flat models in Singapore.\n\n\n4.4.2 One-way ANOVA Test\nSince the p-value for Barlett test is less than 0.05, non-parametric (Kruskal-Wallis) test 5 will be used to conduct further analysis.\n\nggbetweenstats(data = rooms3,\n               x = flat_model,\n               y = price_psqm,\n               type = \"np\",\n               mean.ci = TRUE,\n               pairwise.comparisons = TRUE,\n               pairwise.display = \"s\",\n               p.adjust.method = \"fdr\",\n               messages = FALSE,\n               outlier.tagging = TRUE)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#correlation-and-multicolinearity-check",
    "href": "takeHome/th_ex3/th_ex3.html#correlation-and-multicolinearity-check",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "4.5 Correlation and Multicolinearity Check",
    "text": "4.5 Correlation and Multicolinearity Check\n\n4.5.1 Price per square metre by flat model\n\nggscatterstats(data = rooms3,\n               x = flat_model,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.5.2 Price per square metre by storey range\n\nggscatterstats(data = rooms3,\n               x = storey_range,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.5.3 Price per square metre by town\n\nggscatterstats(data = rooms3,\n               x = town,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.5.4 Price per square metre by month\n\nggscatterstats(data = rooms3,\n               x = month,\n               y = price_psqm,\n               marginal = FALSE)\n\n\n\n\n\n\n4.5.5 Check multicolinearity\n\nmodel <- lm(formula = resale_price ~ remaining_lease_months + storey_range + month + price_psqm + price_prlm, \n            data = rooms3)\n\nsummary(model)\n\n\nCall:\nlm(formula = resale_price ~ remaining_lease_months + storey_range + \n    month + price_psqm + price_prlm, data = rooms3)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-82768 -10723   1142   8816  62163 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)            -2.544e+05  3.755e+03 -67.750  < 2e-16 ***\nremaining_lease_months  3.155e+02  4.211e+00  74.941  < 2e-16 ***\nstorey_range            2.943e+02  6.967e+01   4.225  2.5e-05 ***\nmonth                  -2.233e+02  9.572e+01  -2.333   0.0197 *  \nprice_psqm              2.233e+01  6.327e-01  35.288  < 2e-16 ***\nprice_prlm              5.238e+02  6.527e+00  80.242  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15070 on 2115 degrees of freedom\nMultiple R-squared:  0.9681,    Adjusted R-squared:  0.968 \nF-statistic: 1.283e+04 on 5 and 2115 DF,  p-value: < 2.2e-16\n\n\nRemarks :\n“month” is not statistically significant to the test. It will be removed.\n\n\n4.5.6 Trim model\n\nmodel1 <- lm(formula = resale_price ~ remaining_lease_months + storey_range + price_psqm + price_prlm, \n            data = rooms3)\n\nsummary(model1)\n\n\nCall:\nlm(formula = resale_price ~ remaining_lease_months + storey_range + \n    price_psqm + price_prlm, data = rooms3)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-82880 -10634   1211   8918  62816 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)            -2.553e+05  3.739e+03 -68.292  < 2e-16 ***\nremaining_lease_months  3.158e+02  4.213e+00  74.970  < 2e-16 ***\nstorey_range            3.048e+02  6.960e+01   4.379 1.25e-05 ***\nprice_psqm              2.220e+01  6.310e-01  35.181  < 2e-16 ***\nprice_prlm              5.235e+02  6.533e+00  80.127  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15090 on 2116 degrees of freedom\nMultiple R-squared:  0.968, Adjusted R-squared:  0.9679 \nF-statistic: 1.6e+04 on 4 and 2116 DF,  p-value: < 2.2e-16\n\n\n\n\n4.5.7 Visualise model diagnostic output\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ncheck_model( ) - performance - to visual check of model various assumptions (normality of residuals, multicollinearity, normality of random effects, heteroscedasticity, homogeneity of variance).\n\n\n\n\ncheck_model(model1)\n\n\n\n\nRemarks :\nBased on the VIF results, none of the variables is above 10, which means there is no high correlation between the variables.\n\n4.5.7.1 Check with Breush Pagan test\n\n\nShow the code\nbptest(model1)\n\n\n\n    studentized Breusch-Pagan test\n\ndata:  model1\nBP = 715.82, df = 4, p-value < 2.2e-16\n\n\nRemarks :\nThe p-value is smaller than 0.05. Hence, the null hypothesis is rejected, meaning there is heteroscedasticity present in this model1. The output for this model will need to further verify for its validity."
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#complete-model-diagnostic",
    "href": "takeHome/th_ex3/th_ex3.html#complete-model-diagnostic",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.5 Complete Model Diagnostic",
    "text": "4.5 Complete Model Diagnostic\n\n\n\n\n\nroom3 <- rooms3 %>%\n  mutate(price_bins = cut(price_psqm, \n                          breaks = c(0, 60, 75, 85, 100))\n  )\n\n\nggbarstats(room3,\n           x = price_bins,\n           y = flat_model)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#visualise-standard-errors-of",
    "href": "takeHome/th_ex3/th_ex3.html#visualise-standard-errors-of",
    "title": "Resale Prices for 3 Types of Public Housing Properties",
    "section": "4.1 Visualise Standard Errors of",
    "text": "4.1 Visualise Standard Errors of\nDistribution of price per square metre for 3-rooms flat models.\n\nprice3R_stats$flat_model_seq = with(price3R_stats, reorder(flat_model, desc(mean))) \n\nggplot(price3R_stats) +\n  geom_errorbar(aes(x = flat_model_seq,\n                    ymin = low_ci, \n                    ymax = upp_ci),\n                width = 0.2, \n                colour = \"black\", \n                alpha = 0.9, \n                size = 0.5) +\n  geom_point(aes(x = flat_model_seq,\n                 y = mean),\n             stat = \"identity\", \n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  ggtitle(\"Standard error of mean price psqm by 3-rooms flat model\") + \n  ylim (5000, 12000)\n\n\n\n\n\n\nShow the code\nfunnel_plot(numerator = rooms3$price_psqm,\n            denominator = rooms3$remaining_lease_months,\n            group = rooms3$flat_model,\n            data_type = \"RC\")\n\n\n\n\n\nA funnel plot object with 8 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nggplotly((ggplot(rooms3,\n                 aes(x = remaining_lease_months,\n                     y = price_psqm)) +\n            geom_point(aes(fill = flat_model,\n                           label = flat_model),\n                       alpha = 0.4) +\n            theme_light() +\n            labs (x = \"Remaining Lease Months\",\n                 y = \"Price per square metre (SGD$)\",\n                 fill = \"Flat Model\",\n                 title = \"Does remaining lease months affect the price per square metre?\",\n                 caption = \"Date Source : Singstat.gov.sg\") +\n           theme(plot.title = element_text(size = 12,\n                                           face = \"bold\"),\n                 plot.caption = element_text(size = 8,\n                                             hjust = 0),\n                 legend.title = element_text(size = 7),\n                 legend.text = element_text(size = 7),\n                 legend.background = element_rect(colour = \"grey60\", \n                                                  linetype = \"dotted\"))),\n         tooltip = c(\"x\",\"y\",\"label\")) %>%\n  layout(legend = list(orientation = \"h\", \n                       x = 0.5, \n                       y = -0.15, \n                       xanchor = \"center\"))\n\n\n\n\n\nRemarks :\nFor 3-rooms “Premium Apartment” type that have 80 years or 960 remaining leasing months or more, can fetch up to almost $12,000 per sqm. However, those that are lesser, can only fetched up to $7,625 per sqm.\nAlso, noticed most transacted units are either having the remaining leasing months above 1000 (83 years or more) or less than 800 months (approximately 67 months).\n\n\nShow the code\n1000/12\n\n\n[1] 83.33333\n\n\nShow the code\n80*12\n\n\n[1] 960\n\n\nShow the code\n1025/12\n\n\n[1] 85.41667\n\n\nShow the code\n800/12\n\n\n[1] 66.66667"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#visualise-standard-errors-with-confidence-intervals",
    "href": "takeHome/th_ex3/th_ex3.html#visualise-standard-errors-with-confidence-intervals",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "4.1 Visualise Standard Errors with Confidence Intervals",
    "text": "4.1 Visualise Standard Errors with Confidence Intervals\nDistribution of price per square metre for 3-rooms flat models.\n\nprice3R_stats$flat_model_seq = with(price3R_stats, reorder(flat_model, desc(mean))) \n\nggplot(price3R_stats) +\n  geom_errorbar(aes(x = flat_model_seq,\n                    ymin = low_ci, \n                    ymax = upp_ci),\n                width = 0.2, \n                colour = \"black\", \n                alpha = 0.9, \n                size = 0.5) +\n  geom_point(aes(x = flat_model_seq,\n                 y = mean),\n             stat = \"identity\", \n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  labs (x = \"3-rooms Flat Models\",\n        y = \"Mean Price per Square Metre($)\") +\n  ggtitle(\"Standard error of mean price psqm by 3-rooms flat model\") + \n  ylim (5000, 12000)"
  },
  {
    "objectID": "takeHome/th_ex3/th_ex3.html#visualise-with-funnel-plot",
    "href": "takeHome/th_ex3/th_ex3.html#visualise-with-funnel-plot",
    "title": "Resale Prices for 3-Room Flat Type of Public Housing Properties",
    "section": "4.2 Visualise with Funnel Plot",
    "text": "4.2 Visualise with Funnel Plot\n\nfunnel_plot(numerator = price3R_fp$price_psqm,\n            denominator = price3R_fp$remaining_lease_months,\n            group = price3R_fp$flat_model,\n            data_type = \"RC\",\n            title = \"Price pSQM Funnel Plot\")\n\n\n\n\nA funnel plot object with 8 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\nRemarks :\nNot much info can be derived apart from knowing “Terrace” as the outlier.\nHence, different approaches with ggplot functions explore and reveal more patterns and insights.\n\n\nShow the code\nggplotly((ggplot(price3R_fp,\n                 aes(x = remaining_lease_months,\n                     y = price_psqm)) +\n            geom_point(aes(fill = flat_model,\n                           label = flat_model),\n                       alpha = 0.4) +\n            theme_light() +\n            labs (x = \"Remaining Lease Months\",\n                  y = \"Price per square metre (SGD$)\",\n                  fill = \"Flat Model\",\n                  title = \"Does remaining lease months affect the price per square metre?\",\n                  caption = \"Date Source : Singstat.gov.sg\") +\n            theme(plot.title = element_text(size = 12,\n                                            face = \"bold\"),\n                  plot.caption = element_text(size = 8,\n                                              hjust = 0),\n                  legend.title = element_text(size = 7),\n                  legend.text = element_text(size = 7),\n                  legend.background = element_rect(colour = \"grey60\", \n                                                   linetype = \"dotted\"))),\n         tooltip = c(\"x\",\"y\",\"label\")) %>%\n  layout(legend = list(orientation = \"h\", \n                       x = 0.5, \n                       y = -0.15, \n                       xanchor = \"center\"))\n\n\n\n\n\n\nRemarks :\nFor 3-rooms “Premium Apartment” type that have 80 years or 960 remaining leasing months or more, can fetch up to almost $12,000 per sqm. However, those that are lesser, can only fetched up to $7,625 per sqm.\nAlso, noticed most transacted units are either having the remaining leasing months above 1000 (83 years or more) or less than 800 months (approximately 67 months).\n\n\nShow the code\nprice3R_fp$flat_model[price3R_fp$remaining_lease_months <= 700]\n\n\n  [1] New Generation New Generation New Generation New Generation New Generation\n  [6] New Generation New Generation New Generation New Generation New Generation\n [11] New Generation New Generation New Generation New Generation New Generation\n [16] New Generation New Generation New Generation New Generation New Generation\n [21] New Generation Improved       New Generation New Generation Improved      \n [26] New Generation Improved       Standard       Standard       New Generation\n [31] Standard       Improved       Improved       Improved       Improved      \n [36] New Generation New Generation New Generation New Generation New Generation\n [41] New Generation New Generation New Generation New Generation New Generation\n [46] New Generation Standard       Standard       Standard       Standard      \n [51] Improved       Improved       Improved       Improved       Improved      \n [56] Improved       Improved       Improved       New Generation Standard      \n [61] Improved       New Generation Improved       Improved       Improved      \n [66] Standard       Improved       Improved       Improved       Improved      \n [71] Improved       Improved       Improved       Improved       Improved      \n [76] Improved       Improved       Improved       Improved       Improved      \n [81] Standard       Improved       New Generation New Generation New Generation\n [86] New Generation New Generation New Generation New Generation New Generation\n [91] New Generation New Generation New Generation New Generation New Generation\n [96] New Generation New Generation New Generation New Generation New Generation\n[101] New Generation New Generation Improved       Improved       New Generation\n[106] Improved       New Generation Standard       Improved       Improved      \n[111] Improved       Improved       Standard       New Generation New Generation\n[116] New Generation New Generation New Generation New Generation Standard      \n[121] Standard       Improved       Standard       Improved       Improved      \n[126] New Generation Improved       Improved       Improved       Improved      \n[131] Improved       Terrace        Standard       Improved       Improved      \n[136] Improved       Improved       Standard       Standard       Standard      \n[141] Improved       Improved       Improved       Improved       Improved      \n[146] Improved       Improved       Improved       Improved       Improved      \n[151] New Generation New Generation New Generation New Generation New Generation\n[156] New Generation New Generation New Generation New Generation New Generation\n[161] New Generation New Generation New Generation New Generation New Generation\n[166] New Generation Improved       Improved       New Generation New Generation\n[171] New Generation New Generation New Generation New Generation New Generation\n[176] Improved       New Generation New Generation Improved       Standard      \n[181] Standard       Improved       Improved       Standard       Improved      \n[186] Improved       Improved       Improved       New Generation New Generation\n[191] New Generation New Generation New Generation New Generation New Generation\n[196] New Generation New Generation New Generation New Generation Standard      \n[201] New Generation Standard       Standard       Improved       Improved      \n[206] Improved       Improved       Standard       Standard       Standard      \n[211] Improved       Improved       Improved       Improved       Improved      \n[216] Improved       Standard       Improved       Improved       Improved      \n[221] Improved       Improved       Improved       Improved       Improved      \n[226] Improved       Improved       Improved       Improved       New Generation\n[231] New Generation New Generation New Generation New Generation New Generation\n[236] New Generation New Generation New Generation New Generation New Generation\n[241] New Generation New Generation New Generation New Generation Improved      \n[246] New Generation New Generation Improved       New Generation Improved      \n[251] Improved       Improved       New Generation Standard       Improved      \n[256] Improved       New Generation Improved       Improved       New Generation\n[261] New Generation New Generation New Generation New Generation New Generation\n[266] New Generation Standard       Standard       Standard       Standard      \n[271] Standard       New Generation New Generation Improved       New Generation\n[276] Improved       Improved       Improved       Improved       Improved      \n[281] Standard       Improved       Improved       Improved       Improved      \n[286] Improved       Improved       Improved       Standard       Improved      \n[291] Improved       Improved       Improved       Improved       Improved      \n[296] Improved       Improved       Standard       Improved       Improved      \n[301] Standard       New Generation Improved       New Generation New Generation\n[306] New Generation New Generation New Generation New Generation New Generation\n[311] New Generation New Generation New Generation New Generation New Generation\n[316] New Generation New Generation New Generation New Generation New Generation\n[321] New Generation Improved       New Generation Improved       New Generation\n[326] New Generation Improved       Improved       Standard       New Generation\n[331] Standard       Standard       New Generation New Generation Improved      \n[336] New Generation New Generation New Generation New Generation New Generation\n[341] New Generation Standard       Standard       New Generation Improved      \n[346] Improved       Improved       Improved       Improved       Standard      \n[351] Standard       Standard       Improved       Improved       Improved      \n[356] Improved       Improved       Standard       Standard       Improved      \n[361] Improved       Improved       Improved       Improved       Improved      \n[366] Improved       Improved       Improved       Improved       Improved      \n[371] Improved       Improved       Improved       Improved       Improved      \n[376] New Generation New Generation New Generation New Generation New Generation\n[381] New Generation New Generation New Generation New Generation New Generation\n[386] New Generation New Generation New Generation New Generation New Generation\n[391] Improved       New Generation Improved       New Generation Improved      \n[396] Improved       New Generation Standard       Improved       Improved      \n[401] Improved       New Generation New Generation New Generation New Generation\n[406] New Generation New Generation New Generation New Generation Standard      \n[411] Standard       Standard       Standard       Standard       Improved      \n[416] Improved       Improved       Improved       Improved       Improved      \n[421] Improved       Terrace        Improved       Improved       Improved      \n[426] Improved       Standard       Improved       Improved       Improved      \n[431] Improved       Improved       Improved       Improved       Improved      \n[436] Improved       Improved       Improved       Improved       Improved      \n[441] New Generation New Generation New Generation New Generation New Generation\n[446] New Generation New Generation New Generation New Generation New Generation\n[451] New Generation New Generation New Generation New Generation New Generation\n[456] New Generation New Generation New Generation New Generation New Generation\n[461] Improved       New Generation New Generation Improved       New Generation\n[466] Standard       Improved       New Generation Standard       Standard      \n[471] Improved       New Generation Improved       Standard       Improved      \n[476] Standard       New Generation New Generation New Generation New Generation\n[481] New Generation New Generation New Generation New Generation Standard      \n[486] Standard       Standard       Standard       Standard       Standard      \n[491] Improved       Improved       Standard       New Generation Improved      \n[496] Improved       Improved       Improved       Improved       Improved      \n[501] New Generation Standard       Terrace        New Generation Improved      \n[506] Improved       Improved       Improved       Standard       Improved      \n[511] Improved       Improved       Improved       Improved       Improved      \n[516] Improved       Improved       Improved       Improved       Improved      \n[521] Standard       Improved       Improved       Improved       New Generation\n[526] New Generation New Generation New Generation New Generation New Generation\n[531] New Generation New Generation New Generation New Generation New Generation\n[536] New Generation New Generation New Generation New Generation New Generation\n[541] New Generation New Generation New Generation New Generation New Generation\n[546] New Generation Improved       New Generation New Generation New Generation\n[551] New Generation New Generation Improved       Improved       Improved      \n[556] Improved       Improved       Improved       Standard       Improved      \n[561] New Generation Improved       Standard       New Generation New Generation\n[566] New Generation New Generation New Generation New Generation New Generation\n[571] Standard       Standard       Standard       Improved       Improved      \n[576] Improved       Improved       Improved       New Generation Improved      \n[581] Standard       Improved       Improved       Improved       Improved      \n[586] Improved       Improved       Improved       Improved       Improved      \n[591] Improved       Improved       Improved       Improved       Improved      \n[596] Improved       Improved       Improved       Improved       Improved      \n[601] Improved       Standard       Improved       Improved       Improved      \n[606] Improved       Improved       New Generation Improved       New Generation\n[611] New Generation New Generation New Generation New Generation New Generation\n[616] New Generation New Generation New Generation New Generation New Generation\n[621] New Generation New Generation New Generation New Generation New Generation\n[626] New Generation New Generation New Generation New Generation New Generation\n[631] New Generation Improved       New Generation New Generation Improved      \n[636] New Generation New Generation New Generation New Generation New Generation\n[641] Improved       New Generation New Generation Improved       Improved      \n[646] Improved       Standard       Improved       Improved       Improved      \n[651] Improved       Improved       Improved       Improved       New Generation\n[656] New Generation New Generation New Generation New Generation Standard      \n[661] Standard       Standard       Standard       Standard       New Generation\n[666] Improved       Improved       New Generation Improved       Improved      \n[671] Improved       Improved       Improved       Improved       Improved      \n[676] Improved       Improved       New Generation Improved       Improved      \n[681] Improved       Improved       Improved       Standard       Improved      \n[686] Improved       Improved       Improved       Improved       Improved      \n[691] Improved       Improved       Improved       Improved       Improved      \n[696] Standard       Improved       Improved       New Generation New Generation\n[701] Improved       Improved       New Generation New Generation New Generation\n[706] New Generation New Generation New Generation New Generation New Generation\n[711] New Generation New Generation Improved       New Generation New Generation\n[716] New Generation New Generation New Generation New Generation New Generation\n[721] Improved       Standard       New Generation Improved       Improved      \n[726] Improved       Improved       Improved       Improved       New Generation\n[731] New Generation New Generation New Generation New Generation Standard      \n[736] Standard       Standard       Improved       Improved       New Generation\n[741] Improved       Improved       Improved       Improved       Standard      \n[746] Standard       Improved       Improved       Improved       Improved      \n[751] Improved       Improved       Standard       Standard       Improved      \n[756] Improved       Improved       Improved       Improved       Improved      \n[761] Improved       Improved       Improved       Standard       Improved      \n[766] Improved       Improved       New Generation New Generation New Generation\n[771] New Generation New Generation New Generation New Generation New Generation\n[776] New Generation New Generation New Generation New Generation New Generation\n[781] New Generation New Generation New Generation Improved       New Generation\n[786] New Generation Improved       New Generation Improved       Standard      \n[791] New Generation Standard       New Generation Improved       Improved      \n[796] New Generation New Generation New Generation New Generation Standard      \n[801] Standard       Standard       Improved       Improved       Standard      \n[806] Improved       New Generation Improved       New Generation Improved      \n[811] Improved       Improved       Improved       Improved       Improved      \n[816] Standard       Improved       Improved       Improved       Improved      \n[821] Improved       Improved       Standard       Standard       Improved      \n[826] Improved       Improved       Terrace        Improved       Improved      \n[831] Improved       Improved       Improved       Improved       Improved      \n[836] Improved       Improved       Improved       Improved       Improved      \n[841] Improved       New Generation Improved       New Generation New Generation\n[846] New Generation New Generation New Generation New Generation New Generation\n[851] New Generation New Generation New Generation New Generation New Generation\n[856] New Generation Improved       New Generation New Generation New Generation\n[861] New Generation Improved       Improved       New Generation New Generation\n[866] Improved       Standard       Standard       Improved       Improved      \n[871] Improved       Improved       New Generation New Generation New Generation\n[876] New Generation New Generation New Generation New Generation New Generation\n[881] Standard       Standard       Standard       Standard       Standard      \n[886] Improved       Standard       Improved       Improved       New Generation\n[891] New Generation Improved       New Generation Improved       Improved      \n[896] Standard       New Generation Improved       Improved       Improved      \n[901] Improved       Improved       Improved       Improved       Standard      \n[906] Standard       Improved       Improved       Improved       Improved      \n[911] Improved       Improved       Improved       Improved       Improved      \n[916] Improved       Standard       Improved       Improved       New Generation\n[921] New Generation Improved      \n8 Levels: DBSS Improved Model A New Generation ... Terrace"
  }
]