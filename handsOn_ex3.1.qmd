---
title: "Programming Interactive Visualisation"
subtitle: "Hands-on Exercise 3.1 : Interactive Data Visualisation"
editor: visual
date:  28 Jan 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores various approaches to make data visualisation interactive.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Scope of this study :**]{style="color:#3a9c88"}

Following are the 3 main focuses :

-   **Interactive visualisation** by using ggiraph and plotlyr packages,

-   **Animation** by using gganimate and plotlyr packages.

-   **Visualising univariate data** with large number of categories by using rPackedBar package.

Additional learning points are :

-   **Reshape data** by using tidyr package.

-   **Process, wrangle and transform data** by using dplyr package.
:::

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(ggiraph, plotly, DT, tidyverse, patchwork, rPackedBar) 
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Usage of R Packages :**]{style="color:#3a9c88"}

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.

    -   [ggiraph](https://davidgohel.github.io/ggiraph/) is an html widget and ggplot2 extension to make the plot interactive.
    -   girafe graphics are responsive. They resize according to their container.

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.

-   [**DT**](https://rstudio.github.io/DT/) a wrapper of the JavaScript Library [DataTables](https://datatables.net/).

    -   Data objects in R can be rendered as interactive HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

-   [**patchwork**](https://patchwork.data-imaginist.com/) for compising multiple plots.

-   [Crosstalk](https://rstudio.github.io/crosstalk/) is an add-on to the html widgets package. It extends html widgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).
:::

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on fictitious data set provided with this lesson.

## **3.2 Import Data**

### **3.2.1 Import Attribute Data**

Involved two (2) steps : import and inspect imported data set.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
#| code-fold: false
exam_data <- read_csv("data/Exam_data.csv")

problems(exam_data)
```

# 4. INTERACTIVE DATA VISUALISATION

## 4.1 ***ggiraph*** package

With reference to the arguments listed in [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/#section-interactive-geometries), display a specified set of information when a reader interact with the charts via :

-   **Tooltip** : display details when the cursor hovers above the element.

-   **Onclick** : display details when the element is clicked.

-   **Data_id** : a column of data sets containing an id associated with the element.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Note for Shiny Application**]{style="color:#3a9c88"}

For **shiny application**, elements associated with an id (data_id) can be selected and manipulated on tne client and server sides.

Refer to this [article](https://davidgohel.github.io/ggiraph/articles/offcran/shiny.html) for a more detailed explanation.
:::

### 4.1.1 Include Tooltip

There are 2 main steps involved :

-   Initiate object.

-   Save the object as an interactive **Scalable Vector Graphics (SVG)** file.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***geom_dotplot_interactive( )*** - ggplot2 -]{style="color:#d46e15"} to plot interactive dot chart.

Arguments :

-   **tooltip** - display the student ID that associated with the dot.
-   **method** - "histodot" to fix bin widths. Else, dot-density binning. "dotdensity" will be the default.
    -   **dot-density binning** : bin positions subject to the data and binwidth (max width of each bin).

    -   **histodot binning** : fixed positions and fixed widths.

        -   Bin width defaults to 1/30 of the range of the data.
-   **dotsize** - diameter of the dots relative to binwidth, 1 (default).

[***girafe( )*** - ggiraph -]{style="color:#d46e15"} to create an interactive gg object for web browser display.

Arguments :

-   width_svg : default size is 6 inches.

-   height_svg : default size is 5 inches.
:::

#### 

::: panel-tabset
## Code chunk

##### step 1 - Create *ggplot* object

```{r}
#| code-fold: false
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (tooltip = ID),
                             stackgroups = TRUE,
                             binwidth = 1,
                             dotsize = 1,
                             method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

```

#### step 2 - create interactive SVG Object

```{r}
#| code-fold: false
girafe(ggobj = p,
       width_svg = 6,
       height_svg = 6*0.618)
```

## No Tooltip :: **histodot**

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(aes
               (stackgroups = TRUE,
                 binwidth = 1,
                 dotsize = 1,
                 method = "histodot")) +
  scale_y_continuous(NULL, 
                     breaks = NULL)
```

## No Tooltip :: **dotdensity**

```{r}
#| code-fold: false
ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(aes
               (stackgroups = TRUE,
                 binwidth = 2,
                 dotsize = 1,
                 method = "dotdensity")) +
  scale_y_continuous(NULL, 
                     breaks = NULL)
```
:::

::: panel-tabset
Remarks :

The first 2 tabs share similar code chunks except for the interactive function, while 3rd tab, with a different method, regardless of which methods are applied, noticed the one with the tooltip is more informative and friendly to interpret the chart.

Y-axis is hidden. It became meaningless when binning along X-axis and stacking by Y-axis.
:::

### 4.1.2 Customise tooltip

#### 4.1.2.1 Display additional details

```{r}
#| code-fold: false
exam_data$tooltip <- c(paste0("Name = ", exam_data$ID,
                              "\n Class = ", exam_data$CLASS)
                       )

p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (tooltip = tooltip),
                            stackgroups = TRUE,
                            binwidth = 1,
                            method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 8,
       height_svg = 8*0.618
       )
```

#### 4.1.2.2 Include statistics

There are 2 parts to this approach :

1.  First part is to set a function to compute a 90% Confidence Interval of the mean.

2.  Second part is to include the derived statistics in the tooltip.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***stat_summary( )*** - ggplot2 -]{style="color:#d46e15"} to summarise y values at unique x.

Arguments :

-   geom - geometric object to use for displaying data. There are 2 ways to input value, either input :

    -   "GeomInteractiveCol", a ggproto classes for ggiraph.

    -   "errorbar" without "geom\_" prefix.
:::

```{r}
#| code-fold: false
tooltip <- function(y, 
                    ymax, 
                    accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
  }

gg_point <- ggplot(data = exam_data, 
                   aes(x = RACE)) +
  stat_summary(aes
               (y = MATHS,
                 tooltip = after_stat(
                   tooltip(y, 
                           ymax)
                   )),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill = "light blue") +
  stat_summary(aes
               (y = MATHS),
                fun.data = mean_se,
                geom = "errorbar",
                width = 0.2,
                size = 0.2
               )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

Remarks :

Will have the error below if include " " for "GeomInteractiveCol".

    Error in `stat_summary()`:
    ! Can't find geom called "GeomInteractiveCol"

Error bars can be used to visually compare 2 quantities when other conditions hold. It indicates :

-   whether the differences are statistically significant.

-   goodness of fit of a given function to describes the data.

Adding error bars to communicate more information visually how certain the specific values are presenting.

#### 4.1.2.3 Customise appearance

```{r}
#| code-fold: false
tooltip_css <- "background-color: white; 
                font-style: bold; 
                color: black;"

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (tooltip = ID),
                            stackgroups = TRUE,                  
                            binwidth = 1,                        
                            method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(ggobj = p,
       width_svg = 6,                         
       height_svg = 6*0.618,
       options = list(
       opts_tooltip(
       css = tooltip_css))
       )        
```

Remarks :

The tooltip's background colour changed from black to white colour, and the text colour is now white and bold.

### 4.1.3 Highlight associated data

#### 4.1.3.1 Highlight with *data_id* aesthetic

Highlight other elements that share the same data_id value for "CLASS".

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***data_id( )*** - ggiraph -]{style="color:#d46e15"} to highlight other elements that share the same data_id value for "CLASS".

-   Default value for hover_css is " fill:orange;"
:::

```{r}
#| code-fold: false
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (data_id = CLASS),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(ggobj = p,
       width_svg = 6,                         
       height_svg = 6*0.618)                                        
```

#### 4.1.3.2 Styling hover effect

```{r}
#| code-fold: false
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (data_id = CLASS),
                           stackgroups = TRUE,                  
                           binwidth = 1,                        
                           method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(ggobj = p,
       width_svg = 6,                         
       height_svg = 6*0.618,
       options = list(
       opts_hover(css = "fill: #202020;"),
       opts_hover_inv(css = "opacity:0.2;")
       ))                                        
```

### 4.1.4 Combine tooltip and hover effect

```{r}
#| code-fold: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (tooltip = CLASS,
                             data_id = CLASS),
                           stackgroups = TRUE,                  
                           binwidth = 1,                        
                           method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       )                                        
```

### 4.1.5 Click effect with **onclick**

There are 2 parts in this approach :

1.  Set the student ID a vector that direct users to the link's site.
2.  Plot with "onclick" function.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***sprintf( )*** - base -]{style="color:#d46e15"} to wrap the C function that returns a character vector containing a formatted combination of text and variable values.

[***onclick( )*** - shinyjs -]{style="color:#d46e15"} to run R code when an element is clicked.

-   Arguments references for [Shiny](https://www.rdocumentation.org/packages/shinyjs/versions/0.0.6.0/topics/onclick).
:::

```{r}
#| code-fold: false
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (onclick = onclick),
                           stackgroups = TRUE,
                           binwidth = 1,                        
                           method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618)                                        
```

Remarks :

Ensure the string column contains valid javascript instructions.

### 4.1.6 Coordinated multiple views

When a data point is selected, the data point with the corresponding ID in another chart is highlighted too.

There are 2 steps involved in creating such coordination :

1.  Create 2 or more objects with *ggiraph* interactive functions.

2.  Add *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package to create the interactive coordinated multiple views.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***coord_cartesian( )*** - ggplot2 -]{style="color:#d46e15"} to set the limits on the coordinate system for the plot, so that the underlying data won't be changed.

[***opts_hover( )*** - ggiraph -]{style="color:#d46e15"} to set the hover effect.

Argument :

-   2 input for css : either a scalar character or "girafe_css" to control CSS for different element types.

Note :

**opts_hover** for interactive geometrices in panels.

**opts_hover_key** for interactive scales / guides.

**opts_hover_theme** for itneractie theme elements.

**opts_hover_inv** for the effect on the rest of the geometries, while one is hovered.
:::

```{r}
#| code-fold: false
p1 <- ggplot(data = exam_data,
             aes(x = MATHS)) +
  geom_dotplot_interactive(aes
                           (data_id = ID),
                           stackgroups = TRUE,                  
                           binwidth = 1,                        
                           method = "histodot") +  
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,               
                     breaks = NULL)
```

```{r}
#| code-fold: false
#| fig-height: 12
#| fig-width: 14
p2 <- ggplot(data = exam_data,
             aes(x = ENGLISH)) +
  geom_dotplot_interactive(aes
                           (data_id = ID),
                           stackgroups = TRUE,                  
                           binwidth = 1,                        
                           method = "histodot") +
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 / p2),
       width_svg = 6,
       height_svg = 10,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

Remarks :

!!!!! When time permits, need to explore how to add tooltip.

## 4.2 plotly package

There are 2 approaches to create interactive graph with this package :

-   with *plot_ly( )*

-   with *ggplotly( )*

### 4.2.1 With *plot_ly( )* function

#### 4.2.1.1 Initiate scatter plot

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***plot_ly( )*** - plotly -]{style="color:#d46e15"} to initiate an interactive scatter plot.

Argument :

-   color to map values to relevant "fill-color" attribute(s).

-   colors can be colorbrewer2.org palette name ("YlOrRd" or "Blues"), hexadecimal "#RRGGBB" or color interpolation function.
:::

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

#### 4.2.1.2 Visualise different values

::: panel-tabset
## color = \~"RACE"

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

## color = \~"RACE"

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~"RACE")
```

## color = "RACE"

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = "RACE")
```
:::

Remarks :

Cannot only use \` \` , else will have error "object \`RACE\` not found".

#### 4.2.1.3 Change colour palette

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = "Set1")
```

#### 4.2.1.4 Customise colour scheme

```{r}
#| code-fold: false
pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = pal)
```

#### 4.2.1.5 Customise tooltip

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID,
                      "<br>Class:", CLASS),
        color = ~RACE, 
        colors = "Set1")
```

#### 4.2.1.6 Customise layout

```{r}
#| code-fold: false
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID,     
                      "<br>Class:", CLASS),  
        color = ~RACE, 
        colors = "Set1") %>%
  layout(title = "English Score versus Maths Score",
         xaxis = list(range = c(0, 100)),
         yaxis = list(range = c(0, 100)))
```

### 4.2.2 With *ggplotly( )* function

#### 4.2.2.1 Create single scatter plot

```{r}
#| code-fold: false
p <- ggplot(data = exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

ggplotly(p)
```

#### 4.2.2.2 Coordinated multiple views

There are 2 steps involved :

1.  create multiple plots with subplot function.
2.  set coordinated multiple views.

#### Create multiple plots

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***subplot( )*** - plotly -]{style="color:#d46e15"} to view multiple plots in a single view.

[***ggplotly( )*** - plotly -]{style="color:#d46e15"} to convert ggplot2 to plotly.
:::

```{r}
#| code-fold: false
#| fig-width: 14
p1 <- ggplot(data = exam_data, 
             aes(x = MATHS,
                 y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

p2 <- ggplot(data = exam_data,
             aes(x = MATHS,
                 y = SCIENCE)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

#### Set coordination view

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***highlight_key( )*** - plotly -]{style="color:#d46e15"} to create an object of crosstalk:: sharedData class to highlight data based on primary key.
:::

```{r}
#| code-fold: false
#| fig-width: 14
d <- highlight_key(exam_data)

p1 <- ggplot(data = d,
             aes(x = MATHS,
                 y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

p2 <- ggplot(data = d, 
             aes(x = MATHS,
                 y = SCIENCE)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

## 4.3 DT package

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***datatable( )*** - DT -]{style="color:#d46e15"} to create an interactive HTML table.

Argument :

-   class set with "compact", also a default value, is to reduce the amount of white-space and increase the information density on screen.

    -   can mixed with other values like "compact cell-border stripe"
:::

::: panel-tabset
## Default :: compact

```{r}
#| code-fold: false
datatable(exam_data,
          class= "compact")
```

## "compact cell-border stripe"

```{r}
#| code-fold: false
#| fig-width: 14
datatable(exam_data,
          class= "compact cell-border stripe")
```

## "display"

A short-hand for "stripe", "hover", "row-border" and "order-column" classes.

```{r}
#| fig-width: 14
#| code-fold: false
datatable(exam_data,
          class= "display")
```
:::

## 4.4 crosstalk package

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***bscols( )*** - crosstalk -]{style="color:#d46e15"} to arrange HTML table with other elements side by side.

Argument :

-   device set with "sm" so that can collapse to single column when screen size smaller than 768px.

    -   "xs" = never collapse

    -   "md" = collapse when screen smaller than 992px

    -   "lg" = collapse when screen smaller than 1200px
:::

```{r}
#| code-fold: false
#| fig-height: 14
#| fig-width: 14
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 6,
                  device = "sm")        
```

# 5. REFERENCES

1.  Kam T.S. (2023). Animated Data Visualisation:: gganimate methods. https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03-programming%20interactive%20visualisation#animated-data-visualisation-gganimate-methods

### ggiraph

This [link](https://davidgohel.github.io/ggiraph/) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)\

-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)

-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

### plotly for R

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).

-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)

-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.

-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.

-   [Getting Started](https://gganimate.com/articles/gganimate.html)

-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
