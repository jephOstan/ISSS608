---
title: "Exploration 2 - Pyramid Chart"
editor: visual
date:  28 Dec 2022
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

This study explores the **Pyramid chart** using **ggplot2** and supporting R packages.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Challenges in wrangling the raw data :**]{style="color:#3a9c88"}

The age group variable, "AG", is a character data type.

If it is used to plot the population pyramid, "10_to_14" will be parsed first instead of "5_to_9" after "0_to_4 is parsed.

Because of that, the order in the chart will be incorrect.

[Resolve manually with these functions - *mutate( )* and *arrange( )*.]{style="color:#d69c3c"}
:::

# 2. R PACKAGE REQUIRED

The following are the packages required for this exercise :

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggplot2)
```

[Remarks :]{style="color:#d69c3c"}

[Packages to consider -]{style="color:#d69c3c"}

[sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}
:::

# 3. DATA

## 3.1 Acquire Data Source

-   Singstat Dataset for Population

    1.  Download "Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022" [dataset](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) in csv format from Singstat.gov.sg.

## 3.2 Import Data

### 3.2.1 Import Tableau Data

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Two (2) steps : import and inspect imported data set.

#### 3.2.1.1 import data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
pop_sgp <- read_csv("data/respopagesexfa2022.csv")

problems(pop_sgp)
```

#### 3.2.1.2 inspect missing value

```{r}
skim(pop_sgp)
```

[Remarks :]{style="color:#d69c3c"}

[Preliminary data interpretation - based on 2022 consensus data, .]{style="color:#d69c3c"}
:::

## 3.3 Data Wrangling

### 3.3.1 Compute Frequency Count

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Compute the frequency count by "age" and "sex".

#### **3.3.1.1 compute returns by "Sub-category"**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group Singapore population by age and gender.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the number of residents for each group.

[***arrange( )*** - dplyr -]{style="color:#d46e15"} to sort the rows in descending order of the counted "Returned" value of each "Sub-category".
:::

```{r}
order <- c("0_to_4", "5_to_9", "10_to_14", "15_to_19", "20_to_24", "25_to_29", "30_to_34", "35_to_39", "40_to_44", "45_to_49", "50_to_54", "55_to_59", "60_to_64", "65_to_69", "70_to_74", "75_to_79", "80_to_84", "85_to_89", "90_and_over")

pop_agSx <- pop_sgp %>%
  group_by(`AG`,`Sex`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  mutate(AG = factor(AG, levels = order)) %>%
  arrange(AG) %>%
  ungroup()

head(pop_agSx)
```
:::

### 

### 3.3.2 Create Smaller Data Frame

#### 3.3.2.1 filter rows with head( ) function

```{r}
test0 <- head(pop_sgp, 5000) %>%
  select(-c("SZ", "FA", "Time"))
```

#### 3.3.2.2 specify rows

```{r}
test0_1 <- pop_sgp[c(1:5000),] %>%
  select(-c(2,5,7))
```

#### 3.3.2.3 verify outputs

```{r}
questionr::freq(test0 == test0_1)
```

### 3.3.3 Group Variables

#### 3.3.3.1 count population for Planning Area

```{r}
test1 <- test0 %>%
  group_by(`PA`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  ungroup()

head(test1)
```

```{r}
th_test <- pop_sgp %>%
  select(-c("SZ", "FA", "Time")) %>%
  group_by(`PA`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  ungroup()
```

```{r}
arrange(th_test, desc(th_test$Count))
```

#### 3.3.3.2 count population by Planning Area & Gender

```{r}
test1_1 <- test0 %>%
  group_by(`PA`,`Sex`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  ungroup()

head(test1_1)
```

#### \-- create new columns manually

```{r}
test1_1$male <- test1_1$Sex == "Males"
test1_1$female <- test1_1$Sex == "Females"

head(test1_1)
```

#### \-- create new columns with pivot_wider ( ) function

```{r}
test1_2 <- test1_1 %>%
  pivot_wider(id_cols = PA,
              names_from = Sex,
              values_from = Count)

head(test1_2)
```

### 3.3.4 Convert Row Names for Tibbles

The row.names( ) function is deprecated for Tibbles.

Hence, convert tbl_df to data.frame first with as.data.frame( ) function. Then, replace the row names with .rowNamesDF( ) function.

#### 3.3.4.1 convert to data.frame

as.data.frame - base

```{r}
test1_2.df <- as.data.frame(test1_2)
```

#### 3.3.4.2 replace row names

.rowNamesDF - base

```{r}
.rowNamesDF(test1_2.df, make.names = FALSE) <- test1_2$PA
```

#### \-- remove "PA"

```{r}
test1_2df <- test1_2.df[-(1)]
```

# 4 EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Plot Pyramid Chart

#### **4.1.1 Plot Static Pyramid**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_col( )*** - ggplot2 -]{style="color:#d46e15"} to create the bar chart with the bar length represent the actual population stats.

[***scale_x\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to modify the labels on the x-axis to provide better readability.

[***ifelse( )*** - base -]{style="color:#d46e15"} to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.
:::

```{r}
pyramid_agSx <- ggplot(pop_agSx, 
                       aes(x = ifelse(Sex == "Males",
                                      yes = -Count,
                                      no = Count),
                           y = AG,
                           fill = Sex)) + 
  geom_col() +
  scale_x_continuous(breaks = seq(-150000, 150000, 50000), 
                     labels = paste0(
                       as.character(
                         c(seq(150, 0, -50), 
                           seq(50, 150, 50))),
                       "k")) +
  labs (x = "Population", 
        y = "Age", 
        title = 'Singapore Age-Sex Population Pyramid 2022') +
  theme_bw() +
  theme(axis.ticks.y = element_blank()) +
  scale_fill_manual(values = c("Males" = "lightblue", 
                               "Females" = "lightpink")) 

pyramid_agSx
```
:::

#### **4.1.2 Interactive Pyramid Chart**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
```{r}
ggplotly(pyramid_agSx, 
         session = "knitr")
```

[Remark :]{style="color:#d69c3c"}

[The pyramid above shows the younger generation's lower percentage, making Singapore's population structure a constrictive type. That means an ageing population.]{style="color:#d69c3c"}

[By June 2022, 4.07 million residents population with a median age of 42.1,]{style="color:#d69c3c"}[^1] [which is approximately a 19% increase from the median age of 35.3 back in the year 2002]{style="color:#d69c3c"}[^2].

[Also, another observation is from 25 age onward, the female population is higher than the male population. As of 2020, Singapore's adjusted gender pay gap (GPG) is at 6%]{style="color:#d69c3c"}[^3].

[Measures and new schemes may be required to further narrow the gender pay gap and encourage the birth rate or may have long-lasting socio-economic repercussions.]{style="color:#d69c3c"}
:::

[^1]: [Singstat. (2022). Population Dashboard. https://www.singstat.gov.sg/find-data/search-by-theme/population/population-and-population-structure/visualising-data/population-dashboard]{style="color:#d69c3c"}

[^2]: [Singstat. (2002). Indicators On Population. https://tablebuilder.singstat.gov.sg/table/TS/M810001]{style="color:#d69c3c"}

[^3]: [Ministry of Manpower. (2020). Report: Singapore's Adjusted Gender Pay Gap. https://stats.mom.gov.sg/Pages/Singapores-Adjusted-Gender-Pay-Gap.aspx]{style="color:#d69c3c"}

## 4.2 Plot Bar Chart

```{r}
test1_1.mat <- as.matrix.data.frame(test1_1)
test1_2.mat <- as.matrix.data.frame(test1_2df)
```

### 4.2.1 Explore Bar Plot

### 4.2.1.1 graphics package

```{r}
barplot(test1_2.mat,
        horiz = TRUE, 
        names.arg = c("females", "males"))
```

#### 4.2.1.2 ggplot2 package

```{r}
test1_1.df <- data.frame(test1_1)
```

```{r}
ggplot(data = test1_1.df, 
              aes(x = PA, 
                  y = Count)) +
  geom_bar(stat = "identity")


ggplot(data = test1_1.df, 
              aes(x = PA, 
                  y = Count)) +
  geom_bar(stat = "identity") +
  coord_flip()

```

```{r}
barplot(test1_2.mat, col = "white", border = "steelblue")

barplot(test1_2.mat, col = "white",
        border = c("#999999", "#E69F00", "#56B4E9"))

barplot(test1_2.mat, col = "steelblue")

barplot(test1_2.mat, col = c("#999999", "#E69F00", "#56B4E9"))
```

```{r}
barplot(test1_2.mat,
        col = "steelblue",
        main = "Population Gender",
        xlab = "Gender",
        ylab = "Count"
        )
```

### 4.2.2 Stacked Bar Plots

```{r}
barplot(test1_2.mat,
        main = "Population Count",
        font.main = 4,
        col = c("lightblue", "mistyrose", "lightcyan", 
                 "lavender", "cornsilk"),
        legend = rownames(test1_2.mat))
```

### 4.2.3 Grouped Bar Plots

beside = FALSE, stacked bar (output same as above); TRUE , juxtaposed bars.

```{r}
barplot(test1_2.mat, 
        col = c("lightcyan",
                           "lavender",
                           "cornsilk"),
        legend = rownames(test1_2.mat),
        args.legend = list(x = "topright"), 
        ylim = c(0,150000), 
        beside = TRUE)
```

## 4.3 Plot Line Chart

```{r}
# Create some variables
x <- 1:10
y1 <- x*x
y2  <- 2*y1
```

### 4.3.1 Plot Basic Line

```{r}
# Create a basic stair steps plot 
plot(x, y1, type = "S")
# Show both points and line
plot(x, y1, type = "b", pch = 19, 
     col = "red", xlab = "x", ylab = "y")
```

### 4.3.2 Plot Multiple Lines

```{r}
# Create a first line
plot(x, y1, type = "b", frame = FALSE, pch = 19, 
     col = "red", xlab = "x", ylab = "y")
# Add a second line
lines(x, y2, pch = 18, col = "blue", type = "b", lty = 2)
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
       col=c("red", "blue"), lty = 1:2, cex=0.8)
```

## 4.4 Plot Pie Chart

```{r}
#pie(x, labels = names(x), radius = 0.8)
df <- data.frame(
  group = c("Male", "Female", "Child"),
  value = c(25, 25, 50)
  )
df
```

### 4.4.1 Plot Basic Pie Chart

```{r}
pie(df$value, labels = df$group, radius = 1)
```

#### 4.4.1.1 change colour

```{r}
pie(df$value, labels = df$group, radius = 1,
    col = c("#999999", "#E69F00", "#56B4E9"))
```

### 4.4.2 Plot 3D Pie Chart

plotix::pie3D( )

```{r}
# 3D pie chart
library("plotrix")
pie3D(df$value, labels = df$group, radius = 1.5, 
      col = c("#999999", "#E69F00", "#56B4E9"))
```

4.4.3 Explode 3D Pie Chart

```{r}
# Explode the pie chart
pie3D(df$value, labels = df$group, radius = 1.5,
      col = c("#999999", "#E69F00", "#56B4E9"),
      explode = 0.1)
```

## 4.5 Plot Dot Chart

### 4.5.1 Plot 1 Numeric Vector

```{r}
mtcars <- mtcars[order(mtcars$mpg), ]

dotchart(x, labels = NULL, groups = NULL, 
         gcolor = par("fg"), color = par("fg"))
```

```{r}
dotchart(mtcars$mpg, labels = row.names(mtcars),
         cex = 0.6, xlab = "mpg")
```

#### 4.5.1.1 separate vector by colour

```{r}
# Plot and color by groups cyl
grps <- as.factor(mtcars$cyl)
my_cols <- c("#999999", "#E69F00", "#56B4E9")
dotchart(mtcars$mpg, labels = row.names(mtcars),
         groups = grps, gcolor = my_cols,
         color = my_cols[grps],
         cex = 0.6,  pch = 19, xlab = "mpg")
```

### 4.5.2 Plot Matrix

```{r}
dotchart(VADeaths, cex = 0.6,
         main = "Death Rates in Virginia - 1940")
```

## 4.6 Plot Group Means

```{r}
head(ToothGrowth)
```

```{r}
library(gplots)
# Plot the mean of teeth length by dose groups
plotmeans(len ~ dose, data = ToothGrowth, frame = FALSE)
```

```{r}
# Add mean labels (mean.labels = TRUE)
# Remove line connection (connect = FALSE)
plotmeans(len ~ dose, data = ToothGrowth, frame = FALSE,
          mean.labels = TRUE, connect = FALSE)
```

# 5. REFERENCES
