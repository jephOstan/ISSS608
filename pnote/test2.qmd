---
title: "Exploration 2 :: Pyramid Chart"
editor: visual
date:  28 Dec 2022
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# OVERVIEW

In this take-home exercise, we will explore the pros and cons of creating data visualisation using **ggplot2** and Tableau. The data visualisation for this exercise focus on the population pyramid of Singapore by age cohort and gender.

#### **CHALLENGES FACED**

-   The raw data had to be extensively transformed before it could be used for visualisation. It is challenging to ensure that the fields have been adequately transformed, and frequently results in recycle work where one has to modify data wrangling after doing the visualisation and repeating again. For example, the Age Group column for the population pyramid has a character data type, which means that when plotting or generating dataframes including this column, 0_to_4 would be parsed first, followed by 10_to_14, instead of the expected 5_to_9. The order in the visualisation would be incorrect based on this order. The issue was resolved by manually changing the order using *mutate()* and then sorting via *arrange()*.

-   The secondary axes in **ggplot2** is just based on a one-to-one transformation of the primary axes, hence the charts are still referenced to the primary axes. The challenge was resolved by transforming the secondary axis by a coefficient, such that the scale matches the primary axis.

-   As **ggplot2** produces static charts, bringing in interactivity in the visualizations may be a challenge. This was resolved by using *plotly* package, which can be quickly transformed for the Age-Sex Population Pyramid. The pareto chart, which contained a secondary axis, required to be plotted using **plotly** tools.

-   The default visualization created with **ggplot2** is not appealing and not professional looking. The default grey background was difficult to view for some charts and some of the default themes are not easy on the eyes. Hence, some charts may need to be extensively customized. For instance, the grid lines, axis labels, colour scheme of the pareto chart had to be customised.

#### **COMPARING BETWEEN TABLEAU AND R**

-   In R, data preparation for different charts using different data sets can be done on one platform using the same environment. Tableau, on the other hand requires separate workbook for separate data sets. . On the other hand, web scraping cannot be performed on Tableau. Both pareto chart and population pyramid can be plotted in the same environment in R, whereas requires 2 workbooks in Tableau.

-   Tableau is more user friendly and fool-proof in creating visualisations. However, R has a rich repository of packages that directly creates different chart types, whereas Tableau requires some manipulation of base chart types. For example, though not carried out in this exercise, a basic Pareto plot can be created by *stat_pareto()* of **ggQC**, and a basic population pyramid can be plotted using *nPyramid()* of **rCharts**.

-   Visualisations in Tableau are interactive, whereas **ggplot2** in R is static. Extra effort is also required to customise the details of the visualisation in **ggplot2**. Interactivity and customisation can be included through **ggplot** and **plotly**. Once a chart is created, the same visualisation using different variables or level of details can be easily re-created using similar lines of code.

As Tableau produces interactive charts and dashboards, we will use **plotly** to convert the **ggplot2** plots to produce interactive graphs for a more objective comparison.

# 2. R PACKAGE REQUIRED

The following are the packages required for this exercise :

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)
```

[Remarks :]{style="color:#d69c3c"}

[sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}

[Alternate code chunk -]{style="color:#d69c3c"}

```{r}
#| code-fold: false
#| eval: false
packages = c('tidyverse', 'readxl', 'knitr', 'plotly')
for(p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p, character.only = T)
}
```
:::

# 3. DATA

## 3.1 Acquire Data Source

-   Singstat Dataset for Population

    1.  Download "Singapore Residents by Planning Area Subzone, Age Group, Sex and Type of Dwelling, June 2022" [dataset](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) in csv format from Singstat.gov.sg.

## 3.2 Import Data

### 3.2.1 Import Tableau Data

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Two (2) steps : import and inspect imported data set.

#### 3.2.1.1 import data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
pop_sgp <- read_csv("data/respopagesexfa2022.csv")

problems(pop_sgp)
```

#### 3.2.1.2 inspect missing value

```{r}
skim(pop_sgp)
```

[Remarks :]{style="color:#d69c3c"}

[Preliminary data interpretation - based on 2022 consensus data, .]{style="color:#d69c3c"}
:::

## 3.3 Data Wrangling

### 3.3.1 Compute Frequency Count

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Compute the frequency count by "age" and "sex".

#### **3.3.1.1 compute returns by "Sub-category"**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group Singapore population by age and gender.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the number of residents for each group.

[***arrange( )*** - dplyr -]{style="color:#d46e15"} to sort the rows in descending order of the counted "Returned" value of each "Sub-category".
:::

```{r}
order <- c("0_to_4", "5_to_9", "10_to_14", "15_to_19", "20_to_24", "25_to_29", "30_to_34", "35_to_39", "40_to_44", "45_to_49", "50_to_54", "55_to_59", "60_to_64", "65_to_69", "70_to_74", "75_to_79", "80_to_84", "85_to_89", "90_and_over")

pop_agSx <- pop_sgp %>%
  group_by(`AG`,`Sex`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  mutate(AG = factor(AG, levels = order)) %>%
  arrange(AG) %>%
  ungroup()

head(pop_agSx)
```
:::

# 4 EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Plot Pyramid Chart

#### **4.1.1 Plot Static Pyramid**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_col( )*** - ggplot2 -]{style="color:#d46e15"} to create the bar chart with the bar length represent the actual population stats.

[***scale_x\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to modify the labels on the x-axis to provide better readability.

[***ifelse( )*** - base -]{style="color:#d46e15"} to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.
:::

```{r}
pyramid_agSx <- ggplot(pop_agSx, 
                       aes(x = ifelse(Sex == "Males",
                                      yes = -Count,
                                      no = Count),
                           y = AG,
                           fill = Sex)) + 
  geom_col() +
  scale_x_continuous(breaks = seq(-150000, 150000, 50000), 
                     labels = paste0(
                       as.character(
                         c(seq(150, 0, -50), 
                           seq(50, 150, 50))),
                       "k")) +
  labs (x = "Population", 
        y = "Age", 
        title = 'Singapore Age-Sex Population Pyramid 2022') +
  theme_bw() +
  theme(axis.ticks.y = element_blank()) +
  scale_fill_manual(values = c("Males" = "lightblue", 
                               "Females" = "lightpink")) 

pyramid_agSx
```

[Remark :]{style="color:#d69c3c"}
:::

#### **4.1.2 Interactive Pyramid Chart**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
```{r}
ggplotly(pyramid_agSx, 
         session = "knitr")
```

[Remark :]{style="color:#d69c3c"}

[The pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.]{style="color:#d69c3c"}

[Hence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge.]{style="color:#d69c3c"}
:::
