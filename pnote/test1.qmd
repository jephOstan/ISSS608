---
title: "Exploration 1 :: Pareto Chart"
editor: visual
date:  28 Dec 2022
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

This study explores the **Pyramid chart** using **ggplot2** and supporting R packages.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Challenges to plot secondary-axis :**]{style="color:#3a9c88"}

The functions in **ggplot2** transform the secondary axis one-to-one based on the primary axis. Hence, the scale of the secondary axis plot will not be accurate.

[Resolve by transforming the secondary axis with a coefficient to match the scale with the primary axis.]{style="color:#d69c3c"}
:::

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Lack of interactive function :**]{style="color:#3a9c88"}

The **ggplot2** can only produce static charts.

[Resolve by using **plotly** functions to allow readers to hover over the chart to reveal details for each plotted point.]{style="color:#d69c3c"}
:::

# 2. R PACKAGE REQUIRED

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling)
```

[Remarks :]{style="color:#d69c3c"}

[sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}

[Alternate code chunk -]{style="color:#d69c3c"}

```{r}
#| code-fold: false
#| eval: false
packages = c('tidyverse', 'readxl', 'knitr', 'plotly')
for(p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p, character.only = T)
}
```
:::

## 2.2 Summary of R Functions

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
R packages and functions used in this exercise :

## **base :**

-   [[cumsum( )](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cumsum) - ]{style="color:#d69c3c"}

**ggplot2 :**

-   [[scale_continuous( )](https://www.rdocumentation.org/packages/ggplot2/versions/3.4.0/topics/scale_continuous) - ]{style="color:#d69c3c"}
:::

# 3. DATA

## 3.1 Acquire Data Source

This study will be based on Tableau's fictatious data set -

1.  Download "Superstore" [dataset](https://community.tableau.com/s/question/0D54T00000OPxEhSAL/does-any-have-the-sample-superstore-dataset-for-tableau-version-20203-when-i-downloaded-tableau-the-datasources-file-was-empty-i-tried-to-look-at-saved-data-sources-already) for **Tableau** version 2020.3.
2.  Rename the title to "superstore_2020.3".

## 3.2 Import Data

### 3.2.1 Import Tableau Data

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Two (2) steps : import and inspect imported data set.

#### 3.2.1.1 import data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_xls( )*** - readxl -]{style="color:#d46e15"} to read excel into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the Excel file.
:::

```{r}
orders <- read_xls("data/superstore_2020.3.xls",
                   sheet = "Orders")

problems(orders)
```

```{r}
returns <- read_xls("data/superstore_2020.3.xls",
                   sheet = "Returns")

problems(returns)
```

#### 3.2.1.2 inspect for missing value

```{r}
skim(orders)
```

[Remarks :]{style="color:#d69c3c"}

[Preliminary data interpretation - between 2017 and 2020, 793 unique customers contributed to the sales volume of 5,009 orders for 1,862 products.]{style="color:#d69c3c"}

```{r}
skim(returns)
```

```{r}
summary(unique(returns$Returned))
summary(unique(returns$`Order ID`))
```

[Remark :]{style="color:#d69c3c"}

[Preliminary data interpretation - there were 296 out of 5,009 orders returned.]{style="color:#d69c3c"}
:::

## 3.3 Data Wrangling

### 3.3.1 Join Data Frames

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Combine both data frames.

#### 3.3.1.1 join *returns* to *orders*

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***left_join( )*** - dplyr -]{style="color:#d46e15"} to join the *returns* data frame to *orders* data frame by "Order ID" as the unique identifier.
:::

```{r}
summary(ss_ordersMgmt <- left_join(orders, 
                           returns,
                        by = c('Order ID' = 'Order ID')
                        ))
```

[Remark :]{style="color:#d69c3c"}

[There were 12,420 items sold, as indicated by the variable lengths.]{style="color:#d69c3c"}

#### 3.2.1.2 explore and inspect

```{r}
freq(ss_ordersMgmt$Returned)
```

[Remark :]{style="color:#d69c3c"}

[3,226 out of ordered 12,420 items, approximately 25.97% of items returned.]{style="color:#d69c3c"}
:::

### 3.3.2 Compute Frequency Count

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
Group items first before summarising the count of "Returned".

#### **3.3.2.1 compute returns by "Sub-category"**

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group orders by specific param.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the number of returned orders.

[***arrange( )*** - dplyr -]{style="color:#d46e15"} to sort the rows in descending order of the counted "Returned" value of each "Sub-category".
:::

```{r}
returned_subCat <- ss_ordersMgmt %>%
  group_by(`Sub-Category`) %>%
  summarise(`Returned` = n()) %>%
  arrange(desc(`Returned`)) %>%
  ungroup()

returned_subCat
```
:::

### **3.3.3 Compute Cumulative Frequency**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***mutate( )*** - dplyr -]{style="color:#d46e15"} to compute new variables "cum_freq" and "cum".

[***cumsum( )*** - base -]{style="color:#d46e15"} to compute vector consists of cumulative sums elements.
:::

```{r}
cf_subCat <- returned_subCat %>%
  mutate(cum_freq = cumsum(Returned)) %>%
  mutate(cum = cumsum(Returned)/sum(Returned))

cf_subCat
```
:::

# 4 EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Pareto Chart

It is crucial to narrow down the 20% factor contributing to the 80% increment or drop in sales orders to avoid unnecessary waste of time and resources during preliminary decision-making for business development.

Hence, the Pareto chart is used to identify the 20% crucial factors and eliminates the 80% less crucial ones.

### **4.1.1 Plot Static Pareto Chart**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***geom_col( )*** - ggplot2 -]{style="color:#d46e15"} to create the bar chart and set the height of the bar to represent the actual returns counts.

[***geom_line( ) & geom_point*** - ggplot2 -]{style="color:#d46e15"} to plot the line and scatter plot for the cumulative frequency of returned counts. The scatter plot helps identify each product's cumulative frequency in a static chart.

[***scale_y\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to adjust the interval between the grid lines and to add a secondary y-axis to illustrate each product's cumulative percentage of returns.

The secondary y-axis is based on a one-to-one transformation of the primary axis..

[***theme( )*** - ggplot2 -]{style="color:#d46e15"} to improve visibility by adjusting the plot's background colour and grid lines.
:::

```{r}
ggplot(data = cf_subCat,
       aes(x = reorder(`Sub-Category`,
                       -`Returned`))) +
  geom_col(aes(y = `Returned`),
           fill = 'salmon', 
           width = 0.8) +
  geom_point(aes(y = `cum_freq`), 
             color = 'grey20', 
             size = 0.8) +
  geom_line(
    aes(y = `cum_freq`, 
        group = 1), 
    colour = 'grey20', 
    size = 0.4) +
  labs(x = "Sub-Category", 
       title = "Pareto Chart of returns by sub-category") +
  scale_y_continuous(name = 'Returns (absolute frequency)', 
                     breaks = seq(0, 3500, 300), 
                     minor_breaks = seq(0, 3500, 100),
                     sec.axis = sec_axis(~.*1/sum(cf_subCat$Returned), 
                                         name = 'Cumulative Frequency', 
                                         breaks = seq(0, 1, 
                                                      by = 0.1), 
                                         labels = scales::percent)) +
  geom_hline(yintercept = 0.8*sum(cf_subCat$Returned), 
             linetype = "dashed", 
             color = "grey50") +
  geom_text(
    aes(17,
        0.8*sum(Returned),
        label = "80.0%",
        vjust = -0.5),
    size = 2) +
  theme(panel.background = element_rect(
    fill = 'white', 
    colour = 'grey60',
    size = 0.5,
    linetype = 'solid'),
    panel.grid.major = element_line(
      size = 0.3, 
      linetype = 'solid', 
      colour = 'grey85'),
    panel.grid.minor = element_line(
      size = 0.2, 
      linetype = 'solid', 
      colour = 'grey90'),
    text = element_text(
      size = 5.5),
    axis.ticks.x = element_blank()) 
```
:::

### **4.1.2 Plot Interactive Pareto Chart**

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***plot_ly( )*** - plotly -]{style="color:#d46e15"} to plot an interactive Pareto chart that allows to view corresponding cumulative percentage for each product when hover across the line or the bars .
:::

```{r}
plot_ly(cf_subCat, 
        x = ~reorder(`Sub-Category`,
                     -`Returned`), 
        y = ~`Returned`, 
        type = "bar", 
        name = "Returned") %>%
  add_trace(x = ~reorder(`Sub-Category`,
                         -`Returned`), 
            y = ~`cum`*100,
            type = "scatter", 
            mode = "lines", 
            yaxis = "y2", 
            name = "Cum. %") %>%
  layout(title = "Pareto chart of returns by sub-category",
         xaxis = list(
           title = "Sub-Category"),
         yaxis = list(
           title = "Returned (Absolute Frequency)", 
           showgrid = F),
         yaxis2 = list(
           overlaying = "y", 
           side = "right", 
           title = "Cumulative Percentage (%)", 
           range = list(0, 100)),
         legend = list(orientation = "h", 
                       yanchor = "bottom", 
                       y = 0.9,
                       xanchor = "top",
                       x = 0.2)) 
```

[Remark :]{style="color:#d69c3c"}

[Interactive chart makes the interpretation easier by showing the sub-categories that below 80%. -]{style="color:#d69c3c"}

[Therewith, eight (8) sub-categories, namely Binders, Paper, Furnishings, Phones, Storage, Accessories, Art, Chairs, are identified to account for 80% of the returned products.]{style="color:#d69c3c"}
:::
