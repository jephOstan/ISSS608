---
title: "Exploration 3 - Interactive & Animated Pyramid Chart"
editor: visual
date:  30 Dec 2022
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

This study explores the interactivity and animation methods in designing an age-gender **Pyramid chart** using **ggplot2** and supporting R packages between 2000 and 2020 at the planning area level.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Challenges of interactive visualisation :**]{style="color:#3a9c88"}

The study requires a certain level of data transformation and several widgets to create an interactive visualisation.

[Transform with *filter( )* function, and add widgets via :]{style="color:#d69c3c"}

-   [*plotly::hovermenu( )*,]{style="color:#d69c3c"}

-   [*plotly::updatemenus( )*,]{style="color:#d69c3c"}

-   [*plotly::layout-sliders( )*.]{style="color:#d69c3c"}
:::

# 2. R PACKAGE REQUIRED

The following are the packages required for this exercise :

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, skimr, questionr, funModeling, ggiraph, gganimate, gifski)
```

[Remarks :]{style="color:#d69c3c"}

[Packages to consider -]{style="color:#d69c3c"}

[sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}
:::

## 2.2 Summary of R Functions

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
R packages and functions used in this exercise :

**readr :**

-   [read_csv( ) -]{style="color:#d69c3c"}

-   [[problems( )](https://www.rdocumentation.org/packages/readr/versions/1.3.1/topics/problems) -]{style="color:#d69c3c"}

**base :**

-   [[cumsum( )](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cumsum) -]{style="color:#d69c3c"}

**ggplot2 :**

-   [[scale_continuous( )](https://www.rdocumentation.org/packages/ggplot2/versions/3.4.0/topics/scale_continuous) -]{style="color:#d69c3c"}

dplyr :

-   [[select( )](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/select) -]{style="color:#d69c3c"}

-   [[group_by( )](https://www.rdocumentation.org/packages/dplyr/versions/1.0.10/topics/group_by) -]{style="color:#d69c3c"}

-   [summarise( ) -]{style="color:#d69c3c"}

-   [[glimpse( )](https://www.rdocumentation.org/packages/dplyr/versions/0.3/topics/glimpse) -]{style="color:#d69c3c"}
:::

# 3. DATA

## 3.1 Acquire Data Source

-   [Singapore Demographic & Geographic Distribution](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)

    1.  Download "[Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesextod2000to2010.ashx)" data set in csv format from Singstat.gov.sg.

    2.  Download "[Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesextod2011to2020.ashx)" data set in csv format from Singstat.gov.sg.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Variable Definition :**]{style="color:#3a9c88"}

"PA" = Planning Area

"SZ" = Subzone

"AG" = Age Group

"Sex" = Gender

"TOD" = Type of Dwelling

"Pop" = Resident Count

"Time" = Time / Period
:::

## 3.2 Data Preparation

### 3.2.1 Import Data Sets

::: {.callout-warning appearance="simple" icon="false"}
This section involves two(2) functions, i.e.

1.  import CSV file as a table data frame that retains spec attribute.

2.  inspect parsing error, if any, when importing the data.

::: callout-note
## import these two(2) data sets separately to identify potential parsing errors.
:::

#### 3.2.1.1 import CSV file :: demography between 2000 and 2010

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
pop_0010 <- read_csv("data/respopagesextod2000to2010.csv")

problems(pop_0010)
```

#### 3.2.1.2 import CSV file :: demography between 2010 and 2020

```{r}
pop_1020 <- read_csv("data/respopagesextod2011to2020.csv")

problems(pop_1020)
```

#### 3.2.1.3 inspect imported data

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***glimpse( )*** - dplyr -]{style="color:#d46e15"} to get a glimpse of the imported data.
:::

#### \-- pop_0010

```{r}
glimpse(pop_0010, 0)

```

#### \-- pop_1020

```{r}
glimpse(pop_1020, 0)
```

[Remarks :]{style="color:#d69c3c"}

-   [Both data sets do not have the same number of rows, i.e. pop_0010(1,040,592 rows) and pop_1020 (984,656 rows).]{style="color:#d69c3c"}

-   [Data types for "Pop" and "Time" are in <dbl> format.]{style="color:#d69c3c"}
:::

## 3.3 Data Wrangling

### 3.3.1 Combine Data Frames

::: {.callout-warning appearance="simple" icon="false"}
Rows bind function will be used instead of the columns bind function as the imported data frames have an unequal number of rows.

However, using rows bind function will create a data frame with file size above 100 MB which exceed the limit.

Hence, change both "Time" and "Pop" from dbl type to int type first.

#### 3.3.1.1 convert data type

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***as.integer( )*** - base -]{style="color:#d46e15"} to convert both Time and Pop from double object to integer object.

[***mutate( )*** - dplyr -]{style="color:#d46e15"} to add the converted variables into the data frame.
:::

```{r}
pop_0010 <- pop_0010 %>% 
  mutate(Time = as.integer(pop_0010$Time)) %>%
  mutate(Pop = as.integer(pop_0010$Pop))

pop_1020 <- pop_1020 %>% 
  mutate(Time = as.integer(pop_1020$Time)) %>%
  mutate(Pop = as.integer(pop_1020$Pop))
```

#### 3.3.1.2 combine both data frames

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***rbind( )*** - dplyr -]{style="color:#d46e15"} to union two or more data frames by row.
:::

```{r}
pop_0020 <- rbind(pop_0010, pop_1020)
```

[Remarks :]{style="color:#d69c3c"}

[The combined data frame file size is 92.7 MB.]{style="color:#d69c3c"}
:::

### 3.3.2 Compute Frequency Count

::: {.callout-warning appearance="simple" icon="false"}
To compute frequency count, first group the variables.

#### 3.3.2.1 group variables

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group Singapore population by age, gender, time and planning area.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the number of residents for each group.
:::

```{r}
freq_pop0020 <- pop_0020 %>%
  group_by(`AG`, `Sex`, `Time`, `PA`) %>%
  summarise(Count = sum(`Pop`)) %>%
  ungroup()
```

#### 3.3.2.2 inspect combined data frame

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***kable( )*** - knitr -]{style="color:#d46e15"} to create tables in Markdown.
:::

```{r}
kable(head(freq_pop0020,2))
```

#### 3.3.2.3 check data consistency

```{r}
#| eval: false
funModeling::freq(freq_pop0020$Time)
```

[Remarks :]{style="color:#d69c3c"}

[As shown in the plot above, the data volume is not the same. There are four (4) different sets of data volume.]{style="color:#d69c3c"}
:::

### 3.3.2 Remove Planning Areas without Residents

::: {.callout-warning appearance="simple" icon="false"}
First identify the planning areas with 0 resident count.

#### 3.3.2.1 list "PA" without resident

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***select( )*** - dplyr -]{style="color:#d46e15"} to select variables by "PA" and "Count".

[***group_by( )*** - dplyr -]{style="color:#d46e15"} to group "PA" variable.

[***summarise( )*** - dplyr -]{style="color:#d46e15"} to count the total number of residents from 2000 to 2020.

[***filter( )*** - dplyr -]{style="color:#d46e15"} to identify the planning areas with no residents.
:::

```{r}
no_pop <- freq_pop0020 %>%
  select(`PA`, `Count`) %>%
  group_by(`PA`) %>%
  summarise(`Total` = sum(`Count`)) %>%
  filter(`Total` == 0) %>%
  select(`PA`) %>%
  ungroup
```

```{r}
questionr::freq(no_pop)
```

[Remarks :]{style="color:#d69c3c"}

[!!!!! why Paya Lebar dont have residents?]{style="color:#d69c3c"}

#### 3.3.2.2 convert variable to non-distributed vector

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***as.vector( )*** - pbdDMAT -]{style="color:#d46e15"} to converts a distributed matrix into a non-distributed vector.
:::

```{r}
no_pop_list <- as.vector(no_pop$PA)

```

[Remarks :]{style="color:#d69c3c"}

[!!!!! what is distributed and non-distributed data? !!!!! why need to convert?]{style="color:#d69c3c"}

#### 3.3.2.3 remove "PA" without resident

```{r}
pop_0020_trim <- freq_pop0020 %>%
  filter(!PA %in% no_pop_list)
```

#### 3.3.2.4 inspect output

```{r}
unique(pop_0020_trim$PA[pop_0020_trim$Count == 0])
```

[Remarks :]{style="color:#d69c3c"}

[!!!!!"PA" without residents are removed????]{style="color:#d69c3c"}
:::

### **3.3.3 Set Display Order & Layout**

::: {.callout-warning appearance="simple" icon="false"}
This section involves 2 parts, i.e. set the orders and the display layout.

#### 3.3.3.1 set the display order

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***factor( )*** - base -]{style="color:#d46e15"} to encode a vector a a factor.

[***arrange( )*** - dplyr -]{style="color:#d46e15"} to sort variable by descending order.
:::

```{r}
order <- c("0_to_4", "5_to_9", "10_to_14", "15_to_19", "20_to_24", "25_to_29", "30_to_34", "35_to_39", "40_to_44", "45_to_49", "50_to_54", "55_to_59", "60_to_64", "65_to_69", "70_to_74", "75_to_79", "80_to_84", "85_to_89", "90_and_over")

pop_0020_sort <- pop_0020_trim %>%
  mutate(AG = factor(AG,
                     levels = order)) %>%
  arrange(AG)
```

#### 3.3.3.2 set the display layout

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***ifelse( )*** - base -]{style="color:#d46e15"} to convert population count of Male residents to be negative value. This will allow the Male data to be plotted on the left side of the pyramid.
:::

```{r}
pop_0020_sort$nCount = ifelse(pop_0020_sort$Sex == "Males",
                               yes = -pop_0020_sort$Count,
                               no = pop_0020_sort$Count)
```

#### \-- inspect output

```{r}
kable(head(pop_0020_sort,2))
kable(tail(pop_0020_sort,2))
```
:::

# 4 EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Plot Animated Pyramid Chart

### 4.1.1 Plot Population from 2000 to 2020

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
For this exercise, the static ggplot figure that was completed in Take-Home Exercise 1 was used. Using **gganimate** library, the static plot was converted into an animated pyramid via *transition_time()* and *ease_aes()* function. A moving subtitle was also included to relay the correct year information to the viewer.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***transition_time( )*** - gganimate -]{style="color:#d46e15"} to display the data that represented specific point in time.

[***scale_x\_continuous( )*** - ggplot2 -]{style="color:#d46e15"} to modify the labels on the x-axis to provide better readability.

[***ifelse( )*** - base -]{style="color:#d46e15"} to convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.
:::

```{r}
anime_pyramid <- ggplot(pop_0020_sort,
                        aes(x = nCount,
                            y = AG, 
                            fill = Sex)) +
  geom_col() +
  scale_x_continuous(breaks = seq(-150000, 
                                  150000, 
                                  50000), 
                     labels = paste0(
                       as.character(c(seq(150, 0, -50),
                                      seq(50, 150, 50))),
                       "k")) +
  labs (x = "Population", 
        y = "Age Group", 
        title = 'Singapore Age-Gender Population Pyramid') +
  theme_bw() +
  theme(axis.ticks.y = element_blank()) +
  scale_fill_manual(values = c("Males" = "lightblue", 
                               "Females" = "lightpink"))
```

```{r}
anime_pyramid + 
  transition_time(Time) +
  ease_aes('linear') +
  labs (subtitle = 'Year: {frame_time}')
```
:::

### **4.1.2 Plot by Year and Planning Location**

::: {.callout-warning appearance="simple" icon="false"}
Next, an interactive visualisation with a slider bar, dropdown menu and tooltip was created. This will enable the user to view the population pyramids for selected planning area across the years. As population numbers may differ drastically for different planning areas, hovering on the plot generates a tooltip which conveniently informs the user what is the age group, gender and population of each bar.

#### **4.1.2.1 define time & planning area**

Define the time and planning area for each unique instance using a for loop.

```{r}
year_list <- list()
for (i in 1:length(
  unique(
    pop_0020_sort$Time))) 
  {year_list[[i]] <- list(method = "restyle",
                          args = list("transforms[0].value",
                                      unique(pop_0020_sort$Time)[i]),
                          label = unique(pop_0020_sort$Time)[i])
  }

PA_list <- list()
for (j in 1:length(unique(pop_0020_sort$PA))) { 
  PA_list[[j]] <- list(method = "restyle",
                        args = list("transforms[1].value", 
                                    unique(pop_0020_sort$PA)[j]),
                        label = unique(pop_0020_sort$PA)[j])
  }
```

#### 4.1.2.2 define drop down menu

```{r}
annot <- list(
  list(text = "Select Planning Area:",
       x = 1.61,
       y = 0.78,
       xref = 'paper',
       yref = 'paper',
       showarrow = FALSE))
```

#### **4.1.2.3 plot with widget**

An interactive graph was then generated using *plotly()*. A tooltip was added using the *hovertemplate* function to include age group, gender and population count.

The *transforms - filter* function was used to filter the data for each plot by 2 variables - Year and Planning Area. Next, *layout - Updatemenus* and *layout - Sliders* was used to include the interactive widgets for the plot - a drop down menu for the planning areas and a slider bar for the years respectively.

::: {.callout-alert appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***plot_ly( )*** - plotly -]{style="color:#d46e15"} to initiate a plotly visualisation.
:::

```{r}
plot_ly(pop_0020_sort, 
        x = ~nCount, 
        y = ~AG,
        type = 'bar', 
        orientation = 'h',
        hovertemplate = ~paste("<br>Age Group:", AG,
                               "<br>Gender:", Sex,
                               "<br>Population:", Count),
        color = ~Sex,
        colors = c("lightpink", "lightblue"),
        transforms = list(
          list(type = 'filter',
               target = ~Time,
               operation = '=',
               value = unique(pop_0020_sort$Time)[1]),
          list(type = 'filter',
               target = ~PA,
               operation = '=',
               value = unique(pop_0020_sort$PA)[1]))) %>%
  layout(autosize = F, 
         bargap = 0.1, 
         barmode = 'overlay',
         xaxis = list(
           title = "Population",
           tickmode = 'array', 
           tickvals = c(-10000, -8000, -6000, -4000, -2000, 
                        0, 2000, 4000, 6000, 8000, 10000),
           ticktext = c('10k', '8k', '6k', '4k', '2k', '0',
                        '2k', '4k', '6k', '8k', '10k')),
         yaxis = list(
           title = "Age Group"),
         title = 'Singapore Age-Sex Population Pyramid',
         updatemenus = list(
           list(type = 'dropdown',
                x = 1.6, 
                y = 0.7,
                buttons = PA_list)),
         sliders = list(
           list(
             active = 1,
             currentvalue = list(prefix = "Year: "),
             pad = list(t = 60),
             steps = year_list)),
         annotations = annot)
```

[Remark :]{style="color:#d69c3c"}

[The pyramid above shows that lower percentage of younger generation, which making Singapore population structure a constrictive type. That means an ageing population.]{style="color:#d69c3c"}

[Hence, this chart provides various stakeholders in the country to plan ahead policies and measures to manage this ageing population challenge.]{style="color:#d69c3c"}
:::

# 5. CONCLUSION

The insights from the visualisations are somewhat similar to that of Take-Home Exercise. Singapore and its planning areas tend to has a constrictive population because there is a lower percentage of younger people, indicates declining birth rates in Singapore, since each succeeding age group is getting smaller and smaller.

An interesting insight from interactive pyramid would be the difference between Mature and Non-mature estates. As with mature estates like Toa Payoh, within younger people, the younger the age group, the smaller the population. However, in non-mature estates like Punggol, within younger people, the younger the age group, the bigger the population. This may be an indication young adults setting up their families in non-mature estates, where most BTOs are built, hence bringing about more babies and children to the estate.

## **5.1 Tableau vs. R**

-   Animations and interactivity in Tableau can easily be generated by a few clicks, whereas it requires more code and hence more tedious in R. However, this also means that visualisation in R is reproducible and repeatable as the steps can be traced back.

-   R allows for more customisation of the visualisations as compared to Tableau. For example, the names widgets can be easily modified to detailed levels, whereas Tableau only takes in the data from the Table.

-   The animation in R may require more customisation to achieve less jerky animation as compared to Tableau.

# 6. REFERENCES

-   [Functions](https://r4ds.had.co.nz/functions.html)

-   [Custom Buttons](https://plotly.com/r/custom-buttons/)

-   [Sliders](https://plotly.com/r/sliders/)

-   [Layout - Updatemenus](https://plotly.com/r/reference/#layout-updatemenus)

-   [Change Plot Size in Rmarkdown](https://stackoverflow.com/questions/52649044/change-output-width-of-plotly-chart-size-in-r-markdown-pdf-output)
