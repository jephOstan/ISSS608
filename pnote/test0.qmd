---
title: "Explore with Geospatial Data"
editor: visual
date:  28 Dec 2022
code-copy: true
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# 1. OVERVIEW

Exploring R functions for visual analytics, and their applications.

# 2. R PACKAGE REQUIRED

The following are the packages required for this exercise :

## 2.1 Load R Packages

::: {.callout-warning appearance="simple" icon="false"}
[Usage of the code chunk below :]{style="color:#a39f9d"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or pacman repository list if it is not installed.

```{r}
pacman::p_load(tidyverse, readxl, knitr, plotly, sf, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork, gplots)
```

[Remarks :]{style="color:#d69c3c"}

[Packages to consider -]{style="color:#d69c3c"}

[sf, tidyverse, questionr, janitor, psych, ggplot2, gcookbook, tmap, ggpubr, egg, corrplot, gtsummary, regclass, caret, heatmaply, ggdendro, cluster, factoextra, spdep, ClustGeo, GGally, skimr, stringr, funModeling, knitr, caTools, viridis, rgeoda, cowplot, patchwork.]{style="color:#d69c3c"}
:::

# 3. DATA

## 3.1 Acquire Data Source

Nigeria water points dataset. Its a wrangled data from [Geospatial Analytics](https://geospatial-analysis-jeph0stan.netlify.app/) module .

## 3.2 Read RDS file

::: {.callout-warning .column-page-right appearance="simple" icon="false"}
```{r}
#| code-fold: false
wp_joined.sf <- read_rds("data/geodata/wp_joined.sf.rds")
```

```{r}
#| code-fold: false
wpt_functional.sf <- read_rds("data/geodata/wpt_functional.sf.rds")
```

```{r}
#| code-fold: false
wp_ngaTrim <- read_rds("data/geodata/wp_ngaTrim.rds")
```
:::

### 3.3 Create Data Frame for Clustering Analysis

```{r}
#| code-fold: false
cluster_vars <- wp_ngaTrim %>%
  st_set_geometry(NULL) %>%
  select("shapeName",
         "total_wp",
         "wp_functional",
         "wp_nonFunctional",
         "wp_unknown",
         "pct_functional", 
         "pct_nonFunctional",
         "pct_handPump",
         "pct_mechPump",
         "pct_tapStand",
         "pct_uc300",
         "pct_uc1000",
         "pct_ucN1000",
         "pct_uc250",
         "pct_urban1",
         "pct_urban0",
         "pct_cs04",
         "pct_cs10",
         "pct_stat1",
         "pct_stat0",
         "pct_ps09",
         "pct_ps19")

row.names(cluster_vars) <- cluster_vars$shapeName
cluster_vars <- cluster_vars %>%
  select(-shapeName)
```

# 4. VISUALISATION

## 4.1 Plot Multiple Boxplots

```{r}
#| code-fold: false
ggarrange(
  (ggplot(data=cluster_vars, aes(x=`pct_functional`)) + 
     geom_boxplot(color="black", fill="#19ff3fFF")), 
  ((ggplot(data=cluster_vars, aes(x=`pct_nonFunctional`)) +
      geom_boxplot(color="black", fill="#ff1919FF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_handPump`)) +
      geom_boxplot(color="black", fill="#FFA319FF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_mechPump`)) +
      geom_boxplot(color="black", fill="#ff8419FF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_tapStand`)) +
      geom_boxplot(color="black", fill="#ff5619FF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_urban0`)) +
      geom_boxplot(color="black", fill="#19beffFF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_uc1000`)) +
      geom_boxplot(color="black", fill="#C16622FF"))),
  ((ggplot(data = cluster_vars, aes(x = `pct_ucN1000`)) +
      geom_boxplot(color="black", fill="#543005FF"))),
   ncol = 2,
  nrow = 4)
```

## 4.2 Plot Basic Boxplot

### 4.2.1 with & without frame

```{r}
#| code-fold: false
boxplot(cluster_vars$wp_functional,
        cluster_vars$wp_nonFunctional,
        frame = FALSE)

boxplot(cluster_vars$wp_functional,
        cluster_vars$wp_nonFunctional)
```

### 4.2.2 change colour, name & direction

```{r}
#| code-fold: false
boxplot(pressure_score ~ usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE, 
        border = "steelblue",
        names = c("uc50", "uc250", "uc300", "uc1000")
        )

boxplot(pressure_score ~ usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE, 
        col = "steelblue",
        names = c("uc50", "uc250", "uc300", "uc1000")
        )

boxplot(pressure_score ~ usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE, 
        border = c("#999999", "#E69F00", "#56B4E9"),
        names = c("uc50", "uc250", "uc300", "uc1000")
        )

boxplot(pressure_score ~ usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE, 
        border = "steelblue",
        horizontal = TRUE
        )

```

### 4.2.3 plot with 2 characters + 1 continuous variable

```{r}
boxplot(pressure_score ~ water_tech_clean*usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE, 
        border = c("#E69F00", "#56B4E9")
        )
```

### 4.2.4 add number of observations in each group

```{r}
#| code-fold: false
boxplot2(pressure_score ~ usage_capacity, 
        data = wpt_functional.sf, 
        frame = FALSE,
        shrink = 0.7,
        border = c("#999999", "#E69F00", "#56B4E9")
        )
```

## 4.3 Plot Mixed Chart with Functions

### 4.3.1 Set Function

```{r}
#| code-fold: false
hist_box_plot <- function(varname, title){ 
  
  func1 <- ggplot(data = cluster_vars, 
       aes(x = varname)) + 
  geom_histogram(bins = 30,
                 color = "black", 
                 fill = "steelblue") +
  theme_classic() + 
  xlab(title)
  
  func2 <- ggplot(data = cluster_vars, 
         aes(x = varname)) + 
    geom_boxplot(fill = "steelblue", 
                 color = "black") + 
    theme_classic() +
    xlab("") +
    theme(axis.text.y = element_blank(),
          axis.ticks.y = element_blank())
  
plot_grid(func1,
          func2,
          align = "v",
          ncol = 1)
}
```

### 4.3.2 Plot Histogram & Box Plot

```{r}
hist_box_plot(cluster_vars$pct_nonFunctional, "Non-Functional Water Point")
```

### 4.3.3 Set Function for Multiple Histograms

```{r}
#| code-fold: false
hist_plot <- function(varname, title){
  func3 <- ggplot(data = cluster_vars, 
       aes(x = varname)) + 
  geom_histogram(bins = 30,
                 color = "black", 
                 fill = "steelblue") +
  theme_classic() + 
  xlab(title)

  func3
}
```

### 4.3.4 Plot Multiple Histograms

```{r}
pct_functional <- hist_plot(cluster_vars$pct_functional, "pct_functional")
pct_nonfunctional <- hist_plot(cluster_vars$pct_nonFunctional, "pct_nonFunctional")
pct_handpump <- hist_plot(cluster_vars$pct_handPump, "pct_handPump")
pct_mechpump <- hist_plot(cluster_vars$pct_mechPump, "pct_mechPump")
pct_uc1000 <- hist_plot(cluster_vars$pct_uc1000, "pct_uc1000")
pct_ucN1000 <- hist_plot(cluster_vars$pct_ucN1000, "pct_ucN1000")
pct_urban0 <- hist_plot(cluster_vars$pct_urban0, "pct_urban0")
pct_stat1 <- hist_plot(cluster_vars$pct_stat1, "pct_stat1")
pct_cs10 <-hist_plot(cluster_vars$pct_cs10, "pct_cs10")
pct_ps19 <-hist_plot(cluster_vars$pct_ps19, "pct_ps19")
```

```{r}
pct_functional + pct_nonfunctional +
  pct_handpump + pct_mechpump +
  pct_uc1000 + pct_ucN1000 +
  pct_urban0 + pct_stat1 +
  pct_cs10 + pct_ps19 +
  plot_layout(ncol = 2)
```

### 4.3.5 Set Function for Multiple Maps

```{r}
#| code-fold: false
choropleth_plot <- function(varname, style, title) {
  tm_shape(wp_ngaTrim) +
    tm_fill(varname, 
          n = 5,
          style = style) +
    tm_borders(alpha = 0.5) +
    tm_layout(main.title = title,
              main.title.size = 0.8,
              main.title.position = "center",
              legend.height = 3, 
              legend.width = 3,
              legend.title.size = 0.8,
              legend.text.size = 0.5,
              frame = TRUE)+ 
    tm_compass(position = c('left','bottom'))
}
```

### 4.3.6 Plot Multiple Maps

```{r}
#| eval: false
tmap_arrange(choropleth_plot("wp_functional", "quantile", 
                "Functional Water Point"),
             choropleth_plot("wp_nonFunctional", "quantile", 
                "Non-functional Water Point"), 
             choropleth_plot("pct_functional", "quantile", 
                "Pct of functional water point"),
             choropleth_plot("pct_nonFunctional", "quantile", 
                "Pct of Non-functional water point"),
             choropleth_plot("pct_handPump", "quantile", 
                "Pct of Hand Pump Deployed"),
             choropleth_plot("pct_mechPump", "quantile", 
                "Pct of Mechanical Pump Deployed"),
             choropleth_plot("pct_urban0", "quantile", 
                "Pct of Water Point in Non-Urban Community"),
             choropleth_plot("pct_cs10", "quantile", 
                "Pct of Water Points with Crucialness > 0.6"),
             choropleth_plot("pct_ps19", "quantile", 
                "Pct of Water Points with Reaching Usage Limit"),
             ncol = 2,
             heights = 5,
             nrow = 5)
```

## 4.4 Compare Plots of Before and After Data Standardisation

### 4.4.1 Standardise Data

As shown in 3.7.3.3, not all variables are not distributed normally. Hence, standardisation will be required before the clustering analysis.

::: {.callout-warning appearance="simple" icon="false"}
### 4.4.1.1 Standardise :: Min-Max Method

```{r}
wp_stdMM <- normalize(cluster_vars)
describe(wp_stdMM)
```

### 4.4.1.2 Standardise :: Z-score Method

```{r}
wp_stdZ <- scale(cluster_vars)
describe(wp_stdZ)
```

[Remarks :]{style="color:#d69c3c"}

[Comparing the reports above, the Min-Max method is the only method that can standardise the value to between 0 and 1.]{style="color:#d69c3c"}
:::

### 4.4.2 Compare Distribution For Standardisation Method

::: {.callout-warning appearance="simple" icon="false"}
Visualise to determine which standardisation method provide the better output.

```{r}
ggarrange(
  (ggplot(data = cluster_vars, aes(x = `pct_stat1`)) +
    geom_density(color = "black", fill = "#19ff3fFF") + 
    ggtitle("Before Standardisation")),
  (ggplot(data = (as.data.frame(wp_stdMM)), aes(x = `pct_stat1`)) +
      geom_density(color = "black", fill = "#19ff3fFF") +
      ggtitle("Min-Max Stdsn.")),
  (ggplot(data = (as.data.frame(wp_stdZ)), aes(x = `pct_stat1`)) +
     geom_density(color = "black", fill="#19ff3fFF") +
     ggtitle("Z-score Stdsn.")),
   ncol = 3)
```
:::
