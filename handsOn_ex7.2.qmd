---
title: "Visualise Geospatial Points"
subtitle: "Hands-on Exercise 7.2 - Visualising and Analysing Geographic Data"
editor: visual
date:  23 Feb 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explore approaches to plot proportional symbol map (also known as graduate symbol map) to visualise different sizes that indicate the magnitude.

Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools' outlets using an R package called **tmap**.

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(sf, tmap, tidyverse)
```

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This hands-on exercise dataset is based on *SGPools_svy21* provided by this lesson.

-   The data is in csv file format.

-   It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches.

-   They are in [Singapore SVY21 Projected Coordinates System](https://www.sla.gov.sg/sirent/CoordinateSystems.aspx).

## **3.2 Import Data**

### **3.2.1 Import Geospatial Data**

Involved two (2) steps : import and inspect imported data set.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read CSV file into a tibble data frame, and named it as *sgpools*.

[***problems( )*** - readr -]{style="color:#d46e15"} to reveal any parsing errors when importing the CSV file.
:::

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")

problems(sgpools)
```

### **3.2.2 Examine data**

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows list() is used to do the job.

```{r}
list(sgpools) 
```

Notice that the *sgpools* data in tibble data frame and not the common R data frame.

## **3.3 Data Wrangling**

### **3.3.1 Convert aspatial data frame to sf data frame**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_as_sf( )*** - sf -]{style="color:#d46e15"} to converts *sgpools* data frame into a simple feature data frame.

Arguments :

-   coords - !!!!! sequence is very important! XCOORD (longitude) first only then YCOORD (latitude).

-   crs - provide the projected coordinate system in epsg format for [Singapore EPSG](https://epsg.io/3414) : 3414.
:::

```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs = 3414)
```

### 3.3.2 Inspect output

```{r}
list(sgpools_sf)
```

Remarks :

Noted it is a point feature class.

# **4. PROPORTIONAL SYMBOL MAP**

## 4.1 Plot Interactive Proportional Symbol Map

### 4.1.1 Turn on interactive mode of tmap

The code churn below will turn on the interactive mode of tmap.

```{r}
tmap_mode("view")
```

### **4.1.2 Create interactive point symbol map**

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "red",
             size = 0.5,
             border.col = "white",
             border.lwd = 1)
```

### **4.1.3 Adjust level of proportion**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***tm_bubbles( )*** - tmap -]{style="color:#d46e15"} to draw proportional bubbles by input "*Gp1Gp2Winnings"* is assigned to size visual attribute.
:::

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "red",
             size = "Gp1Gp2 Winnings",
             border.col = "white",
             border.lwd = 1)
```

### **4.1.4 Differentiate points' colour**

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             border.col = "white",
             border.lwd = 1)
```

## **4.2 PROF'S TWIN BROTHERS :)**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***tm_facets( )*** - tmap -]{style="color:#d46e15"} to produce multiple maps with synchronised zoom and pan settings.
:::

An impressive and little-know feature of **tmap**'s view mode is that it also works with faceted plots. The argument *sync* in *tm_facets()* can be used in this case to produce multiple maps with synchronised zoom and pan settings.

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```

Before you end the session, it is wiser to switch **tmap**'s Viewer back to plot mode by using the code chunk below.

```{r}
tmap_mode("plot")
```

# **5 Reference**

## **5.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

## **5.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

## **5.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
