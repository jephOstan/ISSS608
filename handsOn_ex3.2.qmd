---
title: "Programming Animation"
subtitle: "Hands-on Exercise 3.2 : Interactive Data Visualisation"
editor: visual
date:  12 Feb 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-PKMQ2W4ZRC"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    css: styles.css
---

# **1. OVERVIEW**

This study explores various approaches to make data visualisation interactive.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Scope of this study :**]{style="color:#3a9c88"}

Following are the 2 main focuses :

-   **Animation** by using gganimate and plotlyr packages.

-   **Visualising univariate data** with large number of categories by using rPackedBar package.

Additional learning points are :

-   **Reshape data** by using tidyr package.

-   **Process, wrangle and transform data** by using dplyr package.
:::

# **2. R PACKAGE REQUIRED**

## **2.1 Load R Packages**

```{r}
#| code-fold: false
pacman::p_load(ggiraph, plotly, gganimate, gifski, gapminder, DT, patchwork, rPackedBar, tidyverse) 
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**Usage of R Packages :**]{style="color:#3a9c88"}

-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs. The package provides a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

    -   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

    -   `view_*()` defines how the positional scales should change along the animation.

    -   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

    -   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

    -   `ease_aes()` defines how different aesthetics should be eased during transitions.

-   [gifski](https://cran.r-project.org/web/packages/gifski/) converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.
:::

# **3. DATA PREPARATION**

## **3.1 Acquire Data Source**

This study will be based on the *Data* worksheet from *GlobalPopulation* Excel workbook.

## **3.2 Import Data**

### **3.2.1 Import Attribute Data**

Involved two (2) steps : import and inspect imported data set.

```{r}
#| code-fold: false
col <- c("Country", "Continent")

globalPop <- readxl::read_xls("data/GlobalPopulation.xls",
                      sheet = "Data") %>%
  mutate_each_(funs
               (factor(.)), col) %>%
  mutate(Year = as.integer
         (Year))

problems(globalPop)
```

# 4. ANIMATE DATA VISUALISATION

## 4.1 *gganimate* package

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***transition_time( )*** - gganimate -]{style="color:#d46e15"} to create transition through distinct states by "Year".

[***ease_aes( )*** - gganimate -]{style="color:#d46e15"} to control easing of aesthetics. "linear" is the default value.

-   Other easing functions are :

    -   **quadratic** Models a power-of-2 function

    -   **cubic** Models a power-of-3 function

    -   **quartic** Models a power-of-4 function

    -   **quintic** Models a power-of-5 function

    -   **sine** Models a sine function

    -   **circular** Models a pi/2 circle arc

    -   **exponential** Models an exponential function

    -   **elastic** Models an elastic release of energy

    -   **back** Models a pullback and relase

    -   **bounce** Models the bouncing of a ball
:::

::: panel-tabset
## Animated "linear"

with *ggplot2* functions.

```{r}
#| code-fold: false
#| fig-height: 8
#| fig-width: 10
ggplot(globalPop, 
       aes(x = Old, 
           y = Young,
           size = Population,
           colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +
  ease_aes('linear')
```

## Static Bubble Plot

```{r}
#| code-fold: false
#| fig-height: 8
#| fig-width: 10
ggplot(globalPop, 
       aes(x = Old,
           y = Young,
           size = Population,
           colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```
:::

# 5. REFERENCES

1.  Kam T.S. (2023). Animated Data Visualisation:: gganimate methods. https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03-programming%20interactive%20visualisation#animated-data-visualisation-gganimate-methods

## 
